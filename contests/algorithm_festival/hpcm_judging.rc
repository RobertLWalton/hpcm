# TCL Parameters File for Algorithm Festival Judging
#
# File:		hpcm_judging.rc
# Author:	Bob Walton (walton@seas.harvard.edu)
# Date:		Sat Feb 28 03:51:19 EST 2015
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.

# Table of Contents
#
#	Parameters to be Modified
#	Local Account Parameters
#	Web Page Parameters
#	Parameters Not Usually Modified
#	Computed Parameters (Do Not Modify)
#	Parameter Overrides

# Parameters to be Modified
# ---------- -- -- --------

# Read standard parameters.
#
source $lib_directory/hpcm_judging.rc

# Set to the HPCM directory.  $env(HOME) is the home
# directory of the current (judge's) account.
#
set hpcm_directory $env(HOME)/hpcm

# The following parameters determine the type and
# variety of contest.

# Contest name, for scoreboard etc.
#
set festival_name "FESTIVAL NAME IS TBD"

# Start time is when the problems will be exposed and
# when the non-demos scoreboards start.  If cc_manager
# below is `yes', it will be disabled from start time
# to stop_time.  Also there may be a separate contest
# scoreboard that stops at the stop_time.
#
# The stop_time is in seconds after the start time.
#
set start_time "Jan 1 10:00:00 2030"
set stop_time [expr 6 * 60 * 60]

# Map of contestant email (i.e., account) addresses for
# the scoreboard.  Scores for a contestant with address
# PPP@CCC will by treated as if the contestant name was
# the value of
#
#	submitter_compress_map(PPP@CCC)
#
# if that exists, and as PPP otherwise.
#
array set submitter_compress_map {}
# array set submitter_compress_map {
#	PPP@CCC1	NAME1
#	PPP@CCC2	NAME2
# }

# The email address to be notified for errors or
# queries BEFORE the start time or AFTER the stop time.
#
set manager_address "someone@somecomputer"

# Set the following to "yes" if you want ALL autojudge
# replies to contestants to be CC'ed to the manager
# EXCEPT between the start_time and the stop_time.
#
set cc_manager yes
# set cc_manager no

# A cc address can be added to all autojudge replies to
# a submitter BEFORE the start time or AFTER the stop
# time by adding the pair
#
#	{ regexp address }
#
# to the list `response_manager_map'.  If `regexp'
# matches the submitter (account or email address) then
# `address' is added to the `Cc' addresses of each
# reply.  Use an lappend command as below and quote
# `regexp' and `address' if they contain spaces.
# `address' can have several comma separated addresses.
#
# This allows teams to have their own response managers.
#
# lappend response_manager_map { regexp address }

# Scoreboards.  For a scoreboard named N, scoreboards(N)
# must be defined and have as its value a list of
# scoreboard parameter instructions of the form
#
#	{ PARAMETER-NAME PARAMETER-VALUE }
#
#
# Some parameters of interest are:
#
#	title		Must be given.  E.g.
#			"Demo Problems" or
#			"Geometry Problems"
#
#	start_time	Defaults to $start_time
#
#	stop_time	Defaults to ""
#
#	problems	Defaults to {}
#			(meaning ALL problems)
#
# The title is used in the scoreboard header.  The name
# N is used to make the file names of the scoreboard:
#
#       contest/scoreboard_N
#	contest/scoreboard_N.head
#
# and the command to display the scoreboard is
#
#	scoreboard N
#
# The contest/scoreboard_N files have the form:
#
#  TITLE               				    TIME
#  FESTIVAL_NAME
#
#      <contents of contest/scoreboard_N.head>
#
#  ==== ===== ===== ===== ===== ===== ===== ===== =====
#	   <scoreboard table>
#  ==== ===== ===== ===== ===== ===== ===== ===== =====
#
# You may wish to edit the contest/scoreboard_N.head
# file.
#
set scoreboards(demos} {
    { title "Demo Problems" }
    { start_time "" }
}
set demo_problems {}
foreach p [get_demo_problems] {
    lappend demo_problems | $p
}
set demo_problems [lrange $demo_problems 1 end]
lappend scoreboards(demos) \
    [list problems $demo_problems]

# set scoreboards(N) {
#    { title "N Problems" }
#    { problems ... }
# }
#
# set scoreboards(winners) {
#    { title "Contest Winners" }
#    { problems ... }
# }
# lappend scoreboards(winners) \
#     [list stop_time $stop_time]

# List of makecontest arguments that specify the
# problems.  The format is
#
#	INDEX-FILE-NAME,
#	    SUBDIRECTORY/=problems/,
#	    QUALIFIER:include
#
# where the problems are in the SUBDIRECTORY of the
# directory holding the index file.  See below for
# examples.
#
set problems_arguments "
    $hpcm_directory/libraries/public/bospre-ed.index, \
	=problems/, \
	    ALL:include
"
# Use the following if index is the file ~/ppp/iii and
# problems are in subdirectories of ~/ppp.  Because the
# problems are subdirectories of ~/ppp which contains
# the index file, `SUBDIRECTORY/' is the omitted.
# $env(HOME) is the home directory of the current
# (judge's) account.  `ALL' means include all problems
# listed in the index.
#
# set problems_arguments "
#     $env(HOME)/ppp/iii, \
#         =problems/, \
#             ALL:include
# "
#
# See hpcm/judge/lib/hpcm_judging.rc `makecontest_
# arguments' for more details, and `makecontest -doc'
# for complete details.

# Maximum scores for problems.  These default to 100.
#
# set scoreboard_max_score(PROBLEM) 200


# Web Page Parameters
# --- ---- ----------

# The web_page_URL is the URL of the web page being
# made.  This variable is only used to make help/this_
# contest, and is not use to make the web page itself.
#
set web_page_URL ""

# Set to enable `makeweb'.
#
set makeweb no
# set makeweb yes

# The following are passed to `makeweb' to make the web
# page.  Leave as "" parameters you do not want to use
# (e.g., if web_solutions_password is "" no solutions
# web page will be made).
#
# The web_manager_address will be listed as a contact
# on the festival web pages.
#
# The web_solutions_password PPP will be used to name a
# subdirectory `private/PPP' of the web page directory
# that will hold the solutions.  No link will be made to
# this directory, and the `private' subdirectory will be
# unreadable to the world, so PPP will act as a pass-
# word.
#
# web_description_URL, web_problems_URL, web_help_URL,
# and web_scoreboard_URL are also passed to `makeweb'
# and used to make references from the practice web page
# to the contest description, problem descriptions, web
# help files, and scoreboard if these exist.  These may
# be URL's relative to the practice web page, or
# absolute URL's.
#
# If web_problems_URL is "" the problem descriptions
# from the problem solution files will be put on the
# web as a subpage of the festival web page, but,
# the subpage WILL BE PROTECTED from reading until
# its protection is reset manually according to
# instructions in the problems/index.html file
# comments.
#
set web_manager_address $manager_address
set web_solutions_password ""
set web_description_URL \
    "help/contest/algorithm_festival"
set web_problems_URL ""
set web_help_URL "help"
set web_scoreboard_URL "scoreboard"

# The following are used to construct the festival web
# pages.
#
# If the headers are left "", the page headers are auto-
# matically constructed from the festival_name.
#
# The prefixes come just after the page headers and
# the postfix comes after everything but the web page
# manager.  There are three pages involved: the contest
# page, the problem descriptions page if it is con-
# structed, and the contest solutions page if it is con-
# structed.  The last two pages have no postfix.
#
set web_header ""
set web_prefix "
<H2 ALIGN=\"CENTER\">
<FONT COLOR=\"red\">
Contest Description
</FONT></H2>
"
set web_postfix ""
set web_problems_header ""
set web_problems_prefix ""
set web_solutions_header ""
set web_solutions_prefix ""

# The following scoreboard_commands variable specifies
# places to send copies of various scoreboards.  The
# variable value is a list of items each with one of
# the following formats:
#
#	{ NAME ssh ACCOUNT [REMOTE-COMMAND] }
#	    Pipe the scoreboard through ssh to
#	    execute REMOTE-COMMAND in the remote
#	    ACCOUNT.  If not given, REMOTE-COMMAND
#	    defaults to a template which can be
#	    filled out by editing in the file ./secure/
#	    bin/NAME_authorized_keys after it is created
#	    (this will be mentioned in ./TODO).
#
#	{ NAME sh COMMAND }
#	    Pipe the scoreboard to COMMAND executed
#	    by /bin/sh.
#
#	{ NAME email ... }
#	    See contest_commands in hpcm/judge/lib/
#	    hpcm_judging.rc.
#
# These items are appended to the judging_commands
# global variable: see hpcm/judge/lib/hpcm_judging.rc.
#
# NAME is the name of a command that will be created in
# ./secure/bin to invoke the proper pipe.  It may not
# contain whitespace or /.
#
set scoreboard_commands {
}

# Parameters Not Usually Modified
# ---------- --- ------- --------

# Normally you should not have to make changes below
# this point.

# This contest file:
#
if { $web_page_URL == "" } {
    set this_contest "
    This is an Algorithm Festival.
"
} else {
    set this_contest "
This is an Algorithm Festival with web page at:

    $web_page_URL
"
}
set this_contest "$this_contest
The following commands may be of use:

    help algorithm_festival
        Display a description of Algorithm Festivals.

    help index
    	Display the index of help files.

    help XXXX
        Display the help file name XXX.

    help demos
        Display an index of demonstration problems
"

# Set "yes" if contestant accounts are to be enabled
# for login by ssh using any of the public keys
# ~/.ssh/{identity,id_rsa,id_dsa}.pub that exist.
#
set ssh_enable yes
# set ssh_enable no

# Scoreboard sort mode.  Determines what is reported for
# each submitter on the scoreboard, which is also the
# value the submitters are sorted on.  One of:
#
#	problems	Just number of problems correct.
#
#	score		Just score.
#
#	problems/score	Number of problems correct
#			first, score second.
#
#	score/problems	Score first, number of problems
#			correct second.
#
set scoreboard_sort_mode problems/score

# Set "yes" to use GMT for dates in file and directory
# names.  Otherwise the local time zone is used.
#
set use_gmt no

# Set the manualreply display to have a certain height
# with a given number of blank lines above that.  If you
# have a taller display, increase window_height.
#
# WARNING: If window_height is too large, programs such
# as manualreply and lookat may appear to be malfunc-
# tioning because some of the information they display
# is being scrolled off the bottom of the screen.
#
set window_blank_height 16
set window_height 24

# Set to contest directory, in case the $judging_
# directory/contest link needs to be made.  If needed
# and not set, the name of judging directory with
# `judging' replaced by `contest' and trailing password
# removed will be used.
#
# set contest_directory $env(HOME)/contest_TBD

# Set to the prototype account (as per SETUP_PROTOTYPE).
# If not set, the unique account with name PPP of the
# form *[-_]proto and readable files ~PPP/home/
# setup.tar, ~PPP/home/empty.ls, and ~PPP/home/setup.ls
# is used, if there is such a unique account.
#
# set hpcm_prototype_account TBD

# Set to "no" if you do not want makecontest to run
# `makescoreboard start'.
#
set makescoreboard yes

# Set to "no" if you do not want makecontest to run
# `startcontest start'.
#
set startcontest yes

# The following is the printer map.  It lets each con-
# testant determine his/her own printer by placing the
# printer name in the ~/PRINTER file of the contestant's
# account.  See `hpcm/contestant/bin/ printer_pipe -doc'
# for more documentation.
#
set contest_printer_map "
# Do not edit.  This is copied from the contest_printer_
# map global variable in the hpcm_judging.rc file in the
# judging directory.
#
.* !~/PRINTER
"

# Computed Parameters (Do Not Modify)
# -------- ---------- ---------------

# You should NOT make changes beyond this point, unless
# you want to tune the contest to be a variant of one of
# the standards supported by this file.  If you do want
# to tune the contest, put changes at the very end of
# this file, where they will override the settings of
# this file.

if { $makeweb } {
    if { $web_problems_URL == "" } {
	set web_problems protect
    } else {
	set web_problems no
    }

    if { $web_help_URL == "" } {
	error "web_help_URL is \"\"."
    }
    set web_title $festival_name
}

# Compute whether we have gone beyond the start_time
# or stop_time.
#
set stop_time \
    [absolute_time $stop_time $start_time]
set is_started [is_later $start_time]
set is_stopped [is_later $stop_time]

# Set up manager for this contest.
#
# There is no manager for the contest proper.
#
if { ! $is_started || $is_stopped } {
    set reply_mode auto
    set log_mode auto
    set log_manager $manager_address
    if { $manager_address != "" && $cc_manager } {
	lappend response_manager_map \
		[list ".*" $manager_address]
    }
} else {
    set reply_mode auto+manual
    set log_mode manual
    set log_manager ""
    set response_manager_map {}
}

# Allow inout, solution, cerr in responses.
#
set response_mode "inout+solution+cerr"

set use_authentication yes
set format_submissions yes

# Set score modes and default qualifiers.
#
set scoring_mode auto
set default_correct_qualifier solution
set default_incorrect_qualifier inout
set allowed_qualifiers { "" }

# Scoreboard instructions for an algorithm festival.

# Parameters common to most of the scoreboards.
#
set scoreboard_start_time $start_time
set scoreboard_stop_time ""
set scoreboard_submitters {}
set scoreboard_solved_mode score
set scoreboard_factor() 0.95

# Must set scoreboard_title to something so it will
# be discovered and made global.
#
set scoreboard_title TITLE
set scoreboard_abbreviation(TITLE) title
set scoreboard_instructions {}

set scoreboard_map ".* NONE scoreboard_index"
set scoreboard_index "
Use one of the following commands to see a scoreboard:
"

foreach N [array names scoreboards] {
    lappend scoreboard_instructions \
            "# scoreboard $N #"  \
    	    "OUTPUT contest/scoreboard_$N" \
	    GRANT_ACCESS
    foreach instruction $scoreboards($N) {
        lappend scoreboard_instructions $instruction
    }
    lappend scoreboard_instructions \
	{LINE TITLE TIME} \
	[list LINE $festival_name] \
	BLANK \
	"INPUT contest/scoreboard_${N}.head" \
	BLANK \
	BAR \
	BOARD \
	BAR
    set scoreboard_index "$scoreboard_index
    scoreboard $N"
    set scoreboard_map "$scoreboard_map
.* $N scoreboard_$N"

}

set scoreboard_index "$scoreboard_index
"
set scoreboard_map "$scoreboard_map
"
set public_files {
    { contest/scoreboard_index scoreboard_index }
    { contest/scoreboard_map scoreboard_map }
}

# Default arguments to makecontest.
#
set makecontest_arguments "
    -formal \
    -printer_map \
    -public_files \
    [include_if { $makeweb == "yes" } "-web"] \
    [include_if { $ssh_enable == "yes" } "-ssh"] \
    [include_if { $startcontest == "yes" } \
    		"-startcontest"] \
    [include_if { $makescoreboard == "yes" } \
    		"-scoreboard"] \
    $hpcm_directory/contestant/help/help_index, \
	common/=help/, \
	contest/=help/, \
	    contest/algorithm_festival:include, \
	    general:include, \
	    accounts:include, \
	    language:include \
    $hpcm_directory/libraries/demos/demos.index, \
	io/=demos/, \
	algorithms/=demos/, \
	    contest:include \
    $problems_arguments
"

# Parameter Overrides
# --------- ---------

# Add parameter settings here to override parameters
# that are normally not changed above.
