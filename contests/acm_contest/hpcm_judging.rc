# TCL Parameters File for Formal Contest Judging
#
# File:		hpcm_judging.rc
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Sun Dec 18 05:22:12 EST 2005
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: hc3 $
#   $Date: 2005/12/18 10:20:55 $
#   $RCSfile: hpcm_judging.rc,v $
#   $Revision: 1.27 $

# Read standard parameters.
#
source $lib_directory/hpcm_judging.rc

# The following parameters determine the type and
# variety of contest.

# Set to the HPCM directory.
#
set hpcm_directory $env(HOME)/hpcm

# Contest name, for scoreboard etc.
#
set contest_name "CONTEST NAME IS TBD"

# If there will be a manager on duty during the contest
# to run the tracker program and manually check the
# scoring, leave the following as "".  Otherwise set it
# to the email address to be notified for errors or
# queries, and in this case the scoring will be all
# automatic.
#
set manager_address ""
# set manager_address "someone@somecomputer"

# Set the following to "yes" if the manager_address is
# not "" AND you want all replies to contestants to be
# CC'ed to the manager.
#
set cc_manager "no"

# Scoring type.  One of:
#
#	timed		Timed from time the problems are
#			passed out.
#
#	untimed		Scored according to number of
#			incorrect, in, and inout submis-
#			sions.
#
#	dated		Only date of correct submission
#			is given.
#
#	timed+untimed	The contest is timed, but 12
#			hours after the stop time the
#			contest is converted into an
#			untimed contest.
#
#	timed+dated	The contest is timed, but 12
#			hours after the stop time the
#			contest is converted into a
#			dated contest.
#
#
set scoring_type timed+untimed

# For timed contests only, the start time and stop time
# of the contest.
#
set start_time  "Jan 1 10:00:00 2050"
set stop_time   "Jan 1 15:00:00 2050"
#
# If the scoreboard is to be frozen at a particular
# time, that is the freeze time.  Otherwise set the
# freeze time to "".
#
# set freeze_time   "Jan 1 14:00:00 2050"
set freeze_time   ""
#
# The penalty IN SECONDS for submitting an incorrect
# solution to a problem for which a correct solution is
# later submitted in a timed contest.  1200 = 20 min.
#
set penalty 0
# set penalty 120

# The following are the beginning and ending of the
# initial this_contest help file.  Each should begin and
# end with a line feed, or be "".
# 
set this_context_prefix "
THIS FILE IS UNEDITED AND INACCURATE!
"
set this_context_postfix ""

# List of addresses for to email scoreboard to.  If this
# list contains zzz<YYY>, then every time the scoreboard
# is made it will be emailed to `zzz<YYY>', so in the
# account YYY .procmailrc file you should put something
# like the following to copy the scoreboard into the
# public_html/xxx file of the YYY account:
#
#	:0 b:
#	* ^To:.*zzz
#	| cat >public_html/xxx;\
#	  chmod a+r public_html/xxx
#
set scoreboard_addresses { }

# List of regular expressions that match the test
# accounts which are NOT to appear on the scoreboard
# once a timed contest starts.  They will appear in all
# other circumstances.
#
set test_accounts { }

# Ditto for test problems instead of accounts.  Usually
# you need not change this.
#
set test_problems { count javaio }

# List of makecontest arguments that specify the
# problems.  The format is
#
#	INDEX-FILE-NAME,
#	    SUBDIRECTORY/=problems/,
#	    QUALIFIER:include
#
# where the problems are in the SUBDIRECTORY of the
# directory holding the index file.
#
set problems_arguments "
    $hpcm_directory/problem_library/index, \
	public/=problems/, \
	    P1:include
"
# Use the following if index is in directory ~/p and
# problems are in subdirectories of ~/p (so
# `SUBDIRECTORY/' is the omitted).
#
# set problems_arguments "
#     $env(HOME)/p/index, \
#         =problems/, \
#             ALL:include
# "

# Set the following if you want to use `makeweb' to
# make a web page.  Leave "" parameters you do not want
# to use (e.g., if web_solutions_password is "" no
# solutions web page will be made).
#
set web_contest_name $contest_name
set web_solutions_password ""
set web_help_URL ""
set web_scoreboard_URL ""
set web_manager_address ""


# Normally you should not have to make changes below
# this point.

# Set the manualreply display to have a certain height
# with a given number of blank lines above that.  If you
# have a taller display, increase window_height.
#
# WARNING: If window_height is too large, programs such
# as manualreply and lookat may appear to be malfunc-
# tioning because the information they display is being
# scrolled off the top of the screen.
#
set window_blank_height 16
set window_height 24

# Set to contest directory, in case the $judging_
# directory/contest link needs to be made.  If needed
# and not set, the name of judging directory with
# `judging' replaced by `contest' and trailing password
# removed will be used.
#
# set contest_directory $env(HOME)/contest_TBD

# Set to the prototype account (as per SETUP_PROTOTYPE).
# If not set, the unique account with name of the form
# *[-_]proto and readable files home/setup.tar and home/
# setup.ls is used, if there is such a unique account.
#
# set hpcm_prototype_account TBD

# Time in seconds after stop_time that contest is
# converted from a timed to an untimed or dated contest.
#
set conversion_delay [expr 12 * 60 * 60]

# Require submission email to have a formatted body
# with HPCM_BEGIN, HPCM_END, and `..'s.
#
set format_submissions yes


# You should NOT make changes beyond this point, unless
# you want to tune the contest to be a variant of one of
# the standards supported by this file.

# Set contest type to timed, untimed, or dated according
# to previous contest type, stop time, conversion_delay,
# and time of day.
#
set is_post_contest no
set scoring_subtype $scoring_type
switch $scoring_type {
    timed { }
    untimed { }
    dated { }
    timed+untimed -
    timed+dated {
        set c [clock scan $stop_time]
	incr c $conversion_delay
	if { [clock seconds] < $c } {
	    set scoring_subtype timed
	} else {
	    regexp {^timed+(.*)$} $scoring_type \
	           forget scoring_subtype
	    set is_post_contest yes
	}
    }
    default {
        error "Bad scoring_type" $scoring_type"
    }
}

# Default arguments to makecontest.
#
if { $scoring_subtype == "timed" } {
    set description ""
} else {
    set description "-description"
}
set makecontest_arguments "
    -formal $description \
    $judging_directory/help/index, \
	=help/ \
    $hpcm_directory/contestant/help/index, \
	common/=help/, \
	formal/=help/, \
	advanced/=help/, \
	    formal:include, \
	    common:include, \
	    advanced:include \
    $hpcm_directory/problem_library/index, \
	    demo:include, \
    $problems_arguments
"

# Set the start/freeze/stop times for the contest.
#
if { $scoring_subtype == "timed" } {
    set scoreboard_start_time  $start_time
    set scoreboard_freeze_time $freeze_time
    set scoreboard_stop_time   $stop_time
}

# Scoreboard name, i.e, the name of the contest.
#
set scoreboard_name $contest_name

# Compute scoreboard_submitters to exclude test
# accounts.
#
set scoreboard_submitters {}
foreach x $test_accounts {
    lappend scoreboard_submitters & ! $x
}
set scoreboard_submitters \
    [lrange $scoreboard_submitters 1 end]
#
# Compute scoreboard_problems to exclude test
# problems.
#
set scoreboard_problems {}
foreach x $test_problems {
    lappend scoreboard_problems & ! $x
}
set scoreboard_problems \
    [lrange $scoreboard_problems 1 end]

# Scoreboard instructions for a timed contest with no
# freeze.  contest/scoreboard.final is produced
# beginning at the stop time and is updated until the
# stop time + 10 minutes.  If you need to update it
# after that, delete it and run `makescoreboard update'.
#
set no_freeze_timed_scoreboard_instructions {

    { OUTPUT contest/scoreboard.1 START STOP+600 }
    GRANT_ACCESS

    { LINE NAME "Scoreboard" TIME }
    BLANK
    { INPUT contest/scoreboard.1head }
    BLANK
    BAR
    BOARD
    BAR

    { OUTPUT contest/scoreboard.final STOP STOP+600 }

    { LINE NAME "Final Results" "" STOP }
    BLANK
    BAR
    BOARD
    BAR
    { INPUT contest/who_where }
    BAR

    { OUTPUT contest/scoreboard.1 "" START }
    GRANT_ACCESS

    { LINE NAME "Pre-Contest Scoreboard" TIME }
    BLANK
    { INPUT contest/scoreboard.1head }
    BLANK
    { LINE "The demo problems `count' and `javaio'\
            will disappear from the" }
    { LINE "scoreboard once the contest starts.  Until\
            the contest starts, dates of" }
    { LINE "first correct submission are displayed (for\
            demo problems).  After the" }
    { LINE "contest starts, problem times (differences\
            of first correct submission" }
    { LINE "times and contest start time) will be\
            displayed." }
    BLANK
    { start_time "" }
    { stop_time START }
    { problems {} }
    { submitters {} }
    BAR
    BOARD
    BAR
}

# Scoreboard instructions for a timed contest WITH
# freeze.  contest/scoreboard.final is produced
# beginning at the stop time and is updated until the
# stop time + 10 minutes.  If you need to update it
# after that, delete it and run `makescoreboard update'.
#
# After scoreboard is frozen, contest/scoreboard.current
# is updated to be the unfrozen and invisible
# scoreboard.
#
set freeze_timed_scoreboard_instructions {

    { OUTPUT contest/scoreboard.current FREEZE "" }

    { LINE NAME "Current Scoreboard" TIME }
    BLANK
    BAR
    BOARD
    BAR

    { OUTPUT contest/scoreboard.final \
             STOP STOP+600 }

    { LINE NAME "Final Results" STOP }
    BLANK
    BAR
    BOARD
    BAR
    { INPUT contest/who_where }
    BAR

    { OUTPUT contest/scoreboard.public START FREEZE }

    BAR
    BOARD
    BAR

    { OUTPUT contest/scoreboard.public "" START }

    { LINE "The demo problems `count' and `javaio'\
            will disappear from the" }
    { LINE "scoreboard once the contest starts.  Until\
            the contest starts, dates of" }
    { LINE "first correct submission are displayed (for\
            demo problems).  After the" }
    { LINE "contest starts, problem times (differences\
            of first correct submission" }
    { LINE "times and contest start time) will be\
            displayed." }
    { start_time "" }
    { stop_time START }
    { problems {} }
    { submitters {} }
    BAR
    BOARD
    BAR

    { OUTPUT contest/scoreboard.freeze FREEZE FREEZE }

    BLANK
    { LINE "To heighten suspense, scoreboard updating\
            has been stopped as of:" }
    { LINE "" FREEZE "" }
    { LINE "You will be given a copy of the final\
            scoreboard after winners have been" }
    { LINE "announced at the post contest meeting." }

    { OUTPUT contest/scoreboard.1 }
    GRANT_ACCESS
    SEND

    { LINE NAME "Public Scoreboard" TIME }
    { INPUT contest/scoreboard.freeze }
    BLANK
    { INPUT contest/scoreboard.1head }
    BLANK
    { INPUT contest/scoreboard.public }
}

# Scoreboard instructions to be used contest has been
# converted from timed to untimed or dated:
#
set post_contest_scoreboard_instructions {

    { OUTPUT contest/scoreboard.1 "" "" }
    GRANT_ACCESS
    SEND

    { LINE NAME "Post Contest Scoreboard" TIME }
    BLANK
    { INPUT contest/scoreboard.1head }
    BLANK

    { start_time "" }
    { stop_time "" }
    { problems {} }
    { submitters {} }
    BAR
    BOARD
    BAR
}

# Scoreboard instructions to be used contest for an
# untimed or dated contest:
#
set not_timed_scoreboard_instructions {

    { OUTPUT contest/scoreboard.1 "" "" }
    GRANT_ACCESS
    SEND

    { LINE NAME "Public Scoreboard" TIME }
    BLANK
    { INPUT contest/scoreboard.1head }
    BLANK

    { start_time "" }
    { stop_time "" }
    { problems {} }
    { submitters {} }
    BAR
    BOARD
    BAR
}

# Scoreboard instructions for this contest:
#
if { $is_post_contest } {
    set scoreboard_instructions \
        $post_contest_scoreboard_instructions
} elseif { $scoring_subtype != "timed" } {
    set scoreboard_instructions \
        $not_timed_scoreboard_instructions
} elseif { $freeze_time == "" } {
    set scoreboard_instructions \
        $no_freeze_timed_scoreboard_instructions
    set scoring_mode auto+manual
    set reply_mode auto+manual
    set log_mode manual
} else {
    set scoreboard_instructions \
        $freeze_timed_scoreboard_instructions
}

if { $scoring_subtype == "timed" } {
    set response_mode ""
    set scoreboard_use_qualifiers no
} elseif { $scoring_subtype == "untimed" } {
    set response_mode in+inout+solution
    set scoreboard_use_qualifiers yes
} else {
    set response_mode in+inout+solution
    set scoreboard_use_qualifiers no
}

# Set up manager for this contest.
#
if {    $scoring_type == "timed" \
     && $scoring_type != $scoring_subtype } {
    set manager_address ""
}
if { $manager_address == "" } {
    set scoring_mode auto+manual
    set reply_mode auto+manual
    set log_mode manual
    set reply_manager ""
    set log_manager ""
} else {
    set scoring_mode auto
    set reply_mode auto
    set log_mode auto
    set reply_manager $manager_address
    set log_manager $manager_address
}
if { $cc_manager } {
    set response_manager $reply_manager
} else {
    set response_manager ""
}
