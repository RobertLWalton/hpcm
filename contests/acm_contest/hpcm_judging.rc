# TCL Parameters File for Formal Contest Judging
#
# File:		hpcm_judging.rc
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Mon Mar 18 13:02:29 EDT 2013
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: walton $
#   $Date: 2013/03/19 15:49:59 $
#   $RCSfile: hpcm_judging.rc,v $
#   $Revision: 1.86 $

# Table of Contents
#
#	Parameters to be Modified
#	Local Account Parameters
#	Web Page Parameters
#	Parameters Not Usually Modified
#	Computed Parameters (Do Not Modify)
#	Parameter Overrides

# Parameters to be Modified
# ---------- -- -- --------

# Read standard parameters.
#
source $lib_directory/hpcm_judging.rc

# The following parameters determine the type and
# variety of contest.

# Set to the HPCM directory.  $env(HOME) is the home
# directory of the current (judge's) account.
#
set hpcm_directory $env(HOME)/hpcm

# Contest name, for scoreboard etc.
#
set contest_name "CONTEST NAME IS TBD"

# Contest start time, stop time, time scoreboard is
# frozen, and time contest is converted to untimed
# practice.  Times other than start_time may be
# relative to start_time in seconds.
#
set start_time  "Jan 1 10:00:00 2030"
set stop_time   [expr 5 * 60 * 60]
set freeze_time   [expr 4 * 60 * 60]
set convert_time   [expr 6 * 60 * 60]
#
# The penalty in minutes for submitting an incorrect
# solution to a problem for which a correct solution is
# later submitted in a timed contest.
#
set penalty_minutes 20
# set penalty_minutes 0

# Email address of contest manager after contest has
# been converted to an untimed practice.  Not used
# during timed contest.  May be set to "" if there
# is no manager.
#
set manager_address "someone@somecomputer"

# A cc address can be added to all autojudge replies to
# a submitter from a directory named `date-<<submitter>-
# submission' by adding the pair
#
#	{ regexp address }
#
# to the list `response_manager_map'.  If `regexp'
# matches `submitter' then `address' is added to the
# `Cc' addresses of each reply.  Use an lappend command
# as below and quote `regexp' and `address' if they
# contain spaces.  `address' can have several comma
# separated addresses.
#
# This allows teams to have their own response managers.
#
# lappend response_manager_map { regexp address }

# The following printer_commands variable specifies the
# printers to be used during any timed contest.  If
# this list is empty, the PRINTER environment variable
# will be used for all contestants.
#
# The variable value is a list of items each with one
# of the following formats:
#
#	{ REGEXP NAME ssh ACCOUNT REMOTE-COMMAND }
#	    Print by piping postscript through
#	    ssh to execute REMOTE-COMMAND in the
#	    remote ACCOUNT.
#
#	{ REGEXP NAME sh COMMAND}
#	    Print by piping postscript into the
#	    given command.
#
#	{ REGEXP NAME }
#	    Print as designated by a previous list item
#	    with the same name.
#
#	{ REGEXP NAME ... }
#	    Print by piping postscript into the command
#	    created by appending { NAME ... } to the
#	    contest_commands global variable: see that
#	    variable in hpcm/judge/lib/hpcm_judging.rc
#	    for details.  In particular, emailing the
#	    postscript to some address is supported.
#
#	{ REGEXP TARGET }
#	    Here TARGET is a printer name as per the
#	    printer_pipe contestant command printer_map
#	    file, and must begin with | or ! or contain
#	    a @.  This merely makes an entry in the
#	    contest/printer_map file.
#
# REGEXP is an expr(1) (not TCL) regular expression that
# matches the contestant account name.  Backslashes in
# REGEXP must be doubled, or alternatively REGEXP can be
# { } quoted.  There must be no whitespace in REGEXP.
# The first item matched by a contestant account name is
# used.
#
# NAME is the name of a command that will be create to
# invoke the proper pipe.  It may not contain whitespace
# or /.  It should be distinct from other file names
# in ./contest.  It may not begin with ! or | or contain
# a @.
#
set printer_commands {
}

# TCL list of TCL regular expressions that match the
# test accounts which are NOT to appear on the score-
# board once a timed contest starts.  They will appear
# before a timed contest starts, and for contests of
# scoring_type "feedback" or "unranked", but not for
# the post contests of "timed+xxxx" contests.
#
set test_accounts { }

# Ditto for test problems instead of accounts.  Usually
# you need not change this.
#
set test_problems { count javaio }

# List of makecontest arguments that specify the
# problems.  The format is
#
#	INDEX-FILE-NAME,
#	    SUBDIRECTORY/=problems/,
#	    QUALIFIER:include
#
# where the problems are in the SUBDIRECTORY of the
# directory holding the index file.  See below for
# examples.
#
set problems_arguments "
    $hpcm_directory/problem_library/index, \
	public/=problems/, \
	    P1:include
"
# Use the following if index is the file ~/ppp/iii and
# problems are in subdirectories of ~/ppp.  Because the
# problems are subdirectories of ~/ppp which contains
# the index file, `SUBDIRECTORY/' is the omitted.
# $env(HOME) is the home directory of the current
# (judge's) account.  `ALL' means include all problems
# listed in the index.
#
# set problems_arguments "
#     $env(HOME)/ppp/iii, \
#         =problems/, \
#             ALL:include
# "
#
# See hpcm/judge/lib/hpcm_judging.rc `makecontest_
# arguments' for more details, and `makecontest -doc'
# for complete details.

# Local Account Parameters
# ----- ------- ----------

# Parameters to be set if there are local contestant
# accounts:
#

# Browser to use for javahelp and/or stlhelp.
#
set browser elinks_helper

# Location of JAVA API index for browser to use to
# implement javahelp.  If not set, the javahelp contes-
# tant command is not enabled.
#
set java_api_index /usr/share/javadoc/java/index.html

# Location of STL API index for browser to use to
# implement stlhelp.  If not set, the stlhelp contestant
# command is not enabled.
#
set stl_api_index \
    $hpcm_directory/contestant/help/STL_doc/index.html

# If "yes" contestants can use the browser.  If "no",
# contestants cannot use the browser directly, but must
# use javahelp or stlhelp if they are enabled.
#
set browser_ok no

# Set "yes" if contestant accounts are to be enabled
# for login by ssh using any of the public keys
# ~/.ssh/{identity,id_rsa,id_dsa}.pub that exist.
#
set ssh_enable yes
# set ssh_enable no


# Web Page Parameters
# --- ---- ----------

# URL of contest web page.
#
set web_page_URL "www.somewhere.edu/~xxx/yyy"

# The following are passed to `makeweb' to make the web
# page.  Leave as "" parameters you do not want to use
# (e.g., if web_solutions_password is "" no solutions
# web page will be made).
#
# The web_manager_address will be listed as a contact
# on the web page.  The web_solutions_password PPP will
# be used to name a subdirectory `private/PPP' of the
# web page directory that will hold the solutions.  No
# link will be made to this directory, and the `private'
# subdirectory will be unreadable to the world, so PPP
# will act as a password.  The web_help_URL is the URL
# of the help page (see hpcm/contestant/help Makefile)
# relative to the contest web page.  The web_scoreboard_
# URL is the URL of the scoreboard relative to the web
# page; usually this is posted by using scoreboard_
# commands (see below).  Problems will be put on the
# web page if "web" is in `description_type'.
#
set web_solutions_password ""
set web_help_URL ""
set web_scoreboard_URL ""

# The following scoreboard_commands variable specifies
# places to send a copy of ./contest/scoreboard.  The
# variable value is a list of items each with one of
# the following formats:
#
#	{ NAME ssh ACCOUNT [REMOTE-COMMAND] }
#	    Pipe ./contest/scoreboard through ssh to
#	    execute REMOTE-COMMAND in the remote
#	    ACCOUNT.  If not given, REMOTE-COMMAND
#	    defaults to a template which can be
#	    filled out by editing in the file
#	    ./secure/bin/NAME after it is created
#	    (this will be mentioned in a TODO).
#
#	{ NAME ... }
#	    Pipe ./contest/scoreboard to a command
#	    created by appending { NAME ... } to the
#	    judging_commands global variable: see that
#	    variable in hpcm/judge/lib/hpcm_judging.rc
#	    for details.  In particular, emailing the
#	    scoreboard to some address is supported,
#	    and for emailing REMOTE-COMMAND defaults
#	    as for ssh.
#
# NAME is the name of a command that will be created in
# ./secure/bin to invoke the proper pipe.  It may not
# contain whitespace or /.
#
set scoreboard_commands {
}


# Parameters Not Usually Modified
# ---------- --- ------- --------

# Normally you should not have to make changes below
# this point.

# Set to "yes" if in addition to normal submissions from
# contestants with accounts, you want to allow email
# submissions.  You may want to reset submitter_
# compress_mode below if you reset this.
#
set allow_email_submissions no

# Set to "long" to include a contestant's primary domain
# name (e.g. `harvard') or "short" to not include the @
# or anything after that.
#
# set submitter_compress_mode long
set submitter_compress_mode short

# Set "yes" to use GMT for dates in file and directory
# names.  Otherwise the local time zone is used.
#
set use_gmt no

# Set the manualreply display to have a certain height
# with a given number of blank lines above that.  If you
# have a taller display, increase window_height.
#
# WARNING: If window_height is too large, programs such
# as manualreply and lookat may appear to be malfunc-
# tioning because some of the information they display
# is being scrolled off the top of the screen.
#
set window_blank_height 16
set window_height 24

# Set to contest directory, in case the $judging_
# directory/contest link needs to be made.  If needed
# and not set, the name of judging directory with
# `judging' replaced by `contest' and trailing password
# removed will be used.
#
# set contest_directory $env(HOME)/contest_TBD

# Set to the prototype account (as per SETUP_PROTOTYPE).
# If not set, the unique account with name of the form
# *[-_]proto and readable files home/setup.tar, home/
# empty.ls, and home/setup.ls is used, if there is such
# a unique account.
#
# set hpcm_prototype_account TBD

# Time in seconds after stop_time that contest is con-
# verted from a timed to a feedback or unranked contest
# when the scoring_type is timed+feedback or
# timed+unranked.
#
set conversion_delay [expr 12 * 60 * 60]

# Set to "no" if you do not want makecontest to run
# `makescoreboard start'.
#
set makescoreboard yes

# Set to "no" if you do not want makecontest to run
# `startcontest start'.
#
set startcontest yes

# The following is the printer map for an untimed
# contest.  It lets each contestant determine his/her
# own printer by placing the printer name in the
# ~/PRINTER file of the contestant's account.  See
# `hpcm/contestant/bin/printer_pipe -doc' for more
# documentation.
#
set untimed_printer_map "
# Do not edit.  This is copied from the untimed_
# printer_map global variable in the hpcm_judging.rc
# file in the judging directory.
#
.* !~/PRINTER
"


# Computed Parameters (Do Not Modify)
# -------- ---------- ---------------

# You should NOT make changes beyond this point, unless
# you want to tune the contest to be a variant of one of
# the standards supported by this file.  If you do want
# to tune the contest, put changes at the very end of
# this file, where they will override the settings of
# this file.

# Compute whether we have converted to untimed practice
# and change convert_time into date/time format so
# CONVERT abbreviation will work for scoreboard_
# instructions.
#
if { [regexp {^[+0-9]} $convert_time } {
    set ct [clock scan $start_time]
    incr ct $convert_time
    set convert_time [clock format $ct]
} else {
    set ct [clock scan $convert_time]
}
set converted [eval $ct <= [clock seconds]]

# Set up manager for this contest.
#
# There is no manager for the timed contest.
#
set cc_manager no
if { ! $converted } {
    set manager_address ""
    set scoring_mode auto+manual
    set reply_mode auto+manual
    set log_mode manual
    set log_manager ""
} else {
    set scoring_mode auto
    set reply_mode auto
    set log_mode auto
    set log_manager $manager_address
    if { && $manager_address != "" } {
	set cc_manager yes
	lappend response_manager_map \
		[list ".*" $manager_address]
    }
}

# The following computes the printer_map file value for
# the timed contest.  This code may append items to
# contest_commands.
#
set timed_printer_map "
# Do not edit.  This is created from the printer_
# commands global variable in the hpcm_judging.rc file
# in the judging directory.
#"
if { [llength $printer_commands] == 0 } {
    if { [info exists env(PRINTER)] } {
        set timed_printer_map \
	    "$timed_printer_map\n.* $env(PRINTER)"
    }
} else {
    set_contest_directory
    catch { unset names }
    foreach item $printer_commands {

	set regexp  [lindex $item 0]
	set name [lindex $item 1]

	if { [llength $item] > 2 } {
	    lappend contest_commands \
	            [lrange $item 1 end]
	}

	regsub -all {\\} $regexp {\\\\} regexp

	if {    [regexp {^[!|]} $name] \
	     || [regexp {@} $name] } {
	    set timed_printer_map \
		"$timed_printer_map\n$regexp $name"
	} else {
	    set timed_printer_map \
		"$timed_printer_map\n$regexp\
		 |$contest_directory/$name"
	}
    }
}

# Set ./contest/printer_map according to contest subtype.
#
if { ! $converted } {
    set contest_printer_map $timed_printer_map
} else {
    set contest_printer_map $untimed_printer_map

    # Write ./contest/printer_map if that is not
    # equal to untimed_printer_map
    #
    set_contest_directory
    set printer_map \
	[read_entire_file \
	    $contest_directory/printer_map]
    if { $untimed_printer_map != $printer_map } {
	[write_file $contest_directory/printer_map \
		    $untimed_printer_map]
    }
}

set javaok [info exists java_api_index]
if {    $javaok \
     && [regexp {r..} [get_access $java_api_index]] } {

    set javahelp "
# Do not edit.  This file is generated from information
# provided by the `browser' and `java_api_index' global
# variables in the hpcm_judging.rc file in the judging
# directory.
#
$browser '$browser $java_api_index'
"
}

set stlok [info exists stl_api_index]
if {    $stlok \
     && [regexp {r..} [get_access $stl_api_index]] } {

    set stlhelp "
# Do not edit.  This file is generated from information
# provided by the `browser' and `stl_api_index' global
# variables in the hpcm_judging.rc file in the judging
# directory.
#
$browser '$browser $stl_api_index'
"
}

# Require or do not require submission email to have a
# formatted body with HPCM_BEGIN, HPCM_END, and `..'s.
#
if { $allow_email_submissions == "no" } {
    set use_authentication yes
    set format_submissions yes
} elseif { $allow_email_submissions == "yes" } {
    set use_authentication no
    set format_submissions no
} else {
    error "Bad allow_email_submissions value:\
           $allow_email_submissions"
}

# Default arguments to makecontest.
#
set makecontest_arguments "
    -formal -printer_map \
    [include_if { $javaok } "-javahelp"] \
    [include_if { $stlok } "-stlhelp"] \
    [include_if { $scoring_subtype != "timed" } \
    	        "-description"] \
    [include_if { $ssh_enable == "yes" } "-ssh"] \
    [include_if { $makescoreboard == "yes" } \
    		"-scoreboard"] \
    [include_if { $startcontest == "yes" } \
    		"-startcontest"] \
    $judging_directory/help/index, \
	=help/ \
    $hpcm_directory/contestant/help/index, \
	common/=help/, \
	contest/=help/, \
	advanced/=help/, \
	    formal:include, \
	    local:include, \
	    common:include, \
	    advanced:include \
    $hpcm_directory/problem_library/index, \
	    demo:include \
    $problems_arguments
"


if { $converted } {
    set scoring_mode auto
    set default_correct_qualifier solution
    set default_incorrect_qualifier inout
    set scoreboard_solved_mode problems/score
} else {
    set scoring_mode auto+manual
    set default_correct_qualifier ""
    set default_incorrect_qualifier ""
    set scoreboard_solved_mode time
}
set scoreboard_unsolved_mode count
set allowed_qualifiers {""}
set scoreboard_factor() 0.95
set scoreboard_start_time $start_time
set scoreboard_stop_time $stop_time
set scoreboard_freeze_time $freeze_time
set scoreboard_convert_time $convert_time
set scoreboard_abbreviation(CONVERT) convert_time
set scoreboard_penalty     [expr 60 * $penalty_minutes]

# Scoreboard name, i.e, the name of the contest.
#
set scoreboard_name $contest_name

# Compute scoreboard_submitters to exclude test
# accounts.
#
set scoreboard_submitters {}
foreach x $test_accounts {
    lappend scoreboard_submitters & ! $x
}
set scoreboard_submitters \
    [lrange $scoreboard_submitters 1 end]
#
# Compute scoreboard_problems to exclude test
# problems.
#
set scoreboard_problems {}
foreach x $test_problems {
    lappend scoreboard_problems & ! $x
}
set scoreboard_problems \
    [lrange $scoreboard_problems 1 end]

# Scoreboard instructions
#
set scoreboard_instructions {

    {# Pre-contest scoreboard.  Note that submitters and
       problems are changed to allow testing demos. #}

    { OUTPUT contest/scoreboard "" START }
    GRANT_ACCESS
    { LINE NAME "Pre-Contest Scoreboard" TIME }
    BLANK
    { INPUT contest/scoreboard.head }
    BLANK
    { LINE "The demo problems will disappear from the\
            scoreboard once the contest" }
    { LINE "starts.  Until the contest starts, dates\
            of first correct submissions are" }
    { LINE "displayed instead of problem times."}
    BLANK
    { mode date }
    { start_time "" }
    { stop_time START }
    { problems {} }
    { submitters {} }
    BAR
    BOARD
    BAR

    {# Current scoreboard for judge. #}

    { OUTPUT contest/scoreboard.current START STOP+1800 }

    { LINE NAME "Current Results" TIME }
    BLANK
    BAR
    BOARD

    {# Final scoreboard for judge. #}

    { OUTPUT contest/scoreboard.final STOP STOP+1800 }

    { LINE NAME "Final Results" STOP }
    BLANK
    BAR
    BOARD
    BAR
    { INPUT contest/who_where }
    BAR

    {# Public unfrozen scoreboard during contest #}

    if { $freeze_time == "" } {
	{ OUTPUT contest/scoreboard START CONVERT }
    } else {
	{ OUTPUT contest/scoreboard START FREEZE }
	{ stop_time FREEZE }
    }
    GRANT_ACCESS
    SEND
    { LINE NAME "Scoreboard" TIME }
    BLANK
    { INPUT contest/scoreboard.head }
    BLANK
    BAR
    BOARD
    BAR


    if { $scoreboard_freeze_time != "" } {

	{# Public frozen scoreboard during contest #}

	{ OUTPUT contest/scoreboard FREEZE STOP }
	GRANT_ACCESS
	SEND
	{ LINE NAME "Frozen Scoreboard" TIME }
	BLANK
	{ LINE "To heighten suspense, scoreboard\
	        updating has been stopped as of:" }
	{ LINE "" FREEZE "" }
	{ LINE "You will be given a copy of the final\
		scoreboard after winners have been" }
	{ LINE "announced at the post contest\
	        meeting." }
	BLANK
	{ INPUT contest/scoreboard.head }
	BLANK
	{ stop_time FREEZE }
	BAR
	BOARD
	BAR
    }

    {# Public results scoreboard after post contest
       meeting. #}

    { OUTPUT contest/scoreboard.results
             CONVERT CONVERT }
    GRANT_ACCESS
    { INPUT contest/scoreboard.final }

    {# Public scoreboard after post contest meeting. #}

    { OUTPUT contest/scoreboard CONVERT "" }
    { LINE NAME "Post Contest Scoreboard" TIME }
    BLANK
    { LINE "This is a practice style scoreboard." }
    { LINE "To see the final contest scoreboard\
            type `scoreboard final'.}
    BLANK
    { mode untimed }
    { stop_time "" }
    BAR
    BOARD
    BAR
}

# Computed web page parameters.
#
set web_title "$contest_name"
set web_manager_address $manager_address
set web_prefix "
<H2 ALIGN=\"CENTER\">
<FONT COLOR=\"red\">
Contest and Problem Descriptions
</FONT></H2>
"

# Parameter Overrides
# --------- ---------

# Add parameter settings here to override parameters
# that are normally not changed above.
