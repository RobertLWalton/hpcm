# TCL Parameters File for Formal Contest Judging
#
# File:		hpcm_judging.rc
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Fri Oct 29 04:08:49 EDT 2004
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: hc3 $
#   $Date: 2004/10/29 08:12:03 $
#   $RCSfile: hpcm_judging.rc,v $
#   $Revision: 1.21 $


# Read standard parameters.  The filename MUST be
# absolute and not relative.  Change the filename
# to reflect the current location of `hpcm'.
#
source ~/hpcm/judge/lib/hpcm_judging.rc

# The following overwrites parameters set by the
# above `source' command.

# Set the start/freeze/stop times for the contest.
#
set scoreboard_start_time  "Jan 1 10:00:00 2000"
set scoreboard_freeze_time "Jan 1 14:00:00 2000"
set scoreboard_stop_time   "Jan 1 15:00:00 2000"

# Set penalty time IN SECONDS for submitting an
# incorrect solution to a problem for which a correct
# solution is later submitted.
#
set scoreboard_penalty 0

# Scoreboard name, i.e, the name of the contest.
#
set scoreboard_name ""

# List of addresses for `makescoreboard' to email
# scoreboard to.  If scoreboard_instructions includes
# a `SEND' instruction for an OUTPUT file, and
# scoreboard_addresses is a list containing zzz<YYY>,
# then every time the output file is made it will be
# emailed to `zzz<YYY>', so in the account YYY
# .procmailrc file you should put something like:
#
#	:0 b:
#	* ^To:.*zzz
#	| cat >public_html/xxx;\
#	  chmod a+r public_html/xxx
#
# See documentation for `scoreboard_instructions' for
# more details and additional SEND features.
#
set scoreboard_addresses { }

# Scoreboard instructions for a small formal contest:
#
set small_contest_scoreboard_instructions {

    { OUTPUT contest/scoreboard.1 "" START }
    GRANT_ACCESS

    { LINE NAME "Pre-Contest Scoreboard" TIME }
    BLANK
    { INPUT contest/scoreboard.1head }
    BLANK
    { LINE "The demo problems `count' and `javaio'\
            will disappear from the" }
    { LINE "scoreboard once the contest starts.  Until\
            the contest starts, dates of" }
    { LINE "first correct submission are displayed (for\
            demo problems).  After the" }
    { LINE "contest starts, problem times (differences\
            of first correct submission" }
    { LINE "times and contest start time) will be\
            displayed." }
    BLANK
    { start_time "" }
    { stop_time START }
    BAR
    BOARD
    BAR

    { OUTPUT contest/scoreboard.1 START STOP }
    GRANT_ACCESS

    { LINE NAME "Scoreboard" TIME }
    BLANK
    { INPUT contest/scoreboard.1head }
    BLANK
    { start_time START }
    { stop_time STOP }
    { problems { ! count & ! javaio } }
    { submitters { ! test-account } }
    BAR
    BOARD
    BAR

    { OUTPUT contest/scoreboard.final STOP STOP }

    { LINE NAME "Final Results" "" STOP }
    BLANK
    BAR
    { start_time START }
    { stop_time STOP }
    BOARD
    BAR
    { INPUT contest/who_where }
    BAR
}

# Scoreboard instructions for a large formal contest:
#
set large_contest_scoreboard_instructions {

    { OUTPUT contest/scoreboard.freeze FREEZE FREEZE }

    BLANK
    { LINE "To heighten suspense, scoreboard updating\
            has been stopped as of:" }
    { LINE "" FREEZE "" }
    { LINE "You will be given a copy of the final\
            scoreboard after winners have been" }
    { LINE "announced at the post contest meeting." }

    { OUTPUT contest/scoreboard.public "" START }

    { start_time "" }
    { stop_time FREEZE }
    { LINE "The demo problems `count' and `javaio'\
            will disappear from the" }
    { LINE "scoreboard once the contest starts.  Until\
            the contest starts, dates of" }
    { LINE "first correct submission are displayed (for\
            demo problems).  After the" }
    { LINE "contest starts, problem times (differences\
            of first correct submission" }
    { LINE "times and contest start time) will be\
            displayed." }
    BAR
    BOARD
    BAR

    { OUTPUT contest/scoreboard.public START FREEZE }

    { start_time START }
    { stop_time FREEZE }
    { problems { ! count  & ! javaio } }
    { submitters { ! test-account } }
    BAR
    BOARD
    BAR

    { OUTPUT contest/scoreboard.1 }
    GRANT_ACCESS
    SEND

    { LINE NAME "Public Scoreboard" TIME }
    { INPUT contest/scoreboard.freeze }
    BLANK
    { INPUT contest/scoreboard.1head }
    BLANK
    { INPUT contest/scoreboard.public }

    { OUTPUT contest/scoreboard.current FREEZE STOP }

    { LINE NAME "Current Scoreboard" TIME }
    BLANK
    BAR
    { stop_time STOP }
    BOARD
    BAR
    { INPUT contest/who_where }
    BAR

    { OUTPUT contest/scoreboard.final STOP STOP }

    { LINE NAME "Final Results" STOP }
    BLANK
    BAR
    { stop_time STOP }
    BOARD
    BAR
    { INPUT contest/who_where }
    BAR
}

# Scoreboard instructions to be used after a formal
# contest:
#
set post_contest_scoreboard_instructions {

    { OUTPUT contest/scoreboard.1 "" "" }
    GRANT_ACCESS
    SEND

    { LINE NAME "Post Contest Scoreboard" TIME }
    BLANK
    { INPUT contest/scoreboard.1head }
    BLANK

    { start_time "" }
    { stop_time "" }
    { problems { ! count  & ! javaio } }
    { submitters { ! test-account } }
    BAR
    BOARD
    BAR
}

# Scoreboard instructions for this contest:
#
set scoreboard_instructions \
    $large_contest_scoreboard_instructions

# Set modes to automatically reply in so far as possible
# and have manual review of everything in which the
# automatic reply might not be correct.  However, system
# errors are for manual review only.
#
set scoring_mode auto+manual
set reply_mode auto+manual
set log_mode manual

# Do not use email to an outside place for errors or
# queries.  Reply_manager is the place to send email if
# a contestant sends a query, and log_manager is the
# place to send email if the system makes an error.
# If "" no email is sent.
#
set reply_manager ""
set log_manager ""

# Set the manualreply display to have a certain height
# with a given number of blank lines above that.  If you
# have a taller display, increase window_height.
#
# WARNING: If window_height is too large, programs such
# as manualreply and lookat may appear to be malfunc-
# tioning because the information they display is being
# scrolled off the top of the screen.
#
set window_blank_height 16
set window_height 24

# Require submission email to have a formatted body
# with HPCM_BEGIN, HPCM_END, and `..'s.
#
set format_submissions yes

# Set up to use authentication.  Keyname and key must
# match those in ./contest/secure/hpcm_sendmail.rc.
# Edit this to match what is given in the `TODO'
# file instruction generated when you run `make' in
# this directory.
#
set use_authentication yes
array set authentication_keys {
    foo		ppppppppppp-be-sure-to-delete-this-line
}

# The following control the makeweb program that makes a
# web page containing problem statements and optionally
# solutions.  For an end-of-contest web page just con-
# taining problem descriptions, these need not be re-
# defined.  See hpcm/judge/lib/hpcm_judging.rc for more
# details.
#
set web_contest_name $scoreboard_name
set web_autojudge_address ""
set web_solutions_password ""
set web_help_URL ""
set web_scoreboard_URL ""
set web_manager_address ""
