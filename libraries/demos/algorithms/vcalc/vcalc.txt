A Simple Vector Calculator
- ------ ------ ----------

You have been asked to implement a very simple vector
calculator.  The tokens of its input are

    <separator> ::= ( | ) | , | : | <end-of-line>
    <symbol> ::= <symbol-character> <symbol-character>*
    <symbol-character> ::=
        character other than a <separator>,
	single space, horizontal tab, and form feed
    <variable> ::= <symbol> beginning with a letter
    <operator> ::= one of the following symbols:
    	+   -   *   /   ^   !   &&  ||  |
	==  !=  <   <=  >   >=

Whitespace is ignored except for its role in separating
tokens and for the <end-of-line> token.

Any line that begins with // is a comment line and is
treated as a blank line.

Given this, the syntax accepted by the calculator is:

    <program> ::= <statement>*

    <statement> ::=
          <simple-statement>
        | if <boolean-atom>: <simple-statement>

    <simple-statement> ::=
          print <symbol>* <end-of-line>
	| <variable> = <expression> <end-of-line>
	| clear <variable>* <end-of-line>

    <expression> ::= <boolean-expression>
                   | <scalar-expression>
		   | <vector-expression>

    <boolean-expression> ::=
          <boolean-atom>
	| ! <boolean-atom>
	| <boolean-atom> && <boolean-atom>
	| <boolean-atom> || <boolean-atom>
	| <scalar-atom> == <scalar-atom>
	| <scalar-atom> != <scalar-atom>
	| <scalar-atom> <  <scalar-atom>
	| <scalar-atom> <= <scalar-atom>
	| <scalar-atom> >  <scalar-atom>
	| <scalar-atom> >= <scalar-atom>

    <boolean-atom> ::=
          <variable> with boolean value
	| true
	| false

    <scalar-expression> ::=
          <scalar-atom>
	| - <scalar-atom>
	| | <scalar-atom> |
	| <scalar-atom> + <scalar-atom>
	| <scalar-atom> - <scalar-atom>
	| <scalar-atom> *  <scalar-atom>
	| <scalar-atom> / <scalar-atom>

    <scalar-atom> ::=
          <variable> with scalar value
	| <number>

    <vector-expression> ::=
          <vector-atom>
	| - <vector-atom>
	| || <vector-atom> ||
	| angle <vector-atom>
	| <vector-atom> + <vector-atom>
	| <vector-atom> - <vector-atom>
	| <scalar-atom> *  <vector-atom>
	| <vector-atom> ^ <scalar-atom>

    <vector-atom> ::=
          <variable> with vector value
        | ( <scalar-atom>, <scalar-atom> )

This syntax is very limited so it is easy to implement.
It has the following limits/peculiarities:

1. At most one operation such as + or - can appear in a
   statement.

2. Only very simple conditional statements are allowed,
   such as

       if x: y = 5 + z
       if m: y = true
       if p: print Y IS y

3. The expression v ^ s denotes rotation of the vector
   v by the angle s.

4. Operators such as +, *, |, and || must be delimited
   by whitespace, parentheses, commas, or colons.

5. Variables can have boolean, scalar, or vector values,
   or no values.
   
6. When the print statement prints a symbol, if the
   symbol is a variable name and the variable has a
   value, the value is printed.  Otherwise the symbol
   itself is printed.  Each print statement prints
   a single line.

7. The `clear' statement clears the variables listed,
   meaning that these variables are given no value (and
   therefore print as their names).  If no variables are
   given, all variables are cleared.


Input
-----

Input is a program.  There is no limit on variable name
length or line length.  Input ends with an end of file.


Output
------

Output is the lines printed by print statements.


Sample Input
------ -----



Sample Output
------ ------



File:	   vcalc.txt
Author:	   Bob Walton <walton@seas.harvard.edu>
Date:	   Wed Jan  9 02:31:39 EST 2013

The authors have placed this file in the public domain;
they make no warranty and accept no liability for this
file.

RCS Info (may not be true date or author):

    $Author: walton $
    $Date: 2013/01/09 07:39:10 $
    $RCSfile: vcalc.txt,v $
    $Revision: 1.1 $
