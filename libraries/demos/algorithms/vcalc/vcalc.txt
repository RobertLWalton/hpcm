Simple Vector Calculator
------ ------ ----------

You have been asked to implement a very simple vector
calculator.  The tokens of its input are

    <separator> ::= ( | ) | , | : | <end-of-line>
    <symbol> ::= <symbol-character> <symbol-character>*
    <symbol-character> ::=
        character other than a <separator>,
	single space, horizontal tab, and form feed

Given this the following are particular tokens:

    <variable> ::= <symbol> beginning with a letter
    <operator> ::= one of the following symbols:
    	+   -   *   /   ^   !   &&  ||  |
	==  !=  <   <=  >   >=

Whitespace is ignored except for its role in separating
tokens and for the <end-of-line> token.  Note that
operators must be delimited by whitespace or separators.

Blank lines are ignored.  Any line whose first non-
whitespace characters are `//' is a comment line and is
ignored.

Given these tokens, the syntax accepted by the
calculator is:

    <program> ::= <statement>*

    <statement> ::=
          <simple-statement>
        | if <boolean-atom>: <simple-statement>

    <simple-statement> ::=
          print <symbol>* <end-of-line>
        | println <symbol>* <end-of-line>
	| <variable> = <expression> <end-of-line>
	| clear <variable>* <end-of-line>

    <expression> ::= <boolean-expression>
                   | <scalar-expression>
		   | <vector-expression>

    <boolean-expression> ::=
          <boolean-atom>
	| ! <boolean-atom>
	| <boolean-atom> && <boolean-atom>
	| <boolean-atom> || <boolean-atom>
	| <scalar-atom> == <scalar-atom>
	| <scalar-atom> != <scalar-atom>
	| <scalar-atom> <  <scalar-atom>
	| <scalar-atom> <= <scalar-atom>
	| <scalar-atom> >  <scalar-atom>
	| <scalar-atom> >= <scalar-atom>

    <boolean-atom> ::=
          <variable> with boolean value
	| true
	| false

    <scalar-expression> ::=
          <scalar-atom>
	| - <scalar-atom>
	| | <scalar-atom> |
	| <scalar-atom> + <scalar-atom>
	| <scalar-atom> - <scalar-atom>
	| <scalar-atom> *  <scalar-atom>
	| <scalar-atom> / <scalar-atom>

    <scalar-atom> ::=
          <variable> with scalar value
	| <number>

    <vector-expression> ::=
          <vector-atom>
	| - <vector-atom>
	| || <vector-atom> ||
	| angle <vector-atom>
	| <vector-atom> + <vector-atom>
	| <vector-atom> - <vector-atom>
	| <scalar-atom> *  <vector-atom>
	| <vector-atom> ^ <scalar-atom>

    <vector-atom> ::=
          <variable> with vector value
        | ( <scalar-atom>, <scalar-atom> )

This syntax is very limited so it is easy to implement.
It has the following limits/peculiarities:

1. At most one operation such as + or - can appear in a
   statement.

2. Only very simple conditional statements are allowed,
   such as

       if x: y = 5 + z
       if m: y = true
       if p: print Y IS y

3. Operators such as +, *, |, and || must be delimited
   by whitespace, parentheses, commas, or colons.

The semantics are what you would expect given the
following:

1. Variables can have boolean, scalar, or vector values,
   or no values.  Variables with no values are only
   legal in print statements: see below.

2. The expression | s | denotes the absolute value of
   the scalar s.

3. The expression || v || denotes the length value of
   the vector.

4. Angles are measured in degrees.  Special care is
   taken with angles that are multiples of 90 degrees
   to be sure that rotations and the angle function
   give exact results.

5. The expression v ^ s denotes rotation of the vector
   v by the scalar angle s.
   
6. The print and println statements print symbols sepa-
   rated by single spaces.  But if a symbol is a vari-
   able name and the variable has a value, the value is
   printed instead of the symbol.  The `print' statement
   ends by printing just a single space so the line may
   be continued, while the `println' statement ends by
   printing a line end.

7. The `clear' statement clears the variables listed,
   meaning that these variables are given no value (and
   therefore print as their names).  If no variables are
   given, all variables are cleared.


Input
-----

Input is a program.  There is no limit on variable name
length or line length.  Input ends with an end of file.


Output
------

Output is the lines printed by print statements.


Sample Input
------ -----

// Sample vcalc Input
//
x = 5
y = -10
z = x + y
println x + y = z

p1 = ( 3, 4 )
p2 = ( -7, 3 )
p = ( 1, 4 )
p12 = p2 - p1
rp12 = p12 ^ 90
y' = p * rp12
y1' = p1 * rp12
y2' = p2 * rp12
println py' = y' ### p1y' = y1' ### p2y' = y2'
print p is
x = y' > y1'
if x: print to the left of
x = y' == y1'
if x: print on
x = y' < y1'
if x: print to the right of
println p1 ---> p2


Sample Output
------ ------

5 + -10 = -5
py' = -39 ### p1y' = -37 ### p2y' = -37
(1, 4) is to the right of (3, 4) ---> (-7, 3)


File:	   vcalc.txt
Author:	   Bob Walton <walton@seas.harvard.edu>
Date:	   Tue Jan 15 00:55:12 EST 2013

The authors have placed this file in the public domain;
they make no warranty and accept no liability for this
file.

RCS Info (may not be true date or author):

    $Author: walton $
    $Date: 2013/01/15 05:56:01 $
    $RCSfile: vcalc.txt,v $
    $Revision: 1.5 $
