# TCL Parameters File for Judging
#
# File:		hpcm_judging.rc
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Fri Aug 18 05:21:41 EDT 2000
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: acm-cont $
#   $Date: 2000/08/25 12:05:33 $
#   $RCSfile: hpcm_judging.rc,v $
#   $Revision: 1.14 $
#

# An optionally modified copy of this file must be
# placed in (or symbolically linked into) the current
# directory of an executing judging program, or one
# of the ancestors (parent, parent of parent, etc.) of
# that directory (3 ancestors will be searched).

# Scoring Mode:
#
#	auto		automatic scoring only
#	auto+manual	automatic scoring plus manual
#			review of everything not
#			`Completely Correct'
#	manual		manual scoring only
#
set scoring_mode auto

# Regexp expressions matched to lines in .err file to
# detect limit overruns (letter case is ignored):
#
set time_limit_regexp {cputime limit exceeded}
set output_limit_regexp {filesize limit exceeded}

# List of allowed extensions for submitted programs:
#
set allowed_extensions ".c .cc .java"


###### Functions to call operating system programs #####

# Program to send mail, as does UNIX `sendmail'.  Takes
# mail message file with correctly set `To:' field and
# sends the message to the addresses listed there.  If
# some of these addresses are in error, this command
# suffers a catchable error (and the mail may be put
# into ~/dead.letter).
#
proc send_mail { message_file } {
    exec /usr/sbin/sendmail -oi -t < $message_file
}

# Program to create a file and suffer an error if the
# file already exists.  If created, the file will be
# zero length, readable, and writable.
#
proc create_file { filename } {
    exec lockfile -0 -r 0 $filename
    chmod u+w $filename
    ftruncate $filename 0
}

# Program to create a directory and suffer an error if
# the directory already exists.  If created, the
# directory will be empty, readable, and writable.
#
proc create_directory { dirname } {
    exec mkdir $dirname
}

# Symbolically link a file.  This is like copying,
# but the modification date on the target tracks
# the date on the source.  If no target is given,
# link the file into the current directory.
#
proc link_file { source { target . } } {
    exec ln -s $source $target
}

# Program to view a file.
#
proc view_file { filename } {
    exec view $filename
}

# Program to edit a file.
#
proc edut_file { filename } {
    exec vi $filename
}

######### Things usually not changed ############

# File names:
#
set received_file		"Received_Mail"
set reply_file			"Reply_Mail"
set history_file		"Reply_Mail_History"
set scoring_instructions_file	"Scoring_Instructions"
set auto_score_file		"Auto_Score"
set manual_score_file		"Manual_Score"
set make_file			"Makefile"
set error_log_file		"HPCM_Error_Log"
set dispatch_pid_file		"Dispatch_PID"

# Default Scoring Instructions:
#
set scoring_instructions_default \
    "whitespace linebreak number 0"

# Regexp to match `From' line of mail message.  This
# must be encode so the first () part matches the sender
# and the second () part matches the date.
#
# If you send a line matching this in a mail message,
# a `>' will be prefixed to prevent the line from
# matching this regexp.
#
set From_line_regexp \
    "^From\[\ \t\]+(\[^\ \t\]+)\[\ \t\]+(.*)\$"

# Regexp to match any line that might appear in the
# header of a mail message.
#
set Header_line_regexp "^From\ |:|^\[\ \t\]+\[^\ \t\]"

# Directory names:
#
set mail_directory \
    "$judging_parameters_directory/mail"
set solutions_directory \
    "$judging_parameters_directory/solutions"
set info_directory \
    "$judging_parameters_directory/info"
set log_directory \
    "$judging_parameters_directory/log"
