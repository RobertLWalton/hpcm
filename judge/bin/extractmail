#!/bin/sh
#
# Extract submitted program from received mail file.
#
# File:		extractmail
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Mon Sep 12 03:05:40 EDT 2016
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: walton $
#   $Date: 2012/04/01 09:13:45 $
#   $RCSfile: extractmail,v $
#   $Revision: 1.56 $
#
# The next lines start tclsh \
trap "echo extractmail: Terminated by Signal" \
    HUP INT QUIT; \
tclsh "$0" "$@"; exit $status

# Include common code and parameters:
#
set lib_directory "[file dirname $argv0]/../lib"
source $lib_directory/judging_common.tcl
catch {

set document "
cd submission_directory; extractmail

    Reads the `Received_Mail' file in the current direc-
    tory.  Thus file must contain an email with a sub-
    ject line of the form:

      Subject: submit PROBLEM\[.EXTENSION\]\
      		      \[QUALIFIER\]

    where `PROBLEM' is the problem name and `EXTENSION',
    if present, tells the language of the problem sub-
    misson.

    The PROBLEM cannot contain `.' or `/' or begin with
    `-', and EXTENSION, if given, cannot contain `/' and
    must be one of the extensions in the `allowed_exten-
    sions' global variable, whose value by default (with
    `.'s included) is:

    	$allowed_extensions

    After the problem name and extension are extracted
    and checked, any PROBLEM.rc file is sourced.  This
    file may define the problem_required_files and
    problem_optional_files global variables, which are
    TCL lists of the names of files that may be submit-
    ted.  The required files must be submitted, while
    the optional files need not be.  If problem_requir-
    ed_files is not set by the PROBLEM.rc file, and if
    an EXTENSION is given, then problem_required_files
    is set so the only required file is PROBLEM.EXTEN-
    SION.  Otherwise it is a SYSTEM ERROR (see below)
    if problem_required_files is not set or is empty.
    
    For each file successfully extracted, this program
    writes the line `Extracted FFFF' formatted as a TCL
    list to the standard output, where FFFF is the file
    name.  Note that this program may write other infor-
    mation lines to the standard output.

    For each error, this program writes an error message
    to the standard error output.  However, this program
    always exits with exit code 0, so the presence of
    errors is indicated solely by a non-empty standard
    error output.  The TCL command:

    	catch { exec extractmail } out

    will capture both the standard and error outputs in
    the variable `out' and return a 0/1 value indicating
    whether there were any errors.  If there are errors
    that concern the judge, and not just the submitter,
    the text `SYSTEM ERROR' will appear in the standard
    error output and thence the `out' variable.  In this
    case, the error will be reported to the submitter by
    error logging code according to the log_mode.
    Otherwise, if there are non-system errors, the value
    of `out' will be suitable for inclusion in a reply
    to the submitter as a description of the errors.

    Submitted files may be encoded in the body of the
    message in the format:

   	HPCM_BEGIN filename
	..<1st line of file>
	..<2nd line of file>
	<more lines, each preceded by `..'>
	HPCM_END filename

    This format MUST be used if the `format_submissions'
    global variable is defined and equal to `yes'.  If
    this format is used, there must be nothing else in
    the body of the message except optional blank lines
    preceding, separating, and following the files.

    If this format is NOT used, the files may be in-
    cluded verbatim in the body of the message.  Files
    must be separated by blank lines, and there may be
    blank lines preceding the first file and following
    the last file.  All these blank lines will be dis-
    carded, and not treated as part of any file.  If
    files are given verbatim in the body of the message,
    the files may not begin with `HPCM_BEGIN'.
    
    When files are given verbatim in the body of the
    message, each file may have a file name given in the
    following way.  The first block of non-blank lines
    at the beginning of the file is searched for text of
    the form `File: FFFF', where FFFF is the filename.
    This text must appear within a single line, must
    be preceded or followed by whitespace (spaces or
    tabs) or line boundaries, and may have any or no
    whitespace between the `:' and FFFF.  The FFFF
    contains only non-whitespace characters.  It is a
    possibly undetected error if there are extra such
    pieces of text in a file, or if a file does not
    specify its name in this manner and there is more
    than one possible submission file.

    If a submitted file already exists, is not a sym-
    bolic link, and has a modification time equal to or
    later than that of the Received_Mail file, the sub-
    mitted file is NOT written, but is instead compared
    to the existing file.  Whether or not the comparison
    matches, the `Extracted FFFF' output line is gener-
    ated, but if there is a mismatch, the line `Mismatch
    FFFF' is output along with a description of the mis-
    match, all in the standard output and NOT the error
    output.  Thus mismatches are NOT considered to be
    errors, and a judge can change an extracted file and
    rerun the autojudge program successfully.

    It is a system error if the `Subject:' field is bad-
    ly formatted, if the Received_Mail file is unread-
    able, if problem_required_files is set to the empty
    list or is not set and no EXTENSION is given, or if
    the current directory does not permit new files to
    be deleted or created as necessary."

# If there are arguments, print documentation and exit.
#
if { $argc != 0 } {
    puts $document
    exit 1
}

# Print error message to standard error output and exit
# with cleanup.
#
proc extract_error { message } {
    puts stderr $message
    exit_cleanup
    exit 0
}

# Read the header.
#
if { [catch { set received_ch \
		  [open Received_Mail r] }] } {
    error "cannot read Received_Mail"
}
set received_mtime [file mtime Received_Mail]
read_header $received_ch

# Check for legality of subject line:
#
if { [catch { set len [llength $message_subject] }] \
     || $len < 2 \
     || $len > 3 \
     || [lindex $message_subject 0] != "submit" } {
    extract_error \
	"ERROR: Badly formatted subject field:\
	 $message_subject"
}

# Extract the problem name and check it.
#
set filename [lindex $message_subject 1]
set PROBLEM [file rootname $filename]
if { $PROBLEM == "" } {
    extract_error \
	"ERROR: no problem name in\
	 `Subject: $message_subject'"
} elseif { [regexp {\.} $PROBLEM] } {
    extract_error \
         "ERROR: Bad problem name (contains `.'):\
	  $PROBLEM"
} elseif { [regexp {/} $filename] } {
    extract_error \
         "ERROR: Bad problem name or extension\
	  (contains `/'): $filename"
} elseif { [regexp {^-} $PROBLEM] } {
    extract_error \
         "ERROR: Bad problem name (begins with `-'):\
	  $PROBLEM"
}

# Read part.
read_part_header $received_ch
if { $message_part_error != "" } {
    extract_error "ERROR: $message_part_error"
}

# Extract any extension name.
#
set EXTENSION [file extension $filename]

# Source any problem .rc file and compute lists of
# required and optional submission files.
#
source_file $PROBLEM.rc
if { [info exists problem_rc($PROBLEM)] } {
    eval $problem_rc($PROBLEM)
}

# Check EXTENSION (was deferred until after reading
# PROBLEM.rc).
#
if { $EXTENSION != "" \
     && ! [lcontain $allowed_extensions $EXTENSION] } {
    extract_error \
	"ERROR: disallowed extension (should be one of\
	 $allowed_extensions) in `Subject:\
	 $message_subject'"
}

if { ! [info exists problem_required_files] } {
    if { $EXTENSION == "" } {
	extract_error \
	    "ERROR: No extension in `Subject:\
		    $message_subject'"
    }
    lappend problem_required_files $PROBLEM$EXTENSION
} elseif { [llength $problem_required_files] == 0 } {
    error "problem_required_files set to empty list"
}
if { ! [info exists problem_optional_files] } {
    set problem_optional_files ""
}

# Filename_array has a value for every submittable
# file.  The possible values are:
#
#	required	optional	found
#
foreach file $problem_required_files {
    set filename_array($file) required
}
foreach file $problem_optional_files {
    if {    [info exists filename_array($file)] \
         && $filename_array($file) == "required" } {
        error "$file is in both problem_required_files\
	       and problem_optional_files"
    }
    set filename_array($file) optional
}

# WS matching whitespace character and NWS matching
# non-whitespace character.
#
set WS "\[\ \t\]"
set NWS "\[^\ \t]"

# If clean_filename is not "", close file_ch and delete
# cleanup_filename.
#
set cleanup_filename ""
proc exit_cleanup {} {
    global file_ch cleanup_filename
    if { $cleanup_filename != "" } {
	close $file_ch
	file delete -force $cleanup_filename
    }
}

# Open file to be extracted for reading or writing.
# Return the open channel in the global variable
# `file_ch' and return `read' or `write' if the file
# is opened for reading or writing, and `skip' if the
# file name is illegal and the file is to be skipped.
#
# A file is opened for reading if it exists, is not a
# symbolic link, and has an mtime >= received_mtime;
# and is opened for writing otherwise.  If opened for
# writing, any existing file or link is deleted, and
# cleanup_filename is set.
#
# A filename is illegal if it is not in filename_array
# or if a file of the same name has already been
# processed; in this case `file_ch' is set to "" so
# close_file will do nothing.
#
proc open_file { filename } {

    global filename_array received_mtime \
    	   file_ch cleanup_filename

    if { ! [info exists filename_array($filename)] } {
	puts stderr \
	    "ERROR: File is not submittable for this\
	            problem: $filename"
	set file_ch ""
	return skip
    } elseif { $filename_array($filename) == "found" } {
	puts stderr \
	    "ERROR: Redundant file: $filename"
	set file_ch ""
	return skip
    }
    set filename_array($filename) found

    if { [file exists $filename] } {

        if { [file type $filename] == "link" } {
	    puts "Deleting $filename link"
	    if { [catch { file delete -force \
	    		       $filename }] } {
	        error "Cannot delete $filename link"
	    }
        } elseif { [file mtime $filename] \
	               < $received_mtime } {
	    puts "Deleting out-of-date $filename"
	    if { [catch { file delete -force \
	    		       $filename }] } {
	        error "Cannot delete $filename"
	    }
	} else {
	    if { [catch { set file_ch \
	                      [open $filename r] }] } {
		error "Cannot read $filename"
	    }
	    return read
	}
    }

    if { [catch { set file_ch [open $filename w] }] } {
        error "Cannot write $filename"
    }

    # Set cleanup for error exits.
    #
    set cleanup_filename $filename

    return write
}

# Return next non-blank line in received_ch.  Set eof
# variable on end of file.  Return "" on eof.
#
proc read_non_blank_line { eof } {

    global received_ch NWS

    upvar $eof e

    while { "yes" } {
	set line [read_part_line $received_ch e]
	if { $e } {
	    return ""
	} elseif { [regexp $NWS $line] } {
	    return $line
	}
    }
}

# Close file.  Does nothing if `file_ch' is "".
#
# Otherwise closes `file_ch', sets `cleanup_filename'
# to "", and writes `Extracted $filename' to standard
# output.  Also, if mode == "read", reads one more
# line from file_ch and if not an eof, announces a
# mismatch.
#
proc close_file { filename } {

    global file_ch cleanup_filename mode

    if { $file_ch == "" } return

    if { $mode == "read" } {

	set file_line [gets $file_ch]

	if { ! [eof $file_ch] } {
	    puts "Mismatch $filename\n\
		  old: $file_line\n\
		  new: END OF FILE"
	}
    }

    close $file_ch
    set cleanup_filename ""

    # Next line must be TCL list so autojudge can read
    # it.
    puts [list Extracted $filename]
}

# Skip over blank lines at start of body.
#
set line [read_non_blank_line eof]
if { $eof } {
    extract_error "ERROR: message body is blank"
}

# Select formatted or non-formatted input.
#
if { [regexp {^HPCM_BEGIN} $line] } {

    # Input is formatted.  Loop through files in
    # input.
    #
    while { "yes" } {

    	# Process HPCM_BEGIN line.
	#
        if { ! [regexp "^HPCM_BEGIN$WS+($NWS+)$WS*\$" \
                       $line forget filename] } {
	    extract_error \
	        "ERROR: bad HPCM_BEGIN line:\n$line"
	}
	set mode [open_file $filename]

	# Process file removing beginning `..'s until
	# HPCM_END line found.
	#
	while { "yes" } {
	    set line [read_part_line $received_ch eof]
	    if { $eof } {
		extract_error \
		    "ERROR: Could not find\
		     `HPCM_END $filename'\
		     line.\nPlease be sure your\
		     submitted file ends with a line\
		     feed."
	    } elseif { [regexp {^\.\.(.*)$} $line \
			       forget real_line] } {
		switch $mode {
		    write {
			puts $file_ch $real_line
		    }
		    read {
			set file_line [gets $file_ch]
			if { $file_line \
				!= $real_line } {
			    puts "Mismatch $filename\n\
				 old: $file_line\n\
				 new: $real_line"
			    set mode skip
			}
		    }
		    skip { }
		}
	    } elseif { \
		  [regexp \
		      "^HPCM_END$WS+($NWS+)$WS*\$" \
		      $line forget endname] \
		  && $endname == $filename } {
		break
	    } elseif { [regexp "^HPCM_END" $line] \
			    } {
		extract_error \
		    "ERROR: Badly formatted\
		     `HPCM_END $filename'\
		     line:\n$line"
	    } else {
		extract_error \
		    "ERROR: Bad line between\
		     `HPCM_BEGIN $filename' and\
		     `HPCM_END\
		     $filename':\n$line\nPlease\
		     be sure your submitted file ends\
		     with a line feed."
	    }
	}

	# After HPCM_END found, close file in current
	# directory.
	#
	close_file $filename

	# Look for next non-blank line.
	#
	set line [read_non_blank_line eof]
	if { $line == "" } break
    }

} else {

    if { [info exists format_submissions] \
	 && $format_submissions == "yes" } {
	extract_error \
	    "ERROR: Bad line in body before\
	     `HPCM_BEGIN' line; or disallowed\
	     unformatted file"
    }

    # Input is unformatted.  Loop through blocks of
    # non-blank lines in message.  Mode is "none"
    # before any file, and is thereafter "write",
    # "read", or "skip".
    #
    set file_ch ""
    set mode none
    set blank_lines ""
    while { $eof == "no" } {

	# Accumulate non-blank lines and look for
	# filename.
	#
	set lines ""
	set filename ""
	set filename_duplicated no
	set FILE "File:$WS*($NWS+)"
	set TWOFILES "${FILE}($WS+|$WS.*$WS)$FILE"
    	while { [regexp $NWS $line] } {

	    if { [regexp \
	    	    "(^|$WS)${FILE}(\$|$WS)" \
		    $line forget1 forget2 fname \
		    forget3] } {
		if { $filename == "" } {
		    set filename $fname
		} else {
		    puts stderr \
		        "ERROR: extra file name in\
			 file: `File: $fname'"
		    set filename_duplicated yes
		}
		if { [regexp \
			 "(^|$WS)${TWOFILES}(\$|$WS)" \
			 $line] } {
		    puts stderr \
		        "ERROR: extra file names in\
			 file:\n$line"
		    set filename_duplicated yes
		}
	    }
	    lappend lines $line
	    set line [read_part_line $received_ch eof]
	    if { $eof } break
	}

	# If no filename found and no previous file
	# started, set the filename if there is only one
	# allowed file to that allowed file, or announce
	# error and set mode to "skip".
	#
	if { $mode == "none" && $filename == "" } {
	    set filenames [array names filename_array]
	    if { [llength $filenames] == 1 } {
	        set filename [lindex $filenames 0]
	    } else {
		 puts stderr \
		     "ERROR: no `File: ...' in first\
		      set of non-blank lines in\
		      message body"
		 set mode skip
		 set file_ch ""
	    }
	}

	# If a filename found, end any previous file.
	# Then set mode to "skip" if filename is ambigu-
	# ous; otherwise open file in current directory.
	#
	# If filename not found, add non-blank lines
	# found to the end of previously found blank
	# lines.
	#
	if { $filename != "" } {
	    if { $mode != "none" } {
	        close_file $opened_filename
	    }
	    if { $filename_duplicated } {
	    	set mode skip
		set file_ch ""
	    } else {
		set mode [open_file $filename]
		set opened_filename $filename
	    }
	} else {
	    set lines [concat $blank_lines $lines]
	}

	# Process accumulated lines according to mode.
	#
	switch $mode {
	    read {
	        foreach real_line $lines {
		    set file_line [gets $file_ch]
		    if { [eof $file_ch] } {
			puts "Mismatch\
			      $opened_filename\n\
			      old: END OF FILE\n\
			      new: $real_line"
			set mode skip
		    } elseif { $file_line \
		    		   != $real_line } {
			puts "Mismatch\
			      $opened_filename\n\
			      old: $file_line\n\
			      new: $real_line"
			set mode skip
			break
		    }
		}
	    }
	    write {
	        foreach real_line $lines {
		    puts $file_ch $real_line
		}
	    }
	    skip { }
	}

	# Accumulate blank lines.
	#
	set blank_lines ""
	while { $eof == "no" } {
	    lappend blank_lines $line
	    set line [read_part_line $received_ch eof]
	    if { [regexp $NWS $line] } break
	}

	# If eof encountered, close any open file in the
	# current directory and end loop processing
	# received message.
	#
	if { $eof } {
	    if { $mode != "none" } {
	        close_file $opened_filename
	    }
	    break
	}
    }
}

# Check for missing files.
#
foreach filename [array names filename_array] {
    if { $filename_array($filename) == "required" } {
    	puts stderr "ERROR: missing file: $filename"
    }
}

# Close received_ch and exit.
#
close $received_ch
exit 0

# Include common error catching code:
#
} caught_output

# We only come here if there has been a system error.
# In this case, the system error is logged to an error
# file and emailed to the submitter, and all we have to
# to is write `SYSTEM ERROR' to the stderr to notify
# the extractmail caller.
#
puts stderr "SYSTEM ERROR"
caught_error
