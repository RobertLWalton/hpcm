#!/bin/sh
#
# Make manager's managing document.
#
# File:		managing
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Fri May 20 11:08:02 EDT 2011
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: walton $
#   $Date: 2011/05/20 15:13:37 $
#   $RCSfile: managing,v $
#   $Revision: 1.5 $
#
# The next lines start tclsh \
trap "echo judging: Terminated by Signal" \
    HUP INT QUIT; \
tclsh "$0" "$@"; exit $status

# Include common code and parameters:
#
set lib_directory "[file dirname $argv0]/../lib"
set log_disable yes
source $lib_directory/judging_common.tcl
catch {

puts "
		     HPCM Managing
		     ---- --------

	Division of Responsibility
	Account Control Files
	Contest/Facility Parameters
	Making the Contest/Facility Description
	Making the Contest/Facility Web Page
	Allocating Accounts
	Changing the Problem Set


Division of Responsibility
-------- -- --------------

This document describes what a contest/facility manager
needs to know in a situation in which a judging account
is shared between a contest/facility manager, who
maintains a particular contest or practice facility, and
a software manager, who makes new contests/facilites,
manages the HPCM program code, and provides other
services, such as backup.

The contest/facility manager of a contest or practice
facility named nnnn has responsibility for the existence
and contents of all directories and files with names of
the forms:

	~/*_nnnn_*
	~/*_nnnn

Included are the contest judging directory with a name
of the form

	~/judging_nnnn_*

and the contest directory named

	~/contest_nnnn

However, the software manager, and not the contest/
facility manager, will make initial versions of these
last two directories, and then the contest/facility
manager will assume responsibility for them.  Thus the
contest/facility manager does not need to make contests
or facilities, but only maintain them.

The software manager has responsibility for the exis-
tence and contents of all other files, with a few
exceptions documented in `Account Control Files' below,
In particular, the software manager is responsible for
the program files in ~/hpcm.


Account Control Files
------- ------- -----

The software manager is responsible for ~/.bashrc, but
upon request will add to its end code to read files
with names of the form

	~/.bashrc_nnnn

where nnnn is the name of a contest/facility.  See the
end of the ~/.bashrc file to see if this is already
enabled.

Any manager may add, modify, or delete their own line(s)
to

	~/.ssh/authorized_keys
	~/.ssh/known_hosts

(the latter is modified semi-automatically).  Notify the
software manager when changes are made to

	~/.ssh/authorized_keys

so a backup may be kept (typically this is kept in
~/.ssh/RCS/authorized_keys,v).


Contest/Facility Parameters
---------------- ----------

The parameters for a contest/facility named nnnn are in
the file:

    ~/judging_nnnn_*/hpcm_judging.rc

The first parts of this file contain parameters that
must be particularized for the contest/facility, and
these parts must be read and edited by the contest/
facility manager.

After changing parameters, `make' should be run by
executing:

    cd ~/judging_nnnn_*
    make

so that the new parameter settings will take effect.

There are some more detailed notes on some of the para-
meters that need to be set in the following sections.


Making the Contest/Facility Description
------ --- ---------------- -----------

The contest description is made in the file

    ~/judging_nnnn_*/help/this_contest

and automatically copied from there (by `make' and
`makecontest') to the file

    ~/contest_nnnn/help/this_contest

and to the web pages file

    ~/judging_nnnn_*/web/this_contest

Contestants/Students can access this file from local
accounts by executing `help', and if there is a web
page, this file is the `More Details' subpage of the web
page.

Normally you can just compute this file using `make' by
setting the hpcm_judging.rc parameters:

	this_contest_prefix
	this_contest_postfix

These parameters can be edited, and `make' can be
executed to recompute the file.  However, you can also
edit the file

    ~/judging_nnnn_*/help/this_contest

directly.  Once you have edited this file directly,
further runs of `make' will not change the file, but
will copy the most recent edited version to

    ~/contest_nnnn/help/this_contest
and ~/judging_nnnn_*/web/this_contest

So in the future you will have to maintain the file
strictly by editing it.


Making the Contest/Facility Web Page
------ --- ---------------- --- ----

The web page is made in the directory

    ~/judging_nnnn_*/web

and a .tar file of this directory is made in

    ~/judging_nnnn_*/web.tar

This latter may be copied to another computer, unpacked,
and installed as a web page.  Its principal file is

    ~/judging_nnnn_*/web/index.html

which is automatically created from parameters with
names of the form web_* in the file

    ~/judging_nnnn_*/hpcm_judging.rc

For example, if the web_manager parameter is defined
as an email address, this is displayed appropriately
at the bottom of the .../web/index.html file.

The beginning of that file is the contents of the
web_prefix parameter and the end of that file, before
the manager annotation, is the contents of the web_
posfix parameter, so the contents of .../web/index.html
is generally under the control of the parameters.  The
middle of the file references a copy of the

    ~/judging_nnnn_*/help/this_contest

file to describe contest/facility details, and
references copies of the problem descriptions included
in the web page.  Also, if the web_help_URL parameter
is not \"\", it is used as a reference to a help files
web page.

If the web_solutions_password parameter is \"ppp\" and
not \"\", then the directory

    ~/judging_nnnn_*/web/private/ppp/

is created containing problem solutions, with an automa-
tically created

    ~/judging_nnnn_*/web/private/ppp/index.html

that has the contents of the web_solutions_prefix para-
meter at its beginning.  The `private' directory is read
protected so that `ppp' must be known in order to read
the page.

Also, if the web_scoreboard_URL parameter is not \"\",
it is used as a reference to a scoreboard posted on the
web.  Such a scoreboard is not strictly necessary if
students using the contest/facility are given accounts,
since they can then access the scoreboard by using the
`scoreboard' command when they are logged in.  But if a
scoreboard is to be posted on the web, you should set
the scoreboard_commands parameter in hpcm_judging.rc
to send the scoreboard to the web site location whenever
the scoreboard changes.  For example, if you use

set scoreboard_commands {
    { sendscoreboard email
      \"setscoreboard<myaccount@mycomputer.edu>\"
      setscoreboard
      \"head -c 10000 >./public_html/scoreboardpage;\\
       chmod 644 ./public_html/scoreboardpage\" } }

the scoreboard, when changed, will be piped into the
command

    ~/judging_nnnn_*/secure/sendscoreboard

which in turn sends the scoreboard as the body of an
email message to

    setscoreboard<myaccount@mycomputer.edu>

The file

    ~/judging_nnnn_*/secure/sendscoreboard_procmailrc

is also created which can be appended to the .procmailrc
file of the myaccount@mycomputer.edu account to receive
the scoreboard copies automatically and pipe them in a
protected way to the file ~/public_html/scoreboardpage
in that account.  You can use a different file name, of
course.

Instead of using email, ssh, or some completely differ-
ent mechanism can be use to send scoreboards.  See the
scoreboard_commands documentation in

    ~/judging_nnnn_*/hpcm_judging.rc
and
    ~/hpcm/judge/lib/hpcm_judging.rc

for details.


Allocating Accounts
---------- --------

In order to allocate and account named aaaa, open the
file
	contest_nnnn/secure/passwords

for editing and change the line

	aaaa:ppppp

to

	aaaa:ppppp:NAME:EMAIL

where aaaa is the account name, ppppp is the account
password which is already assigned and is a random
hexadecimal number, NAME is the contestant's name, and
EMAIL is the contestant's email.

To send an email to the contestant with account aaaa
that specifies the contest, contestant's account, and
contestant's password, edit a welcome message describing
the contest/facility into the file

	contest_nnnn/secure/passwords_header

and after begin such the aaaa:ppppp:NAME:EMAIL line is
correct in the file

	contest_nnnn/secure/passwords

execute

	cd contest_nnnn/secure
	hpcm_mail aaaa -nosend

This will NOT send the email, but will output it so you
can check it.  Use

	hpcm_mail aaaa -nosend |less

if it is long and you need to scroll.  Then when it
checks out, execute

	hpcm_mail aaaa -send

which has -send in place of -nosend, and the mail will
actually be sent.

The hpcm_mail program is in the file

	~/bin/hpcm_mail

and just adds the `From' and CC email addresses of the
contest/facility manager to the outgoing mail.

Note: General mail cannot be received on the computer
that runs the contest, so it is necessary to change the
`From' address on the outgoing mail to a legitimate
email address to which the receiver can reply.  hpcm_
mail does this.

You can always resend the mail later if the contestant
forgets his/her password.


Changing the Problem Set
-------- --- ------- ---

The problem set is determined by the `problems_argu-
ments' parameter in hpcm_judging.rc.  A typical setting
is:

  set problems_arguments \"
    \$hpcm_directory/problem_library/bospre-ed.index, \\
        public/=problems/, \\
        ALL:include
  \"

This parameter is a character string that has the format

    problems_arguments ::= index-specification*

    index-specification ::=
        INDEX-FILE-NAME, { substitution, }* substitution

The space separated components of the `problems_argu-
ments' string actually become program arguments to the
makecontest program.  The INDEX-FILE-NAME is known as
such because it does NOT begin with `-', and therefore
is not an option, and because the previous argument did
not end in `,'.  If one of these arguments ends with
`,', then the next program argument is a substitution.

The index file consists of entries with the format

    *** ITEM-NAME option*
        TEXT-DESCRIBING-ITEM

where the item is in this case the name of a problem
directory relative to the directory containing the index
file.

One of the outputs of processing the index file is a
problems index stored in the file

	~/contest_nnnn/help/problems
	
and available to contestants with by executing

	help problems
	
in their account or by looking at a web page if that
exits.  This index equals entries selected as described
below after substitutions are made in the first line.
These substitutions are determined by the `substitu-
tions' arguments inside the `problems_arguments' value.

The item is included in the output index if and only if
after substitutions the item has the `include' option.
In this case the ITEM-NAME before substitutions is used
as the name of a file or subdirectory of the index file
containing directory that is to be copied to the sub-
directory of ~/contest_nnnn that is named by ITEM-NAME
after substitutions.  The latter must begin with one
of `problems/', `help/', or `demos/'.

When the item is included in the output index, only the
ITEM-NAME after substitutions is retained in the first
line, but the ITEM-DESCRIPTION-TEXT lines are copied
verbatim.





Things The Software Manager Should Do
------ --- -------- ------- ------ --

Create more contest/facility accounts.
Change account passwords.
"

exit 0

# Include common error catching code:
#
} caught_output
caught_error

