#!/bin/sh -f
#
# Looks at the subdirectories of the mail directory for
# score files, and prints the scores found.
#
# File:		scorefinder
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Sat Sep 16 07:30:46 EDT 2000
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: hc3 $
#   $Date: 2000/09/16 11:24:21 $
#   $RCSfile: scorefinder,v $
#   $Revision: 1.2 $
#
# The next line starts tcl \
exec tcl "$0" "$@"

# Use tcl rather than tclsh so that `signal' is defined.

# Include common code and parameters:
#
set lib_directory "[file dirname $argv0]/../lib"
source $lib_directory/judging_common.tcl
set log_globally yes
catch {

set document "
scorefinder

    This program examines subdirectories of the mail
    directory that have names of the form:

    	date-<<submitter>>-submission

    It selects subdirectories that have one or both of
    the score files:

    	$auto_score_file
    	$manual_score_file

    For each such, this program outputs one line of the
    form:

    	date submitter problem code score

    In this line, the date is taken literally from the
    subdirectory name.  The submitter is taken from the
    directory name but has any `@' and characters
    following the `@' stripped off.  The program is the
    submitted file name with its extension removed; this
    is found by reading the subject field of any
    $received_file file in the subdirectory, and using
    the problem name `UNKNOWN' if this cannot be done
    or the subject field has the wrong format.  The
    code is one of:

      mc  $manual_score_file	== `Completely Correct'
      mi  $manual_score_file	!= `Completely Correct'
      ac  $auto_score_file	== `Completely Correct'
      ai  $auto_score_file	!= `Completely Correct'

    where the $auto_score_file file is ignored if the
    $manual_score_file file exits.  The score is the
    actual score used to compute the code, quoted by
    \"'s.

    This program logs errors in the log directory."


# If any arguments, print documentation and exit.
#
if { $argc != 0 } {
    puts $document
    exit 1
}

# Loop through the subdirectory names.
#
foreach dir [glob -nocomplain \
	          $mail_directory/*-<<*>>-submission] {

    set subdir [file tail $dir]

    if { ! [regexp {^(.*)-<<(.*)>>-submission$} \
    		   $subdir forget date submitter] } {
    	continue;
    }

    set code ""
    if { [file readable $dir/$manual_score_file] } {
    	set score 
	    [read_file $dir/$manual_score_file]
	if { $score == "Completely Correct" } {
	    set code mc
	} elseif { $score != "" } {
	    set code mi
	}
    }
    if { $code == "" \
         && [file readable $dir/$auto_score_file] } {
    	set score \
	    [read_file $dir/$auto_score_file]
	if { $score == "Completely Correct" } {
	    set code ac
	} elseif { $score != "" } {
	    set code ai
	}
    }

    if { $code == "" } continue;

    regexp {^([^@]*)@} $submitter forget submitter

    if { $date == "" } {
    	set date UNKNOWN
    }
    if { $submitter == "" } {
    	set date UNKNOWN
    }

    set program UNKNOWN
    if { [file readable $dir/$received_file] } {
    	set received_ch [open $dir/$received_file r]
	read_header $received_ch
	close $received_ch

	if { [llength $message_subject] == 2 \
	     && [lindex $message_subject 0] \
	        == "submit" } {
	    set program [lindex $message_subject 1]
	    set program [file rootname $program]
	}
    }

    puts "$date $submitter $program $code \"$score\""
}

exit 0

# Include common error catching code:
#
} caught_output
caught_error
