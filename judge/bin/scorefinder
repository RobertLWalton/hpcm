#!/bin/sh
#
# Looks at the subdirectories of the mail directory for
# score files, and prints the scores found.
#
# File:		scorefinder
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Thu Jan  4 05:34:57 EST 2007
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: walton $
#   $Date: 2007/01/04 10:36:16 $
#   $RCSfile: scorefinder,v $
#   $Revision: 1.30 $
#
# The next line starts tcl \
exec tcl "$0" "$@"

# Use tcl rather than tclsh so that `signal' is defined.

# Include common code and parameters:
#
set lib_directory "[file dirname $argv0]/../lib"
set log_globally yes
source $lib_directory/judging_common.tcl
catch {

set document "
scorefinder \[-gotten\]

    This program examines subdirectories of the mail
    directory that have names of the form:

    	date-<<submitter>>-submission

    It selects subdirectories that have a
    
    	Reply_Mail_History

    file, that have a

    	Received_Mail

    file whose `Subject:' field has the form

    	Subject: submit problem\[.extension\]

    and that have one or both of the score files:

    	Auto_Score
    	Manual_Score

    For each such subdirectory, this program outputs one
    line of the form:

    	date submitter problem code score marker

    In this line, the date is taken literally from the
    subdirectory name.  The submitter is taken from the
    directory name and passed through the submitter_
    compress function, which for some contests strips
    any `@' and following characters, and for other con-
    tests compresses what follows the `@'.  The problem
    is taken from the Received_Mail file `Subject'
    field.

    The code is of the form ACFS where

    	A = a   if score is from an Auto_Score file
    	  = m   if score is from a Manual_Score file

	C = c   if score is `Completely Correct'
	  = i   otherwise

	F = f   if the Reply_Mail file exists
	  = n   otherwise

	S = i   if the submission qualifier is `in'
	    o   if the submission qualifier is `inout'
	    f   if the submission qualifier is `first'
	    s   if the submission qualifier is `summary'
	    x   if the submission qualifier is omitted
	        or some other value

    An Auto_Score file value is split into a score and
    a marker, if the marker is present in the value.
    The Auto_Score file is ignored if the Manual_Score
    file exists.  The score derived from these files is
    the score used to compute the code.  Each output
    line is a TCL list, with marker being the empty
    string if it does not exist.

    If the -gotten option is present, this program also
    selects subdirectories which contain the `Gotten'
    file.  For these directories this program outputs
    one line of the form:

    	date submitter pppp g

    for each problem `pppp' such that there is at least
    one line in the `Gotten' file of the form

        File: problems/pppp/...

    or

        File: demos/pppp/...

    The -gotten flag is set automatically if the
    `scoreboard_start_time' variable equals \"problem\"
    or \"team\".

    This program logs errors in the log directory."


# Don't change argc or argv so error output will work.
#
set my_argc $argc
set my_argv $argv

# Check for and consume -gotten option.
#
set gotten_option no
if { $my_argc >= 1 \
     && [lindex $my_argv 0] == "-gotten" } {
    set gotten_option yes
    set my_argv [lrange $my_argv 1 end]
    incr my_argc -1
} elseif { $scoreboard_start_time == "problem" } {
    set gotten_option yes
} elseif { $scoreboard_start_time == "team" } {
    set gotten_option yes
}

# If there are leftover arguments, print document and
# exit with error.
#
if { $my_argc != 0 } {
    puts $document
    exit 1
}

# Loop through the subdirectory names.
#
foreach dir \
    [glob -nocomplain \
	  $judging_directory/mail/*-<<*>>-submission] {

    set subdir [file tail $dir]

    if { ! [regexp {^([^<>]*)-<<(.*)>>-submission$} \
    		   $subdir forget date submitter] } {
    	continue;
    }

    if { $date == "" } {
	error "data is empty in `$subdir'"
    }
    set submitter [submitter_compress $submitter]
    if { $submitter == "" } {
	error "submitter compresses to empty in\
	       `$subdir'"
    }

    # Process any Gotten file.
    #
    if { [file exists $dir/Gotten] } {

    	if { $gotten_option } {
	    set gotten_ch [open $dir/Gotten r]

	    # Check that first line is `Date:' line.
	    # Date should be same as from directory
	    # name.
	    #
	    set line [gets $gotten_ch]
	    if { ! [eof $gotten_ch] \
	         && ! [regexp {^Date: } $line] } {
	        error "Bad first line in\
		       $dir/Gotten:\n    $line"
	    }

	    # Get problem names from `File:' lines
	    # with file names of form demos/problem...
	    # or problems/problem... .  Output a line
	    # for each new problem.
	    #
	    set problems ""
	    while { "yes" } {
	        set line [gets $gotten_ch]
		if { [eof $gotten_ch] } break
		if { ! [regexp {^File: ([^\ \t]*)$} \
			       $line forget name] } {
		    error "Bad line in\
			   $dir/Gotten:\n   \
			   $line"
		}
		if { \
		  [regexp \
		   {^(demos|problems)/([^/]*)/} \
		   $name forget forget problem] \
		  && ! [lcontain $problems $problem] } {
		    puts [list $date $submitter \
		    	        $problem g]
		    lappend problems $problem
		}
	    }
	    close $gotten_ch
	}

    } elseif {    [file exists $dir/Received_Mail] \
               && [file exists \
	                $dir/Reply_Mail_History] } {

	# Get problem name.
	#
	set received_ch [open $dir/Received_Mail r]
	read_header $received_ch
	close $received_ch

	if {    ! [catch { \
		      set sublen \
			  [llength \
			       $message_subject] \
			 }] \
	     && $sublen >= 2 \
	     && $sublen <= 3 \
	     && [lindex $message_subject 0] \
		== "submit" } {
	    set problem [lindex $message_subject 1]
	    set problem [file rootname $problem]
	    set qualifier [lindex $message_subject 2]
	} else {
	    continue
	}

	# Get score.
	#
	set score ""
	set marker ""
	if { [file exists $dir/Manual_Score] } {
	    set score \
		[read_file $dir/Manual_Score]
	    set code m
	} elseif { [file exists $dir/Auto_Score] \
		     } {
	    set score \
		[read_file $dir/Auto_Score]

	    regexp \
	      {^([^: \t]+:[^ \t]*)[ \t]+([^ \t].*)$} \
	      $score forget marker score

	    set code a
	}

	if { $score == "" } continue

	if { $score == "Completely Correct" } {
	    set code ${code}c
	} else {
	    set code ${code}i
	}

	if { [file exists $dir/Reply_Mail] } {
	    set code ${code}f
	} else {
	    set code ${code}n
	}

	switch $qualifier {
	    in		{ set code ${code}i }
	    inout	{ set code ${code}o }
	    first	{ set code ${code}f }
	    summary	{ set code ${code}s }
	    default	{ set code ${code}x }
	}

	puts [list $date $submitter $problem $code \
		   $score $marker]
    }
}

exit 0

# Include common error catching code:
#
} caught_output
caught_error
