#!/bin/sh
#
# Makes contest/scoreboard.1 every minute.
#
# File:		makescoreboard
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Mon Oct  2 13:19:25 EDT 2000
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: hc3 $
#   $Date: 2000/10/02 17:18:09 $
#   $RCSfile: makescoreboard,v $
#   $Revision: 1.1 $
#
# The next line starts tcl \
exec tcl "$0" "$@"

# Use tcl rather than tclsh so that `signal' is defined.

# Include common code and parameters:
#
set lib_directory "[file dirname $argv0]/../lib"
source $lib_directory/judging_common.tcl
set log_globally yes
catch {

set document "
makescoreboard \[interval\]

    This program makes the scoreboard putting it in the
    file contest_directory/scoreboard.1 at periodic
    intervals.  The interval in seconds can be set by
    the interval argument, but will default to 60 sec-
    onds.  This program calls scorefinder and scoreboard
    to make the scoreboard, and prepends any contest
    directory scoreboard.1head file to the output of the
    scoreboard program.  This program uses the directory
    score flag file and mtimes of files to avoid actual-
    ly recomputing the scoreboard.1 file unnecessarily.

    Deleting the existing scoreboard.1 file will cause
    this program to recompute that file when its next
    interval expires."

# If any non interval arguments, print
# documentation and exit.
#
if { $argc > 1 \
     || ( $argc == 1 \
          && [regexp {^-} [lindex $argv 0]] ) } {
    puts $document
    exit 1
}

if { $argc == 1 } {
    set interval [lindex $argv 0]
    if { [catch { expr $interval }] \
    	 || $interval <= 0 } {
    	error "$interval is not an integer > 0"
    }
} else {
    set interval 60
}

set sbfile $contest_directory/scoreboard.1
set sbhead $contest_directory/scoreboard.1head

while { "yes" } {

    clear_flag $score_flag_file

    if { ! [file isdirectory $contest_directory] \
	 || ! [file writable $contest_directory] } {
	error "$contest_directory is not a writable\
	       directory"
    }

    if { [file exists $sbfile] } {
	file delete -force $sbfile
    }

    if { [file exists $sbhead] } {
	file copy $sbhead $sbfile
    }

    exec scorefinder | scoreboard >> $sbfile

    grant_access $sbfile

    while { "yes" } {
	sleep $interval
    	if { [test_flag $score_flag_file] } break
	if { ! [file exists $sbfile] } break
	if { [file exists $sbhead] \
	     && [file mtime $sbfile] \
	        < [file mtime $sbhead] } break
    }
}

exit 0

# Include common error catching code:
#
} caught_output
caught_error
