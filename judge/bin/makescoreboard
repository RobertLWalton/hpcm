#!/bin/sh
#
# Recomputes the scoreboard every minute.
#
# File:		makescoreboard
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Sun Sep 29 15:31:46 EDT 2013
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: walton $
#   $Date: 2013/09/30 00:25:33 $
#   $RCSfile: makescoreboard,v $
#   $Revision: 1.94 $
#
# The next lines start tclsh \
trap "echo makescoreboard: Terminated by Signal" \
    HUP INT QUIT; \
tclsh "$0" "$@"; exit $status

# If -start-, set up error handling so we will catch
# errors during sourcing of hpcm_judging.rc and do
# retries if necessary.
#
if { [lindex $argv 0] == "-start-" } {
    set start_errors [lindex $argv 1]
    if { $start_errors < 4 } {
        proc caught_error_retry {} {
	    global start_errors pid_file argv
	    incr start_errors
	    sleep 2
	    if { [info exists pid_file] } {
		file delete -force $pid_file
	    }
	    eval exec_in_background \
	         makecontest -start- \
	         $start_errors \
	         [lrange $argv 2 end]
	    exit 0
	}
    }
    set log_globally yes
    set log_quiet yes
} else {
    set log_disable yes
}

# Include common code and parameters:
#
set lib_directory "[file dirname $argv0]/../lib"
source $lib_directory/judging_common.tcl

catch {

set document "
makescoreboard { start | status | stop | update } \\
               \[ parameter-filename | \\
	         scoreboard_instructions-value \] ...

    This program makes scoreboards by following the
    instructions stored in the `scoreboard_instructions'
    global variable.  See the hpcm_judging.rc file
    for a description of these instructions.

    When this program starts, it processes its second
    and subsequent arguments as follows.  Any named
    parameter file is `sourced'.  Any argument that
    begins with a `{' is stored (with the `{ }' brackets
    removed) in the `scoreboard_instructions' global
    variable.
    
    This program calls
    
	scorefinder -gotten \\
	    > judging_directory/Scorefinder_Output

    The Scorefinder_Output file is used as input by
    the `scoretable' program to produce a scoreboard
    table (i.e., the `tabular' part of the scoreboard).
    To avoid conflicts between the `start' and `update'
    commands, this program adds a `+' to the end of the
    name Scorefinder_Output when running the update
    command.

    This program ignores signals when computing score-
    boards, and terminates without error on a signal
    while the program is sleeping for an interval.

    If called with an `update' command, this program
    processes the scoreboard instructions just once
    and then exits immediately.

    If called with the `start' command, this program
    executes itself as a subprocess and writes into the
    Scoreboard_PID file in the judging directory the
    process ID of the subprocess.  This subprocess pro-
    cess the scoreboard instructions at periodic inter-
    vals.  But if the Scoreboard_PID file already
    exists, AND the process ID it contains is valid,
    this program prints information about the ID'ed
    process and does nothing else.

    The first time the `start' command processes the
    scoreboard instructions, it does so just like the
    `update' command.  Then this program resumes at
    intervals determined by the `scoreboard_interval'
    global variable.  After every interval, this program
    checks to see if any inputs to the last run have
    been changed, or any outputs have been deleted, or
    if the Score_Flag flag exists, and if yes, this
    program reprocesses the scoreboard instructions just
    like `update'.  The inputs checked for change in-
    clude the hpcm_judging.rc file in the judging direc-
    tory, the parameter files listed in the arguments,
    and any INPUT files from the last processing of the
    scoreboard instructions.  In addition, if the score-
    board_shutdown_time global variable is not \"\",\
    	then
    when this time arrives, the program deletes Score-
    board_PID, executes the scoreboard_shutdown proce-
    dure, and exits.

    If called with the `stop' command, this program does
    nothing but send kill signals to the process whose
    ID is listed in the Scoreboard_PID file, and then
    deletes that file.  While doing this it outputs in-
    formation about its progress.

    If called with the `status' command, this program
    just outputs information about the status of the
    process whose ID is stored in the Scoreboard_PID
    file.

    With the `update', `status', or `stop' commands this
    program does not log errors but writes them to the
    standard error.  This program does the same with
    `start' command errors that occur during the first
    making of the scoreboard.  But after beginning
    reruns for the `start' command, this program logs
    errors in a global log directory."

# } to balance extra left bracket in documentation.

#	makescoreboard start parameter ...
#
# calls
#
#	makescoreboard -start- N parameter ...
#
# where N is the number of retries because of errors,
# or is just 1 to indicate we should retry because
# parameters have changed.

# Print documentation if illegal (or -doc) first
# argument.
#
set command [lindex $argv 0]
if { ! [lcontain {update start status stop -start-} \
                 $command] } {
    puts $document
    exit 1
}

# Compute file names.
#
set finder_file \
    $judging_directory/Scorefinder_Output
if { $command == "update" } {
    set finder_file $finder_file+
}
set pid_file \
    $judging_directory/Scoreboard_PID

# Mtime list for INPUT, and OUTPUT files.
# This is a list of items each of the format:
#
#	{ file-mtime file-name }
#
# The file-mtime can be a `clock seconds' value that
# is the modification time of an existing parameter or
# INPUT file, or `none' for an INPUT the file did not
# exist, or `out' for an OUTPUT file.
#
set inout_mtime_list {}

# Mtime list for parameter files.  This is just a list
# of items each of the format:
#
#	{ file-mtime file-name }
#
# where file-mtime is in `clock seconds'.
#
set pfile $judging_directory/hpcm_judging.rc
set mtime [file mtime $pfile]
set parameter_mtime_list [list [list $mtime $pfile]]

# Last time the scoreboard update was started, in
# seconds.
#
set last_time ""

# Ditto as time-and-date.
#
set scoreboard_time ""

# Earliest start or stop time in an OUTPUT instruction
# that is after last_time.  Or "" if none.
#
set future_time ""

# Shutdown time in [clock seconds] format, or "" if
# none.
#
set shutdown_time ""

# List of output files for which error messages have
# been sent to the judge since they were last
# successfully output.
#
set sent_errors {}

# Parameter_save(V) is save of value of global
# parameter V, for V a scoreboard_* global.  If V is
# an array, it is the [array get V] value.  Otherwise
# it is the ordinary value.

# Process all the arguments, sourcing files as neces-
# sary.  Add parameter files to parameter_mtime_list.
#
switch -- $command {
    -start-	{ set parameters [lrange $argv 2 end] }
    default	{ set parameters [lrange $argv 1 end] }
}
foreach arg $parameters {
    set LB "{"
    # "}" to balance left bracket in last line so
    # TCL will read this procedure code properly.
    #
    if { [regexp "^${LB}" $arg] } {
	if { [catch { set scoreboard_instructions \
			  [lindex $arg 0]
		      llength \
			  $scoreboard_instructions \
		    }] } {
	    error "scoreboard instructions\
		   argument is not a TCL list:\
		   $arg"
	}
    } else {
	set mtime [file mtime $arg]
	lappend parameter_mtime_list [list $mtime $arg]
	source_file $arg
    }
}

# Replace relative stop and freeze times by normally
# formatted times.
#
set st $scoreboard_start_time
if { ! [catch { set st [clock scan $st] }] } {
    set stop_time $scoreboard_stop_time
    if { [regexp {^(|\+)[0-9]+$} $stop_time] } {
	set scoreboard_stop_time \
	    [clock format [expr { $st + $stop_time }]]
    }
    set freeze_time $scoreboard_freeze_time
    if { [regexp {^(|\+)[0-9]+$} $freeze_time] } {
	set scoreboard_freeze_time \
	    [clock format [expr { $st + $freeze_time }]]
    }
}

# Set up abbreviation_array to map abbreviations like
# TIME to values.
#
foreach n [array names scoreboard_abbreviation] {
    set m $scoreboard_abbreviation($n)
    set abbreviation_array($n) [set scoreboard_$m]
}

# Save parameter values in parameter_save.
#
foreach v [info globals scoreboard_*] {
    if { [array exists $v] } {
	set parameter_save($v) [array get $v]
    } elseif { [info exists $v] } {
	set parameter_save($v) [set $v]
    }
}

# Procedure to restore parameter values.
#
proc restore_parameters {} {
    global parameter_save
    foreach v [info globals scoreboard_*] {
        global $v
	if { ! [info exists parameter_save($v)] } {
	    catch { unset $v }
	} elseif { [array exists $v] } {
	    array set $v $parameter_save($v)
	} elseif { [info exists $v] } {
	    set $v $parameter_save($v)
	}
    }
}

# Procedure to update saved scoreboard_time.
#
proc set_scoreboard_time { time } {
    global scoreboard_time parameter_save \
           abbreviation_array
    set scoreboard_time $time
    set parameter_save(scoreboard_time) $time
    set abbreviation_array(TIME) $time
}


# Set shutdown time if present.
#
if { $scoreboard_shutdown_time != "" } {
    set shutdown_time \
        [clock scan $scoreboard_shutdown_time]
}

# Constant equal to 256 spaces.
#
set space "        "
set space "$space$space"
set space "$space$space"
set space "$space$space"
set space "$space$space"
set space "$space$space"

# Compute BAR.
#
set bar ""
set solid_bar =====
set w [expr { $scoreboard_width / 5 } ]
while { $w > 0 } {
    set bar "$bar== =="
    set solid_bar $solid_bar=====
    incr w -1
}

# Look at the mtime_list and see if the scoreboard
# should be remade.
#
# Return `yes' if any existing file has an mtime that
# is larger than last_time, or if a parameter or INPUT
# file that existed has changed, or if an OUTPUT file
# that existed has been deleted.
#	
proc update_required { mtime_list } {

    global last_time

    set result no
    foreach item $mtime_list {
        set mtime [lindex $item 0]
        set name  [lindex $item 1]

        if { $mtime == "none" } {
            if { [file exists $name] } {
	       set result yes;
	    }
        } elseif { $mtime == "out" } {
            if { ! [file exists $name] } {
	        set result yes;
	    }
        } else {
            if { ! [file exists $name] } {
	        set result yes;
	    } elseif { [file mtime $name] > $mtime } {
	        set result yes;
	    } elseif {   $last_time < $mtime } {
		set result yes
	    } 
        }
    }
    return $result
}

# Given a value that may be an abbreviation defined in
# abbreviation_array, return the value it abbreviates,
# or return the original value if it is not an abbrevia-
# tion.  Convert values like START+600 to date-and-time
# values.
#
proc unabbreviate { value } {

    global abbreviation_array

    if { [info exists \
               abbreviation_array($value)] } {
	return $abbreviation_array($value)
    } elseif {    [regexp {^(.*)([+-][0-9]+)$} $value \
			  forget abv inc] \
	       && [info exists \
			abbreviation_array($abv)] \
	       && ! [catch {
		      set date \
			  $abbreviation_array($abv)
		      set time \
			  [clock scan $date]
		       }] } {
	incr time $inc
	return [clock format $time]
    } else {
	return $value
    }
}

# Process parameter setting instruction.
#
proc set_parameter { instruction } {

    set name  [lindex $instruction 0]
    set value [lindex $instruction 1]
    set value [unabbreviate $value]
    global scoreboard_$name

    if { [array exists scoreboard_$name] } {
	array set scoreboard_$name $value
    } elseif { [info exists scoreboard_$name] } {
	set scoreboard_$name $value
    } else {
	error "$name is not a scoreboard parameter name"
    }
}


# Process scoreboard instructions and set inout_mtime_
# list, last_time, future_time, and sent_errors.
#
proc update_scoreboard { { force no } } {

    global inout_mtime_list last_time future_time \
           shutdown_time sent_errors \
	   judging_directory pid_file argv \
           finder_file errorCode errorInfo \
	   abbreviation_array bar solid_bar space \
	   scoreboard_commands


    set time [clock seconds]
    if {    $shutdown_time != "" \
         && $shutdown_time <= $time } {
        file delete -force $pid_file
	uplevel #0 scoreboard_shutdown
	exit 0
    }

    # If we have no reason to rerun scoreboard instruc-
    # tions, return.
    #
    if {    $force == "no" \
         &&    [update_required $inout_mtime_list] \
	    == "no" \
         && ! [test_flag Score_Flag] \
	 && (    $future_time == "" \
	      || $time < $future_time ) } {

        return
    }

    eval global [info globals scoreboard_*]
    set_scoreboard_time [clock format $time]
    restore_parameters
    set last_time $time
    set future_time ""
    set inout_mtime_list {}

    # Recompute $finder_file.
    #
    make_signals_ignored
    clear_flag Score_Flag
    file delete -force -- $finder_file
    exec scorefinder -gotten > $finder_file
    make_signals_default

    # Ignore signals while processing instructions.
    #
    make_signals_ignored

    # Process if statements.
    #
    set instructions {}
    parse_block $scoreboard_instructions instructions \
		[info globals scoreboard_*]

    # Loop through scoreboard instructions.
    #
    # Update is `yes' if OUTPUT instruction has been
    # processed and current OUTPUT file is to be updat-
    # ed, `no' if OUTPUT instruction has been processed
    # and current OUTPUT file is NOT to be updated, and
    # `none' if no OUTPUT instruction has been proces-
    # sed.
    # 
    set update none
    set pc 0
    set end_pc [llength $instructions]
    #
    while { "yes" } {

	set instruction [lindex $instructions $pc]
	incr pc

	if { [catch { llength $instruction }] } {
	    error "a scoreboard_instructions'\
		   instruction is not a TCL list:\
		   $instruction"
	    
	}
	set opcode [lindex $instruction 0]

	# If we are at the end of a sequence of
	# instructions that begins with an OUTPUT
	# instruction and ends just before the next
	# OUTPUT instruction or end of all instructions,
	# and if OUTPUT file is being updated, write
	# out file and send it if necessary.
	#
	if { ( $pc > $end_pc || $opcode == "OUTPUT" ) \
	     && $update == "yes" } {

	    # Write output file.  If error, delete file
	    # and hpcm_sendmail the judge.
	    #
	    # $out_file is in sent_errors if an error
	    # for $out_file has been hpcm_sendmail'ed to
	    # the judge since the last successful pro-
	    # cessing of $out_file.
	    #
	    if { [catch {

		    set error_data \
		        "\nWriting $out_file\n"
		    set ch [open $out_file w]
		    puts -nonewline $ch $contents
		    close $ch
		    if { $grant_access } {
			grant_access $out_file
		    }

		    # Send email.
		    #
		    if { $send } {
			set bin $judging_directory
			set bin $bin/secure/bin
			foreach to $send_commands {
			    set error_data \
				"\nError was during\
				 execution of $bin/$to"
			    exec $bin/$to <<$contents
			}
		    }
		    lsub sent_errors $out_file
		} error_message] } {

		# On error, delete output file and
		# rethrow the error.  When we are rerun,
		# the output file will be recomputed and
		# remailed.
		#
		if { [file isfile $out_file] } {

		    # Its possible if instructions are
		    # miswritten to have out_file name a
		    # directory.

		    file delete -force -- $out_file
		}
		if { ! [lcontain $sent_errors \
		                 $out_file] } {
		    set message \
			"Subject: makescoreboard error\
			 outputting $out_file\n"
		    set message "$message\nNOTE:\
				 The file $out_file has\
				 been DELETED!\n"
		    set message "$message\n     \
				 It will reappear after\
				 you fix this error.\n"
		    set message "$message$error_data"
		    set message \
			"$message\n$error_message\n"
		    set message \
			"$message\nerrorCode:"
		    set message \
			"$message\n$errorCode\n"
		    set message \
			"$message\nerrorInfo:"
		    set message \
			"$message\n$errorInfo\n"
		    exec hpcm_sendmail << $message
		    ladd sent_errors $out_file
		}
	    }
	}

	if { $pc > $end_pc } break

	# Execute instruction.
	#
	switch ${update}_$opcode {

	    none_OUTPUT -
	    no_OUTPUT -
	    yes_OUTPUT {

		# Restore parameters
		#
		restore_parameters

		# Compute output file.
		#
		set out_file [lindex $instruction 1]
		set out_file \
		   [file join $judging_directory \
			      $out_file]

		# Compute start and stop times and
		# update future_time.
		#
		set out_start [lindex $instruction 2]
		set out_start [unabbreviate $out_start]
		if { $out_start != "" } {
		    if { [catch {
			    set out_start \
				[clock scan $out_start]
				}] } {
			error "bad start time in\
			       $instruction"
		    }
		    if { $out_start > $last_time \
			 && (    $future_time == "" \
			      ||   $future_time \
				 > $out_start ) } {
			set future_time $out_start
		    }
		}
		set out_stop [lindex $instruction 3]
		set out_stop [unabbreviate $out_stop]
		if { $out_stop != "" } {
		    if { [catch {
			    set out_stop \
				[clock scan $out_stop]
				}] } {
			error "bad stop time in\
			       $instruction"
		    }
		    if { $out_stop > $last_time \
			 && (    $future_time == "" \
			      ||   $future_time \
				 > $out_stop ) } {
			set future_time $out_stop
		    }
		}

		# Set out_mtime to the output file mtime
		# or "" if no output file exist/
		#
		if { [file exists $out_file] } {
		    set out_mtime [file mtime $out_file]
		} else {
		    set out_mtime ""
		}

		# Compute update == `yes' if OUTPUT file
		# is to be updated, and `no' otherwise.
		# Add output file to inout_mtime_list if
		# we are NOT before file start time.
		#
		set update yes
		#
		# If we are before OUTPUT start time, do
		# NOT update.
		#
		if { $out_start != "" \
		     && $last_time < $out_start } {
		    set update no
		} else {
		    lappend inout_mtime_list \
		            [list out $out_file]
		}
		#
		# If output file exists and has an mtime
		# >= the OUTPUT stop time, do NOT
		# update.
		#
		if {    $out_mtime != "" \
		     && $out_stop != "" \
		     && $out_mtime >= $out_stop } {
		    set update no
		}

		# Set output variables.
		#
		set output_found yes
		set contents ""
		set send no
		set grant_access no
	    }

	    yes_SEND {

		# Compute send_commands for use when
		# output done.
		#
		set name [lindex $instruction 1]
		set send_name scoreboard_$name
		if { $name == "" } {
		    set send_commands {}
		    foreach item $scoreboard_commands {
		        lappend send_commands \
			        [lindex $item 0]
		    }
		} elseif { ! [info exists \
				   $send_name] } {
		   set send_commands {}
		} else {
		   set send_commands [set $send_name]
		}

		# Set switch to indicate SEND happened.
		#
		set send yes
	    }

	    yes_GRANT_ACCESS {
		set grant_access yes
	    }

	    yes_BLANK {
		set contents "$contents\n"
	    }

	    yes_BAR {
		set text [lindex $instruction 1]
		if { $text == "" } {
		    set contents "$contents$bar\n"
		} else {
		    set text [unabbreviate $text]
		    set sw $scoreboard_width
		    set len [string length $text]
		    incr len 2
		    if { $len + 4 > $sw} {
			error "scoreboard_width not\
			       wide enough for\
			       `$instruction'"
		    }
		    set left \
			[expr { ( $sw - $len ) / 2 }]
		    set right \
			[expr { $sw - $len - $left }]
		    incr left -1
		    incr right -1
		    set left \
			[string range $solid_bar \
				0 $left]
		    set right \
			[string range $solid_bar \
				0 $right]
		    set contents \
			"$contents$left $text $right\n"
		}
	    }

	    yes_LINE {

		# Make sure `space is long enough'.
		#
		if { $scoreboard_width > 256 } {
		    error "scoreboard width > 256"
		}

		# Compute left, center, and right
		# text.
		#
		set left   [lindex $instruction 1]
		set center [lindex $instruction 2]
		set right  [lindex $instruction 3]

		set left   [unabbreviate $left]
		set center [unabbreviate $center]
		set right  [unabbreviate $right]

		# Compute columns of beginning and/or
		# end for each of the three texts.
		# Columns are numbered 0, 1, ...
		#
		set left_end [string length $left]
		incr left_end -1
		set right_begin \
		    [expr { $scoreboard_width - \
			    [string length $right] }]
		set center_length \
		    [string length $center]
		set center_begin  \
		    [expr { ( $scoreboard_width \
			      - $center_length + 1 ) \
			    / 2 }]
		set center_end \
		    [expr { $center_begin \
			    + $center_length - 1 }]

		# Make sure texts are short enough so
		# that their ends are within limits.
		#
		if { $left_end >= $scoreboard_width } {
		    error "LINE left text too wide:\
			   $left"
		} elseif { $right_begin < 0 } {
		    error "LINE right text too wide:\
			   $right"
		} elseif {    $center_begin < 0 \
			   || $center_end \
			      >= $scoreboard_width } {
		    error "LINE center text too wide:\
			   $center"
		}

		# Compute line.  Start with left text.
		#
		set line $left

		set center_done no
		set right_done  no

		# If center is non-empty and has a 2
		# space gap between it and any other
		# non-empty text, add the center to the
		# line.
		#
		if {    $center != "" \
		     && ( $left == "" \
			  || $left_end + 2 \
			     < $center_begin ) \
		     && ( $right == "" \
			  || $center_end + 2 \
			     < $right_begin ) } {
		    incr left_end 1
		    incr center_begin -1
		    set line \
			"$line[string \
				  range $space \
				  $left_end \
				  $center_begin]"
		    set line "$line$center"
		    set center_done yes
		    set left_end $center_end
		}

		# If right text is non-empty and has a 2
		# space gap with the part of the line
		# to its left, add it to line.
		#
		if {    $right != ""
		     && ( $left_end == -1 \
			  || $left_end + 2 \
			     < $right_begin ) } {
		    incr left_end 1
		    incr right_begin -1
		    set line \
			"$line[string \
				  range $space \
				  $left_end \
				  $right_begin]"
		    set line "$line$right"
		    set right_done yes
		}

		# If center text did not get added to
		# first line, put it on a line by it-
		# self.
		#
		if { $center != "" && \
		     $center_done == "no" } {
		    incr center_begin -1
		    set line \
			"$line\n[string \
				    range $space \
				    0 $center_begin]"
		    set line "$line$center"
		}

		# If right text did not get added to
		# first line, put it on a line by it-
		# self.
		#
		if { $right != "" \
		     && $right_done == "no" } {
		    incr right_begin -1
		    set line \
			"$line\n[string \
				    range $space \
				    0 $right_begin]"
		    set line "$line$right"
		}

		# Add line(s) to contents of output.
		#
		set contents "$contents$line\n"
	    }

	    yes_INPUT {

		# Loop through input files until an
		# existing one is found.
		#
		foreach in_file \
			[lrange $instruction 1 end] {

		    set in_file \
			[file join $judging_directory \
				   $in_file]

		    # Add first existing input file to
		    # inout_mtime_list if it is not
		    # already on list.  Note, if it
		    # is on as (previous) output file,
		    # it is NOT added to list (else
		    # is might produce perpetual
		    # updates as its mtime would be
		    # > last_time).
		    #
		    # Also add this file to the output
		    # contents.
		    #
		    # Add non-existing files before
		    # first existing file to the
		    # inout_mtime_list.
		    #
		    if { [file exists $in_file] } {

			set found no
			foreach item $inout_mtime_list {
			    if {    $in_file \
			         == [lindex $item 1] } {
			        set found yes
				break
			    }
			}
			if { $found == "no" } {
			    set mtime \
			        [file mtime $in_file]
			    lappend inout_mtime_list \
				    [list $mtime \
				          $in_file]
			}

			if { [file size $in_file] > 0 \
					} {
			    set c [read_entire_file \
					$in_file]
			    set contents "$contents$c\n"
			}

			break;
		    } else {
			lappend inout_mtime_list \
				[list none $in_file]
		    }
		}
	    }

	    yes_BOARD {

		# Compute parameters to be passed to
		# the scoreboard program.
		#
		set parameters ""
		foreach name \
		        [info globals scoreboard_*] {
		    regexp {^scoreboard_(.*)$} $name \
			   forget pname
		    if { [array exists $name] } {
		        foreach n [array names $name] {
			    set value \
			        [set "${name}($n)"]
			    lappend parameters \
			        [list "${pname}($n)" \
				      $value]
			}
		    } elseif { ! [info exists $name] } {
			continue
		    } else {
			set value [set $name]
			lappend parameters \
				[list $pname $value]
		    }
		}

		# Call the scoreboard program to compute
		# the board table.
		#
		set scoretable \
		    [exec scoretable "{ $parameters }" \
				     < $finder_file]

		# If the scoreboard table is empty, say
		# so explicitly.
		#
		if { $scoretable == "" } {
		    set scoretable \
			"The scoreboard is currently\
			 EMPTY!  Nothing must have\
			 happened yet."
		}

		# Add the scoreboard table to the output
		# file contents.
		#
		set contents "$contents$scoretable\n"
	    }

	    no_SEND -
	    no_GRANT_ACCESS -
	    no_BLANK -
	    no_BAR -
	    no_LINE -
	    no_INPUT -
	    no_BOARD {

		# If update is `no' most instructions do
		# nothing.
		#
	    }

	    none_SEND -
	    none_GRANT_ACCESS -
	    none_BLANK -
	    none_BAR -
	    none_LINE -
	    none_INPUT -
	    none_BOARD {
		error "`$instruction' appears before\
		       OUTPUT instruction"
	    }

	    default { set_parameter $instruction }
	}
    }

    # End of instruction processing loop.  Reenable
    # interrupts.
    #
    make_signals_default
}

# Process command.
#
switch -- $command {

    start {

	# Check pid_file and delete it if its process
	# is no longer running.
	# 
	if { [file exists $pid_file] } {
	     set pid [read_file $pid_file]
	     set display [display_process_tree $pid]
	     if { [process_found $display] } {
		 puts "Previous makescoreboard still\
		       running:"
		 puts $display
		 exit 0
	     }
	     file delete -force $pid_file
	}

	# Run makescoreboard as a subprocess.
	#
        set pid [eval exec_in_background \
	              makescoreboard -start- 0 \
	              [lrange $argv 1 end]]

	# Wait for any output from first run.
	#
	set count 0
	while { ! [file exists $pid_file] } {
	    sleep 1
	    incr count
	    set display [display_process_tree $pid]
	    if { ! [process_found $display] } {
		error "makescoreboard -start- process\
		       died"
	    } elseif { $count > 60 } {
	        error "makescoreboard -start- did not\
		       write $pid_file in a timely\
		       manner"
	    }
	}
        exit 0
    }

    -start- {

	# Update scoreboard for the first time if no
	# errors.
	#
	if { $start_errors == 0 } {
	    update_scoreboard yes
	}

	# Set pid file.
	#
	write_file $pid_file [current_pid]

	# Resume a periodic intervals until we need
	# to reexecute `makescoreboard -start- ...'.
	#
	while { "yes" } {

	    if { $start_errors == 0 } {
		set force no
		sleep $scoreboard_interval
		if { [update_required \
			  $parameter_mtime_list] } {
		    set start_errors 1
		    break
		}
	    } else {
		set force yes
	    }

	    # If too many errors, do not catch error
	    # but let it create log and exit.
	    #
	    if { $start_errors >= 4 } {
	        update_scoreboard yes
	    } elseif { [catch { update_scoreboard \
	                            $force }] } {
		incr start_errors
		break
	    }
	    set start_errors 0
	}

	# Delete Scoreboard_PID file, execute
	# `makescoreboard -start- $start_errors ...',
	# and exit.
	#
	file delete -force $pid_file
	eval exec_in_background \
	     makescoreboard -start- \
	     $start_errors [lrange $argv 2 end]
	exit 0
	
    }

    status {

	if { [file exists $pid_file] } {
	     set pid [read_file $pid_file]
	     set display [display_process_tree $pid]
	     if { [process_found $display] } {
		 puts "Makescoreboard running:"
		 puts $display
	     } else {
		 puts "Makescoreboard has died:"
		 puts $display
		 puts ""
		 puts "Run `tracker' to find error\
		       logs, or look in"
		 puts "$judging_directory/log for\
		       unchecked errors."
	     }
	} else {
	    puts "All previous makescoreboards have\
	          been stopped."
	}
        exit 0
    }

    stop {
	if { [file exists $pid_file] } {
	     set pid [read_file $pid_file]
	     set display [display_process_tree $pid]
	     if { [process_found $display] } {
		 puts "Killing previous makescoreboard:"
		 puts $display

		 # Try to kill for up to 30 seconds,
		 # checking after each attempt for
		 # death.  The first 20 seconds are with
		 # HUP, the next 10 are with KILL.
		 #
		 set count 0
		 while { "true" } {
		     incr count 1
		     if { $count <= 20 } {
			 catch { signal_process_tree \
				 HUP $pid } out
			 puts $out
		     } elseif { $count <= 30 } {
			 catch { signal_process_tree \
				 KILL $pid } out
			 puts $out
		     } else {
			 puts "ERROR: Giving Up!"
			 exit 1
		     }
		     sleep 1
		     set display \
		         [display_process_tree $pid]
	             if { ! [process_found $display] } {
			 break
		     }
		 }
	     }
	     file delete -force $pid_file
	} else {
	    puts "No previous makescoreboard running."
	}
        exit 0
    }

    update {
	update_scoreboard yes
    }

    default {
    	error "Bad command: $command"
    }

}

exit 0

# Include common error catching code:
#
} caught_output
caught_error
