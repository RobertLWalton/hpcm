#!/bin/sh
#
# Recomputes the scoreboard every minute.
#
# File:		makescoreboard
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Wed Oct 17 10:04:11 EDT 2001
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: hc3 $
#   $Date: 2001/10/17 14:04:40 $
#   $RCSfile: makescoreboard,v $
#   $Revision: 1.9 $
#
# The next line starts tcl \
exec tcl "$0" "$@"

# Use tcl rather than tclsh so that `signal' is defined.

# Include common code and parameters:
#
set lib_directory "[file dirname $argv0]/../lib"
source $lib_directory/judging_common.tcl
set log_globally yes
catch {

set document "
makescoreboard \[-start | -status | -stop\] \\
               \[-email address\] \\
	       \[-parameters parameter-file\] \\
               \[interval\]

    This program makes the scoreboard putting it in the
    file contest_directory/scoreboard.1 and/or e-mailing
    it to a given address at periodic intervals.  The
    interval in seconds can be set by the interval argu-
    ment, but will default to 60 seconds.
    
    This program calls
    
	scorefinder | scoreboard \[parameters-file\]

    to recompute the scoreboard.
    
    If the contest_directory (usually juging_directory/
    contest) exists, this program recomputes the file:

    	contest_directory/scoreboard.1

    whenever the scoreboard is recomputed, by prepending
    the date and then the file

    	contest_directory/scoreboard.1head

    to the recomputed scoreboard.

    If the -email option is given, this program e-mails
    to the address given in the option the recomputed
    scoreboard with date prepended and the file
    
    	judging_directory/scoreboard.notes

    appended, whenever the scoreboard is recomputed.
    A copy of the mail sent is recorded in the file
    
    	judging_directory/scoreboard.mail

    As an example use of the -email option, if the email
    option is

      -email '\"password scoreboard\"<foo@bar>'

    and the .procmailrc file of account foo on machine
    bar contains

    :0 b:
    * ^To:.*password.*scoreboard
    | cat >public_html/private/password/scoreboard;\\
      chmod a+r public_html/private/password/scoreboard

    then the effect of sending the scoreboard to the
    email address will be to put a copy of the computed
    scoreboard, with optional trailing `scoreboard.
    notes', into the publicly readable file

      foo@bar:public_html/private/password/scoreboard

    Here `password' can be replaced by an actual pass-
    word that ensures people who do not know the pass-
    word cannot interfere with the system or see the
    scoreboard (if the `private' directory is not pub-
    licly readable).

    If the contest directory exists, then in that
    directory the files scoreboard.1, scoreboard.2,
    scoreboard.3, and scoreboard.4 represent the four
    pages of the scoreboard (latter pages are optional).
    All but the first page must be edited by hand, and
    can be used for extensive notes on the contest.
    For the email version of the scoreboard, the
    scoreboard.notes file appears after the scoreboard
    and can be used for extensive notes.

    Deleting an existing scoreboard.1 file, deleting an
    existing scoreboard.mail file when the -email option
    is given, our touching (see the UNIX touch(1)
    command) or changing any of the files:

    	$judging_parameters_file
	contest_directory/scoreboard.1head
	judging_directory/scoreboard.notes

    will cause this program to recompute the scoreboard
    when its next interval expires.

    Calling this program with an interval of 0 will
    cause this program to recompute the scoreboard just
    once and then exit immediately.

    This program ignores signals when recomputing the
    scoreboard, and terminates without error on a signal
    while the program is sleeping for the interval.

    If called with the -start option, this program
    creates a subprocess in which it calls itself with-
    out the -start option, and writes the process ID of
    that subprocess into the $scoreboard_pid_file file\
    		in
    the judging directory.  While doing this, this pro-
    gram outputs information about its progress (however
    the subprocess does not output anything).  But if
    the $scoreboard_pid_file already exists, AND the\
    		process
    ID it contains is valid, this program prints infor-
    mation about the ID'ed process and does nothing
    else.

    If called with the -stop option, this program does
    nothing but send kill signals to the process whose
    ID is listed in the $scoreboard_pid_file file, and
    then deletes the file.  While doing this it outputs
    information about its progress.

    If called with the -status option, this program just
    outputs information about the status of any process
    started by `makescoreboard -start'.

    In some contests the scoreboard is to be frozen
    during the last hour of the contest, to increase
    suspense.  To do this, use the -stop option, and
    then edit the scoreboard.1 file by hand to indicate
    the contest is frozen.  If using an emailed score-
    board, edit the scoreboard.mail file by hand and
    resend it using `/usr/bin/sendmail -io -t'.

    With the -start, -status, or -stop option this
    program does not log errors but writes them to the
    standard error.  This program does the same with
    program argument errors.  Otherwise, this program
    logs errors in the log directory."

set email_address ""
set parameters_file ""
set interval 60

proc process_arguments { argv } {

    global email_address parameters_file interval \
           document log_mode contest_directory

    while { [llength $argv] > 0 } {
        if { [lindex $argv 0] == "-email" } {
	    set email_address [lindex $argv 1]
	    set argv [lrange $argv 2 end]
	} elseif { [lindex $argv 0] == "-parameters" } {
	    set parameters_file [lindex $argv 1]
	    if { ! [file readable $parameters_file] } {
	        error "$parameters_file is not readable"
	    }
	    set argv [lrange $argv 2 end]
	} elseif { ! [catch { expr [lindex $argv 0] }] \
    	           && [lindex $argv 0] >= 0 } {
	    set interval [lindex $argv 0]
	    set argv [lrange $argv 1 end]
	} else {
	    puts $document
	    exit 1
	}
    }

    if { $email_address == "" \
         && ! [file isdirectory $contest_directory] } {
	set log_mode none
    	error "no email address and no contest\
	       directory"
    }
}

# Process any -start option.
#
if { $argc >= 1 && [lindex $argv 0] == "-start" } {

    # Check arguments for errors
    #
    set log_mode none
    process_arguments [lrange $argv 1 end]

    set spid $judging_directory/$scoreboard_pid_file
    if { [file exists $spid] } {
         set pid [read_file $spid]
	 set display [display_process_tree $pid]
	 if { ! [regexp -nocase \
	                {^no process .* exists} \
		        $display] } {
	     puts "Previous makescoreboard still\
	           running:"
	     puts $display
	     exit 0
	 }
	 file delete -force $spid
    }
    set pid [eval exec makescoreboard \
                       [lrange $argv 1 end] \
    	               >& /dev/null &]
    write_file $spid $pid
    exit 0
}

# Process any -status option.  No second argument
# may exist.
#
if { $argc == 1 && [lindex $argv 0] == "-status" } {
    set log_mode none
    set spid $judging_directory/$scoreboard_pid_file
    if { [file exists $spid] } {
         set pid [read_file $spid]
	 set display [display_process_tree $pid]
	 if { ! [regexp -nocase \
	                {^no process .* exists} \
		        $display] } {
	     puts "Makescoreboard running:"
	     puts $display
	 } else {
	     puts "Makescoreboard has died:"
	     puts $display
	     puts ""
	     puts "Run `tracker' to find error logs,\
	           or look in"
	     puts "$log_directory for unchecked\
	           errors."
	 }
    } else {
        puts "All previous makescoreboards have been\
	      stopped."
    }
    exit 0
}

# Process any -stop option.  No second argument
# may exist.
#
if { $argc == 1 && [lindex $argv 0] == "-stop" } {
    set log_mode none
    set spid $judging_directory/$scoreboard_pid_file
    if { [file exists $spid] } {
         set pid [read_file $spid]
	 set display [display_process_tree $pid]
	 if { ! [regexp -nocase \
	                {^no process .* exists} \
		        $display] } {
	     puts "Killing previous makescoreboard:"
	     puts $display
	     set count 0
	     while { "true" } {
		 incr count 1
		 if { $count <= 5 } {
		     catch { signal_process_tree \
		             HUP $pid } out
		     puts $out
		 } elseif { $count <= 10 } {
		     catch { signal_process_tree \
		             KILL $pid } out
		     puts $out
		 } else {
		     puts "ERROR: Giving Up!"
		     exit 1
		 }
		 sleep 1
		 set display [display_process_tree $pid]
		 if { [regexp -nocase \
			      {^no process .* exists} \
			      $display] } {
		     break
		 }
	     }
	 }
	 file delete -force $spid
    } else {
        puts "No previous makescoreboard running."
    }
    exit 0
}

# Process arguments
#
process_arguments $argv

# Abbreviate long file names.
#
set sbfile  $contest_directory/scoreboard.1
set sbhead  $contest_directory/scoreboard.1head
set sbnotes $judging_directory/scoreboard.notes
set sbmail  $judging_directory/scoreboard.mail
set jparam  $judging_directory/$judging_parameters_file

# Ignore signals except during sleep (see below).
#
make_signals_ignored

# Loop forever (unless interval == 0).
#
while { "yes" } {

    # Record the time we start computing the scoreboard.
    #
    set time [clock seconds]
    set date [clock format $time]

    # Clear score flag.  If its reset after we have
    # started to compute new scoreboard, then we need
    # to compute again.
    #
    clear_flag $score_flag_file

    # Collect scoreboard.
    #
    if { $parameters_file == "" } {
	catch { exec scorefinder | scoreboard } \
	      scoreboard
    } else {
	catch { exec scorefinder | \
		scoreboard $parameters_file } \
	      scoreboard
    }

    # If the scoreboard is empty, say so explicitly.
    #
    if { $scoreboard == "" } {
	set scoreboard "The scoreboard is currently\
	                EMPTY!  Nothing must have\
			happened yet."
    }

    # Handle case with email_address.
    #
    if { $email_address != "" } {

	# Compute email_scoreboard.
	#
	if { [file readable $sbnotes] } {
	    set tail [read_entire_file $sbnotes]
	    set email_scoreboard \
	        "To: $email_address

See notes below.           $date

=================== ===================\
=================== ===================
$scoreboard
=================== ===================\
=================== ===================

$tail"

	} else {
	    set email_scoreboard "To: $email_address

$date

$scoreboard"
	   
	}

	# Send the scoreboard to the email-address.
	#
	send_message $email_scoreboard

	# Delete and rewrite scoreboard.mail
	#
	if { [file exists $sbmail] } {
	    file delete -force $sbmail
	}
	write_file $sbmail $email_scoreboard
    }

    # Handle case with contest directory.
    #
    if { [file isdirectory $contest_directory] } {

	# Check for unwritable contest directory.
	#
	if { ! [file writable $contest_directory] } {
	    error "$contest_directory is not writable"
	}

	# Compute scoreboard_page.
	#
	if { [file readable $sbhead] } {
	    set head [read_entire_file $sbhead]
	    set scoreboard_page \
	        "$date

$head

=================== ===================\
=================== ===================
$scoreboard
=================== ===================\
=================== ==================="

	} else {
	    set scoreboard_page "$date

$scoreboard"
	   
	}

	# Delete and rewrite scoreboard.1
	#
	if { [file exists $sbfile] } {
	    file delete -force $sbfile
	}
	write_file $sbfile $scoreboard_page

	# Make scoreboard.1 readable by everyone.
	#
	grant_access $sbfile

    }

    # If interval == 0 do NOT loop indefinitely.
    #
    if { $interval == 0 } break

    # Sleep waiting for something to happen that
    # indicates scoreboard needs recomputing.
    #
    while { "yes" } {

        make_signals_default
	sleep $interval
	make_signals_ignored

    	if { [test_flag $score_flag_file] } break
	if { [file isdirectory $contest_directory]
	     && ! [file exists $sbfile] } break
	if { $email_address != ""
	     && ! [file exists $sbmail] } break
	if { [file exists $sbhead] \
	     && $time < [file mtime $sbhead] } break
	if { [file exists $sbnotes] \
	     && $time < [file mtime $sbnotes] } break
	if { $time < [file mtime $jparam] } break
    }
}

exit 0

# Include common error catching code:
#
} caught_output
caught_error
