#! /bin/sh
#
# Test problem code.
#
# File:		testproblems
# Author:	Bob Walton <walton@deas.harvard.edu>
# Date:		Tue Dec 12 09:48:58 EST 2006
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: walton $
#   $Date: 2006/12/12 14:58:44 $
#   $RCSfile: testproblems,v $
#   $Revision: 1.22 $
#
# The next line starts tcl \
exec tcl "$0" "$@"

set lib_directory "[file dirname $argv0]/../lib"
set judging_directory .
source $lib_directory/judging_common.tcl
set log_mode none
catch {

set document "
testproblems \[-keep\] directory ...
testproblems
testproblems -

    The command with no arguments is equivalent to

    	testproblems .

    The command with just the argument `-' is equivalent
    to

    	testproblems -keep .

    This program runs:

    		make clean
		make
		diff *.out *.test
		make clean

    in each directory.  It saves the diff outputs in
    addition to outputting them, and then plays back
    all the saved output at the end of this program's
    execution.  Errors made during the above run are
    also played back.
    
    Before doing the above, this program uses any
    problem_make_files value in any problem .rc file in
    a directory to make or remake files in the direc-
    tory, and after finishing all other operations in
    the directory, this program removes these files.  If
    these files exist when this program is run, they are
    deleted and remade.

    The -keep option suppresses the final `make clean'
    and the removal of files.

    If a directory contains .jin files, then the pro-
    gram runs

    		make clean

    once followed by

    		jfilter -v f.jin f.in >& f.in#
		ln -s f.in problem.in
		make
		mv problem.out f.out
		diff f.out f.test
		make clean
		rm f.in f.in# problem.in

    for each f.jin file.  The -keep option suppresses
    the final `make clean' and `rm'.

    If a directory contains multiple .in files, the
    same thing is done as for .jin files, but jfilter
    is not run and f.in is not removed.  If a directory
    contains just problem.jin, the same thing is done
    without the linking of problem.in or the moving
    of problem.out (here f = problem).

    If a directory contains both f.in and f.jin, then

    		jfilter -v f.jin f.in+ >& f.in#

    is executed and f.in and f.in+ are diff'ed, instead
    of making f.in from f.jin.

    If after the above, Scoring_Filter does not exist,

	jfilter -v f.jin f.out f.jout >& f.jout#
	rm f.jout f.jout#

    is execute if f.jin exists.  But if Scoring_Filter
    does exist then

	Scoring_Filter f.in < f.out > f.fout
	jfilter -v f.jin f.fout f.jfout >& f.jfout#
	rm f.fout f.jfout f.jfout#

    is executed, with the jfilter execution and f.jfout
    removal suppressed if f.jin does not exist.

    If f.jout (f.fout, f.jfout) is made and f.jtest
    (f.ftest, f.jftest) exists, these two files are
    diff'ed, and if different the differences are
    reported.  If f.jout# or f.jfout# are made, they
    are similarly diff'ed with f.jin#.

    All `rm' commands are suppressed by -keep.  All
    `make clean' commands except the initial one in
    each directory are suppressed by -keep.
    
    If a non-directory is given the program, or if a
    directory with no Makefile is given, the program
    merely notes this in the output."

# Process options.
#
if { [llength $argv] == 0 } {
    set argv {.}
} elseif {    [llength $argv] == 1 \
           && [lindex $argv 0] == "-" } {
    set argv {-keep .}
}
set keep 0
while { 1 } {
    switch -glob -- [lindex $argv 0] {
    -doc* {
	puts $document
	exit 1
    }
    -keep { set keep 1 }
    default break
    }
    set argv [lrange $argv 1 end]
}

set tmp /tmp/testproblems[pid]
file delete -force -- $tmp
set diff_files {}

# Arrange to always delete $tmp at end.
#
signal error {HUP INT QUIT TERM}

catch {

set wd [pwd]
set fd [open $tmp w]

proc diff { file1 file2 } {
    global problem fd diff_files
    puts "diff $file1 $file2"
    catch {
	set diffs [exec diff $file1 $file2]
	  } diffs
    if { [string trim $diffs] != "" } {
	if {    $file1 != "$problem.out" } {
	    set diffs \
		"========== $file1:\n$diffs"
	}
	puts $fd $diffs
	puts $diffs
	lappend diff_files \
	        [list $problem $file1 $file2]
    }
}

# Read .rc file to possibly set any problem_make_files
# global variable.
#
proc read_rc_file { file problem } {
    global PROBLEM EXTENSION OPTIONS \
	   problem_make_files
    set PROBLEM $problem
    set EXTENSION UNDEFINED
    set OPTIONS UNDEFINED
    source_file $file
}

foreach x $argv {

    if { ! [file isdirectory $x] } {
        puts "====================\
	      $x is not a directory"
	continue
    }

    if { ! [file exists $x/Makefile] } {
	puts "====================\
	      $x/Makefile does not exist"
	continue
    }

    puts $fd "==================== $x:"
    puts -nonewline "===================="
    puts -nonewline "===================="
    puts -nonewline "===================="
    puts " $x:"

    cd $x
    if { [catch {

	set problem [file tail [pwd]]

	# Do initial clean.
	#
	set type none
	catch { set type [file type $problem.in] }
	if { $type == "link" } {
	    file delete $problem.in
	}
	exec make clean >@ stdout 2>@ stderr

	# List of files to be deleted at end.
	#
	set made ""

	# Find any .rc file and execute any problem_
	# make_files instructions.
	#
	if { [file exists $problem.rc] } {

	    catch { unset problem_make_files }
	    read_rc_file $problem.rc $problem
	    if { [info exists problem_make_files] } {
	        set make_files $problem_make_files
	    } else {
	        set make_files {}
	    }

	    if { [catch { llength $make_files }] } {
	        error "$problem.rc problem_make_files\
		       value is not a TCL\
		       list:\n    $make_files"
	    }
	    foreach instruction $make_files {
		if { [catch { llength $instruction }] \
		   } {
		    error "$problem.rc problem_make_files\
			   instruction is not a TCL\
			   list:\n    $instruction"
		}
		set file [lindex $instruction 0]
		if { $file == "" } {
		    error "$problem.rc problem_make_files\
			   instruction has empty file\
			   name:\n    $instruction"
		}
		lappend made $file
	    }

	    puts "(re)making $made"
	    eval file delete -force -- $made
	    execute_makes $make_files . \
	                  "problem_make_files value in\
			   $problem.rc"
	}

	# Make sure that "problem" is the first
	# value of f if it is a value of f.
	#
	set done ""
	foreach file [lsort [glob $problem.in \
	                          $problem.jin \
			          *.in *.jin]] {
	    set f [file rootname $file]
	    if { [lcontain $done $f] } continue
	    lappend done $f
	    if { $f != $problem } {
	        puts "========== $file:"
	    }
	    file delete -force -- $f.in#
	    if { ! [file exists $f.in] } {
	        puts "jfilter -v $f.jin $f.in >& $f.in#"
	        exec jfilter -v $f.jin $f.in >& $f.in#
		lappend made $f.in $f.in#
	    } elseif { [file exists $f.jin] } {
	        file delete -force -- $f.in+
	        puts "jfilter -v $f.jin $f.in+\
		      >& $f.in#"
	        exec jfilter -v $f.jin $f.in+ >& $f.in#
		lappend made $f.in+ $f.in#
		diff $f.in $f.in+
	    }
	    if { $f != $problem } {
	        exec ln -s $f.in $problem.in
	    }
	    set make_error \
	        [catch { exec make >@ stdout } \
		       mout]
	    if { $make_error } {
	        if { $f != $problem } {
		    puts $fd "========== making $f.out:"
		    file delete $problem.in
		}
		puts $fd $mout
		puts $mout
		continue
	    }
	    if { $f != $problem } {
	        file rename $problem.out $f.out
		lappend made $f.out
		file delete $problem.in
	    }
	    diff $f.out $f.test

	    if { [file exists Scoring_Filter] } {
		puts "Scoring_Filter $f.in\
		      < $f.out > $f.fout"
		exec Scoring_Filter $f.in \
		     < $f.out > $f.fout
		lappend made $f.fout
		if { [file exists $f.ftest] } {
		    diff $f.fout $f.ftest
		}
		if { [file exists $f.jin] } {
		    file delete -force -- $f.jfout#
		    puts "jfilter -v\
			  $f.jin $f.fout $f.jfout\
			  >& $f.jfout#"
		    exec jfilter -v \
			 $f.jin $f.fout $f.jfout \
			 >& $f.jfout#
		    lappend made $f.jfout $f.jfout#
		    if { [file exists $f.jftest] } {
			diff $f.jfout $f.jftest
		    }
		    diff $f.in# $f.jfout#
		}
	    } elseif { [file exists $f.jin] } {
		file delete -force -- $f.jout#
		puts "jfilter -v $f.jin $f.out\
			      $f.jout >& $f.jout#"
		exec jfilter -v $f.jin $f.out \
		     $f.jout >& $f.jout#
		lappend made $f.jout $f.jout#
		if { [file exists $f.jtest] } {
		    diff $f.jout $f.jtest
		}
		diff $f.in# $f.jout#
	    }

	    if { ! $keep } {
	        exec make clean >@ stdout 2>@ stderr
	    }
	}
	if { ! $keep && [llength $made] > 0 } {
	    puts "rm -f $made"
	    eval file delete -force -- $made
	}
    } out] } {
        puts $out
	puts $fd $out
    }
    cd $wd
}
close $fd

puts ""
puts "******************** SUMMARY:"
exec cat $tmp >@ stdout
file delete $tmp
if { [llength $diff_files] > 0 } {
    puts "******************** \
          FILES THAT ARE DIFFERENT:"
    set p ""
    foreach item $diff_files {
        set problem [lindex $item 0]
        set file1 [lindex $item 1]
        set file2 [lindex $item 2]
	if { $p != $problem } {
	    puts "  in $problem:"
	    set p $problem
	}
	puts [format {%38s != %-38s} $file1 $file2]
    }
}
exit 0

} out
file delete $tmp
error $out $errorInfo $errorCode

} caught_output
caught_error
