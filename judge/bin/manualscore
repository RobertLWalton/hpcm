#! /bin/sh -f
#
# Manually examine and possibly modify the judge.score
# file in a submission directory
#
# File:		manualscore
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Wed Aug 16 07:06:59 EDT 2000
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: acm-cont $
#   $Date: 2000/08/21 03:40:26 $
#   $RCSfile: manualscore,v $
#   $Revision: 1.4 $
#
# The next line starts tcl \
exec tcl "$0" "$@"

# Use tcl rather than tclsh so that `signal' is defined.

# Include common code and parameters:
#
set lib_directory "[file dirname $argv0]/../lib"
source "$lib_directory/judging_common.tcl"
catch {

set document "
cd submission_directory; manualscore

    Given the submission directory as the current dir-
    ectory, and given that this directory contains an
    $auto_score_file, this program lets a person examine
    the files in the directory and select a manual score
    that is written into the $manual_score_file and
    sent in an email to the submitter."

if { $argc != 0 } {
    puts $document
    exit 1
}

set subject [find_subject]

if { ! [regexp {^submit (.*)$} all submitted_file] } {
    error "Bad subject: $subject"
}

set submitted_program \
    [file rootname $submitted_program]
set submitted_extension \
    [file extension $submitted_program]
set output_file 	"${program_name}.out"
set error_file  	"${program_name}.err"
set compiler_error_file	"${program_name}.cerr"
set test_file   	"${program_name}.test"
set diff_file   	"${program_name}.diff"
set bdiff_file   	"${program_name}.bdiff"

if { ! [file readable $auto_score_file] } {
    puts "No $auto_score_file; Executing autojudge"
    exec autojudge
}

if { [file exists $reply_file] } }
    puts "$reply_file exists; Terminating manual\
          scoring"
    exit 0
}

set auto_score [getfile $auto_score_file]

if { $auto_score == "Completely Correct" } {
    puts "$auto_score; Terminating manual scoring"
    exit 0
}

set From_line [find_From_line]

puts "Score $From_line"
puts "Auto Score: $auto_score"

if { [file exists $compiler_error_file] } {
    set last_file $compiler_error_file
} elseif { [file exists $error_file } {
    set last_file $error_file
} else {
    set last_file [make_bdiff]
}

while { "yes" } {
    putfile $last_file stdout 10
    puts -nonewline "
------------------------------------------------------
d = view .diff      b = view .bdiff      o = view .out
t = view .test      e = view .err        p = view $submitted_extension
a = verify auto score                    c = view .cerr
r = reject auto score			 x = exit

> "


# Include common error catching code:
#
} caught_output
caught_error

	    echo ""
	    echo Enter Score
	    echo "    s = syntax error"
	    echo "    x = program crashed"
	    echo "    t = too much time, memory," \
				"or output"
	    echo "    i = incorrect output"
	    echo "    ic = incomplete output"
	    echo "    f = formating error"
	    echo "    cc = completely correct"
	    echo "    d = defer scoring"
	    echo -n "Score: "
	    switch ($<)
	    case s:
		set score="Syntax Error"
		break
	    case x:
		set score="Program Crashed"
		break
	    case t:
		set score="Too Much Time, Memory, or Output"
		break
	    case i:
		set score="Incorrect Output"
		break
	    case ic:
		set score="Incomplete Output"
		break
	    case f:
		set score="Formating Error"
		break
	    case cc:
		set score="Completely Correct"
		break
	    case d:
		set score="Defer Scoring"
		break
	    case test:
		echo ===================== \
		     $program.test \
		     ===================== 
		more -20 $program.test
		echo ===================== \
		     =====================
		continue
	    case out:
		echo ===================== \
		     $program.out \
		     ===================== 
		more -20 $program.out
		echo ===================== \
		     =====================
		continue
	    case diff:
		echo ===================== \
		     $program.diff \
		     ===================== 
		more -20 $program.diff
		echo ===================== \
		     =====================
		continue
	    case bdiff:
		echo ===================== \
		     $program.bdiff \
		     ===================== 
		more -20 $program.bdiff
		echo ===================== \
		     =====================
		continue
	    case src:
		view $src
		continue
	    default: 
		echo "Could not understand; try again."
		continue
	    endsw
	end

	while (1)
	    set from=`pwd | sed -e 's|.*/From \([^ /]*\) [^/]*$|\1|' `
	    echo ""
	    echo "Do you really want to score" \
		 "this as: ${score}"
	    if ( "$score" != "Defer Scoring" ) then
		echo "    and mail it to ${from}?"
	    endif
	    echo -n "Yes or no: "
	    switch ($<)
	    case yes:
		if ( "$score" != "Defer Scoring" ) then
		    echo ""
		    echo "Making $program.score"
		    echo "$score" > $program.score
		    echo "Deleting $program"
		    rm -f $program
		    echo "Executing mailscore $from"
		    echo ""
		    mailscore "$from"
		    echo ""
		else
		    echo "NOT making $program.score"
		endif
		break
	    case no:
		break
	    default:
		echo "Could not understand; try again."
		continue
	    endsw
	end
endif


# Include common error catching code:
#
} caught_output
caught_error
