#!/bin/sh
#
# Make judge's judging document.
#
# File:		judging
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Wed Nov 14 22:10:34 EST 2001
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: hc3 $
#   $Date: 2001/11/15 03:08:07 $
#   $RCSfile: judging,v $
#   $Revision: 1.8 $
#
# The next line starts tcl \
exec tcl "$0" "$@"

# Use tcl rather than tclsh so that `signal' is defined.

# Include common code and parameters:
#
set lib_directory "[file dirname $argv0]/../lib"
source $lib_directory/judging_common.tcl
set log_mode none
catch {

puts "
		     HPCM Judging
		     ---- -------

	Making Judging Accounts
	Making a Contest
	Judging a Formal Contest
	Auxilary Judging
	Formal Contest Emergencies
	Judging non-Formal Contests

Making Judging Accounts
------ ------- --------

A judging account is a normal user account with the
following special considerations.

If the judging account has its own group, the umask
should be set by

	umask 27

which disables access except by the judging account and
its group, and disables write access by the judging
group.  This permits auxilary judging accounts (see
below).

If the judging account has a shared group, the umask
should be set by

	umask 77

Autologout should be disabled if csh or tcsh is being
used by

	unset autologout

It is a good idea to capture ALL email arriving at the
judging account, just in case there are questions of
lost mail.  This can be done by putting

    :0 c:
    hpcm_mbox

at the beginning of the ~/.procmailrc file, on UNIX
systems that use procmail.  On UNIX systems that use
forwarding, the ~/.forward file can be set to

    \JJJ, /home/JJJ/hpcm_mbox

to store all mail in ~/hpcm_mbox, where JJJ is the
judging account name and /home/JJJ is the home directory
of that account.

If you are using csh or tcsh, you may want to turn on
mail notification by using

	set mail=(5 /var/spool/mail/\$USER)

This checks every 5 seconds for new mail and prints a
message before the shell prompt if there is such mail.
Note that because of the use of .procmailrc by the
HPCM submission system, email sent to the judges by
hpcm_sendmail will not be put in the judge's normal
mailbox, and will not trigger this `new mail' message.
However, contestants occassionally fail to follow the
instruction to use hpcm_sendmail, and instead send mail
directly to the judge.

If judges may want to use facilities that are normally
used by contestants or by auxilary judges, then it will
be necessary to symbolically link ~/.hpcm_contest to
the contest directory.  E.g., use

    ln -s ~/contest_XXX ~/.hpcm_contest

where XXX is the name of the contest.  Note that if the
judging directory is being used for several contests,
this will only work for one of these contests as a time.

Hpcm must be installed in the judging directory: see
the separate document `Installing HPCM'.  One typically
installs HPCM in the `~/hpcm' directory and puts the
`~/hpcm/judge/bin' directory in the PATH of the judging
account.

Making a Contest
------ - -------

One judging account can have many different contests.

To make a new contest, select the contest type TTT you
want, and follow the instructions in

    hpcm/examples/TTT_contest/Makefile


Judging a Formal Contest
------- - ------ -------

You need sufficient manpower and communication to handle
emergencies.  In our limited experience, a minor emer-
gency happens about every other contest.  You need a
person in reserve to troubleshoot emergencies, and you
need a clear line of communication to the contestants.

If you are running a distributed contest with a central
judge, you the site managers should check in by calling
the judge before the contest, to be sure they know the
phone number and communications are working.  Since site
managers tend to move around, it is helpful if they
have cell phones, cordless phones, or beepers, or if
some other emergency mechanism of communication is
arranged, such as having the judge send a message to the
site printer.

You should review Formal Contest Emergencies below
before judging a formal contest.

After setting up the contest, one should do the
following:

1.  Run `startcontest' when the contest starts to make
    the problems gettable by the contestants using
    `hpcm_get'.

2.  Check submissions and queries by running the
    `tracker' program.  This program finds submissions
    (including queries) that you have not yet responded
    to.  One can also use the `lookat' program to check
    up on things you have already responded to.


Auxilary Judging
-------- -------

An auxilary judging account is an account that can read
files in the main judging account but cannot write
files.
 
To set up auxilary judging accounts, be sure the main
judging account has its own private UNIX group.  Then
add the auxilary account to this group.  In some UNIX
systems (RedHat Linux), this is done by root executing

	gpasswd -a auxilary-account judging-group

Next, change the statement `source ~/...' near the
beginning of the hpcm_judging.rc file in the judging
directory to `source /home/JJJ/...', where JJJ is the
name of the main judging account.  This is because the
hpcm_judging.rc file is going to be sourced by auxilary
judging accounts for which `~' will mean the wrong
thing.

One must add the main judging account's hpcm/judge/bin
directory to the PATH of the auxilary account.  This
might be done by putting

	setenv PATH \"/home/JJJ/hpcm/judge/bin:\$PATH\"

in the .cshrc file of the auxilary account, for example,
where JJJ is the name of the main judging account.

Like the judging account, one should turn off auto-
logout, set an appropriate umask (77 will do), and set
the shell for new mail notification.

In the auxilary account you need to link ~/.hpcm_contest
to the contest directory in the main judging account,
JJJ.  This can be done by

	ln -s /home/JJJ/contest* ~/.hpcm_contest

This is needed to enable the `sq' command in manual-
reply: see below.

So that the auxilarly judges can quickly find the
judging directory, you may want to link it symbolically
to ~/judge (HPCM software does not use this).  You can
do this by

	ln -s /home/JJJ/judging* ~/judge


During the contest an auxilary judge can examine sub-
missions using the `lookat' command to invoke `manual-
reply'.  In `manualreply', the auxilary judge can use
the `sq' command to send a query or comment to the
main contest judge about a particular submission.  The
main judge can use the `xq' command to examine this
submission.

The auxilary judge can also send a query or comment to
the main judge by editing the file foo and executing

	~/.hpcm_contest/bin/hpcm_sendmail <foo

In these cases the main judge will see the query or
comment via the same process as the main judge sees
queries from contestants, and will respond by the same
process, with the response being email to the auxilary
judge.


Formal Contest Emergencies
------ ------- -----------

Minor emergencies happen about every other contest, in
our limited experience.  So you need to prepare.

In order to prepare for formal emergencies, be sure
you have manpower and means to contact the teams.  If
you are working at one site, have an extra person on
hand.  If you are working with distributed sites, be
sure you have phone numbers for the site managers, and
vice versa, and the phones are tested before the contest
begins.  You may want site managers, who tend to roam,
have cell phones, cordless phones, or beepers (which
could be borrowed).  It may suffice to have a mechanism
whereby the main judge can print a message for site
managers on the site printers.

To prepare to judge an formal contest that you really
want to work, you should read the documentation and
in some cases the code of the very few programs that are
involved in actual judging.  These are:

    receivemail		Read documentation.

    dispatchmail	Read documentation and code.
    			Code is in hpcm/judge/bin.

    autojudge		Read documentation and code.
    			Code is in hpcm/judge/bin.

    autoscore		Read documention and code.
    			Code is in hpcm/judge/bin.

    scorediff		Read documentation.


Some of these programs call procedures in

	hcpm/judge/lib/judging_common.tcl
	hcpm/judge/lib/scoring_common.tcl
	
and use parameters or procedures defined in

	hpcm/judge/lib/hpcm_judging.rc
	
Read the documentation in these files as necessary.
It should not be necessary to read code.

Particular attention should be paid to being sure that
email works on the day of the contest.  Two solutions
are: have everyone on one machine, so email is internal
to that machine; or have an email guru available to fix
problems with email.

The following is an example emergency from BOSPRE 2001.
It illustrates what can happen and how to fix the
situation.

The first two hours of the contest ran normally, but
then the operating system (Linux RedHat 6.1) started to
send out error messages saying there were too many open
files, and processes started dying spontaneously.  The
judge as concerned since he though this kind of problem
had been solved by UNIX kernels and would not appear.

The contest was a distributed contest, with a judge at
one school and two sites with contestants at other
schools.  The judge and one of the site managers talked
by phone promptly, and the judge asked the site manager
to have contestants clean up any excess processes they
might have.  The judge also posted a notice at the top
of the scoreboard (which contestants can put in one of
their winodws), which asked contestants to be careful
about how many processes they ran.  With the help of
these actions, the problem went away within about 10
minutes, though there was aftermath which we will
describe below.

One piece of good news is that the judge had a backup
person available who had some rough knowledge of Linux
OS issues.  He found, after a few tens of minutes of
research, that Linux has a bound on the total number
of open files in /proc/sys/fs/file-max that can be set
by root using `echo >/proc/sys/fs/file-max XXX'.  The
normal setting was 4096, which seemed to be rather
large enough.  There are also three numbers in the
read-only file /proc/sys/fs/file-nr, the middle of which
is supposed to be the current number of open files.

The backup person also know about the lsof command, that
lists all the open files in the system, when run by
root.  By using this command in conjuction with grep,
the judge and backup were able to figure out how many
open files each contestant account had.  By successive
monitoring, one team was identified that seemed to
increasing their number of open files by 200 per 10
minutes.  This was done after teams had been asked to
watch their processes.  The site manager for that team
was contacted and asked to work with the team to reduce
their number of open files.  There were no subsequent
operating system problems with the contest.

However, because processes died spontaneously, some
submissions were not handled correctly, and fixup was
required.  The contestants were told to resubmit,
but the existing problematic submissions were also fixed
using a rough knowledge of how the `autojudge' program
works.

One common problem that occurred in this case is erron-
eous scores of `Syntax Error'.  This error occurs when
the `autojudge' program cannot make an executable binary
from the submitted source.  In the case of BOSPRE 2001,
this happened because files could not be opened, but in
BOSPRE 2000 this also happened but for a different rea-
son: the judge's account at the beginning of BOSPRE 2000
had the wrong JAVA compiler installed, and this wrong
compiler lacked an important part of the subroutine
library.

The `tracker' program selects submissions with the
score of `Syntax Error' for review (if the scoring mode
is `auto+manual', as it was in BOSPRE 2001).  The gener-
al recovery procedure for this situation is to use the
`sh' command of `manualreply' to start a shell in the
submission directory, use the shell `rm' command to re-
move the submission source file (the .c, .cc, or .java
file), and then run the `autojudge' program.  Deleting
the source file is necessary to cause `autojudge' to
go through all the steps of recomputing the auto score.
Note, however, if the scoring mode is `auto+manual',
this results in sending a second auto score to the
contestant.  One then uses the shell `exit' command to
return to `manualreply'.  After manual review and con-
firmation of the auto score, the `er' and `sr' commands
in manual reply may be used to send an explanation to
the contestant, stating why the auto score was recom-
puted.

Note that the `lookat' program can also be used to
display some information about submissions in a rough
time range (by using `DATE::<regular-expression>'),
and double check that everything has been fixed up.


Judging non-Formal Contests
------- ---------- --------

Non-formal contests are usually judged automatically.
The `tracker' program does not work for such contests,
and if you want to examine submissions, you must use the
`lookat' program.  Queries are forwarded to the email
address in the hpcm_judging.rc `reply_manager' variable,
if that is set, so the judge can have queries forwarded
to the judge's usual email address.
"

exit 0

# Include common error catching code:
#
} caught_output
caught_error
