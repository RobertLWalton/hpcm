#!/bin/sh
#
# Make judge's judging document.
#
# File:		judging
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Mon Aug 29 08:08:56 EDT 2005
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: hc3 $
#   $Date: 2005/08/29 12:04:14 $
#   $RCSfile: judging,v $
#   $Revision: 1.19 $
#
# The next line starts tcl \
exec tcl "$0" "$@"

# Use tcl rather than tclsh so that `signal' is defined.

# Include common code and parameters:
#
set lib_directory "[file dirname $argv0]/../lib"
source $lib_directory/judging_common.tcl
set log_mode none
catch {

puts "
		     HPCM Judging
		     ---- -------

	Making Judging Accounts
	Making a Contest
	Judging a Formal Contest
	Auxiliary Judging
	Fixing Autojudging Difficulties
	Formal Contest Emergencies
	Judging non-Formal Contests





Making Judging Accounts
------ ------- --------

A judging account is a normal user account with the
following special considerations.

If the judging account has its own group, the umask
should be set by

	umask 27

which disables access except by the judging account and
its group, and disables write access by the judging
group.  This permits auxiliary judging accounts (see
below).

If the judging account has a shared group, the umask
should be set by

	umask 77

If you plan to use auxiliary judging accounts, you
should execute

	chmod g+s ~

to force all file groups to be the main judging group.

Autologout should be disabled if csh or tcsh is being
used by

	unset autologout

It is a good idea to capture ALL email arriving at the
judging account, just in case there are questions of
lost mail.  This can be done by putting

    :0 c:
    hpcm_mbox

at the beginning of the ~/.procmailrc file, on UNIX
systems that use procmail.  On UNIX systems that use
forwarding, the ~/.forward file can be set to

    \\JJJ, /home/JJJ/hpcm_mbox

to store all mail in ~/hpcm_mbox, where JJJ is the
judging account name and /home/JJJ is the home directory
of that account.  A better alternative is to add

    \"| exec /usr/bin/procmail\"

as this will apply the procmail program to incoming mail
(use `which procmail' to adjust the name of the direc-
tory containing the procmail program), and permit the
.procmailrc file to be used.

If you are using csh or tcsh, you may want to turn on
mail notification by using

	set mail=(5 /var/spool/mail/\$USER)

This checks every 5 seconds for new mail and prints a
message before the shell prompt if there is such mail.
Note that because of the use of .procmailrc by the
HPCM submission system, email sent to the judges by
hpcm_sendmail will not be put in the judge's normal
mailbox, and will not trigger this `new mail' message.
However, contestants occasionally fail to follow the
instruction to use hpcm_sendmail, and instead send mail
directly to the judge.

If judges want to execute programs in hpcm/contestant/
bin that are available to contestants, then is neces-
sary to symbolically link ~/.hpcm_contest to the contest
directory.  E.g., use

    ln -s ~/contest_XXX ~/.hpcm_contest

where XXX is the name of the contest.  However, usually
judge's do not need to execute these programs, so this
should not be necessary.  Note that if the judging
account is being used for several contests, this will
only work for one contest at a time.

Hpcm must be installed in the judging account: see the
separate document `Installing HPCM'.  One typically
installs HPCM in the `~/hpcm' directory and puts the
`~/hpcm/judge/bin' directory in the PATH of the judging
account.

Making a Contest
------ - -------

One judging account can have many different contests.

To make a new contest, select the contest type TTT you
want, and follow the instructions in

    hpcm/examples/TTT_contest/Makefile

Note that these instructions include ways of testing
the new contest.


Judging a Formal Contest
------- - ------ -------

You need sufficient manpower and communication to handle
emergencies.  In our limited experience, a minor emer-
gency happens about every other contest.  You need a
person in reserve to troubleshoot emergencies, and you
need a clear line of communication to the contestants.

If you are running a distributed contest with a central
judge, the site managers should check in by calling you
judge before the contest, to be sure they know the phone
numbers and communications are working.  Since site man-
agers tend to move around, it is helpful if they have
cell phones, cordless phones, or beepers, or if some
other emergency mechanism of communication is arranged,
such as having the judge send a message to the site
printer using the jprint command.

You should review Formal Contest Emergencies and Backup
Plans below before judging a formal contest.

Before judging a contest you should practice a bit with
the `manualreply' program.  One way to do this is to
go to the judging directory and `make test' to run the
tests in the

    hpcm/examples/TTT_contest/Makefile

file, and then before cleaning up (by `make test_clean')
run
	lookat 'SUBJECT & AUTO'

to see the results and dispatch manualreply.  If the
scoring mode is not `auto' you can also run `tracker'.

After setting up the contest, one should do the
following:

1.  Run `startcontest' when the contest starts to make
    the problems gettable by the contestants using
    `hpcm_get'.  Running `startcontest delay' before
    a formal contest starts will start a background
    program that will run `startcontest' when the
    contest start time arrives.

2.  Check submissions and queries by running the
    `tracker' program.  This program finds submissions
    (including queries) that you have not yet responded
    to.  One can also use the `lookat' program to check
    up on things you have already responded to.

At the end of a formal contest one must produce a final
scoreboard.  This is mostly done for you in the file

	~/judging*/contest/scoreboard.final

However this file may need some fixup.

First, the file is created only once, and may have as-
terisks in it because it is created before the judge can
manually review submissions made just before the stop
time.  The fix is to manually review the submissions
first, then delete the scoreboard.final file and
either wait for the file to reappear or execute

	cd ~/judging*
	make update_scoreboard

to make the file reappear.  After this is done, it is
common practice to edit the scoreboard.final file so the
names of teams that did not get many problems do not
appear.  Then the file can be printed (e.g. by jprint)
and distributed to all the contestants at a post contest
meeting.



Auxiliary Judging
--------- -------

An auxiliary judging account is an account that can read
files in the main judging account but cannot write
files.
 
To set up auxiliary judging accounts, be sure the main
judging account has its own private UNIX group.  Then
add the auxiliary account to this group.  In some UNIX
systems (RedHat Linux), this is done by root executing

	gpasswd -a auxiliary-account judging-group

You need to set the permissions on /home/JJJ/ files
to include group permissions.  The following commands
executed in the JJJ account can do this:

    find ~ -perm -u+r -exec chmod g+r {} \\;
    find ~ -perm -u+x -exec chmod g+x {} \\;

These commands will be executed automatically if you
do the following in the JJJ account:

    cd ~/hpcm
    make auxiliary

This also updates any hpcm installation.

Next, change the statement `source ~/...' near the
beginning of the hpcm_judging.rc file in the judging
directory to `source /home/JJJ/...', where JJJ is the
name of the main judging account.  This is because the
hpcm_judging.rc file is going to be sourced by auxiliary
judging accounts for which `~' will mean the wrong
thing.

One must add the main judging account's hpcm/judge/bin
directory to the PATH of the auxiliary account.  This
might be done by putting

	setenv PATH \"/home/JJJ/hpcm/judge/bin:\$PATH\"

in the .cshrc file of the auxiliary account, for
example, where JJJ is the name of the main judging
account.

Like the main judging account, auxiliary accounts should
turn off autologout, set the umask to 27, and set the
shell for new mail notification.

So that the auxiliary judges can quickly find the
judge's directory, you may want to link it symbolically
to ~/judge (HPCM software does not use this).  You can
do this by executing in the auxiliary account:

	ln -s /home/JJJ ~/judge

Then the auxiliary judge can get to the contest judging
directory by

	cd ~/judge/judging*

Another application is for the auxiliary judge to get to
the HPCM documentation directory by

	cd ~/judge/hpcm/judge/doc

During the contest an auxiliary judge can examine sub-
missions using the `lookat' command to invoke `manual-
reply'.  In `manualreply', the auxiliary judge can use
the `sq' command to send a query or comment to the
main contest judge about a particular submission.  The
main judge can use the `xq' command to examine this
submission.

The auxiliary judge can also send a query or comment to
the main judge by editing the file ~/foo and executing

	hpcm_sendmail <~/foo

from within the contest judging directory subtree.  It
is VERY IMPORTANT here that the hpcm_sendmail program be
invoked from within the contest judging directory sub-
tree, as this command when run by a judge differs from
the command of the same name invoked by a contestant in
how it finds the contest directory.

When hpcm_sendmail is used by any judge, the main judge
will see the query or comment via the same process as
the main judge sees queries from contestants, and will
respond by the same process, with the response being
email to the query sending judge.

The `sq' command in manualreply (see below) also uses
the judge's hpcm_sendmail command to send a query to the
main judge.



Fixing Autojudging Difficulties
------ ----------- ------------

Even if you are doing `manual only' judging (which is
uncommon), the autojudge is run by the system to get a
score before that is manually reviewed.  The autojudge
typically works very well as long at the contestant's
program runs the same in the judge's environment as it
does in the contestant's environment.  With C and C++
under RedHat Linux, this has never been a problem, but
JAVA is another matter.

The most common difficulty is having too small limits on
data and stack sizes.  When this happens, a JAVA program
tends to die before it starts without producing an error
message.  A hint that this has happened is an empty .out
file for a JAVA submission.  You can prove this has hap-
pened by running the program in its directory by direct
command; e.g., if the problem is named foo, run
`foo <foo.in' in the submission directory.  This runs
the program outside the sandbox without resource limits
(though you are in trouble if the program is a virus, so
you might want to peek at the program first).

The fix in this case is to increase the datasize and
stacksize limits in the problem Makefile.  In fact, you
may want to increase these in all the problem Makefiles.
The judge's versions of these Makefiles are found in the
subdirectories of the `solutions' directory.  The con-
testant's versions are found in the subdirectories of
either the `contest/problems' or `info/problems' direc-
tories.

Another possible problem with JAVA is that JAVA programs
only access .class files by using absolute file names.
This means that when the program is run by the judge in
a sandbox, the entire path to the .class file from the
root directory must have execute (x) permissions.
Normally this is not a problem as HPCM has been designed
to make sure all the `x' permissions are granted to
various directories.  The symptom is some form of `class
not defined' message.  The fix is to add x permissions
to directories, or add `chmod a+x ...' commands to the
problem Makefiles.

In any case, after fixing the problem just use the
manualreply program to rerun the autojudge.  In the
worst case it may be necessary to delete any program
source file in the submission directory first to cause
the autojudge to redo everything from the received
submission.


Formal Contest Emergencies
------ ------- -----------

Minor emergencies happen about every other contest, in
our limited experience.  So you need to prepare.

In order to prepare for formal emergencies, be sure
you have manpower and means to contact the teams.  If
you are working at one site, have an extra person on
hand.  If you are working with distributed sites, be
sure you have phone numbers for the site managers, and
vice versa, and the phones are tested before the contest
begins.  You may want site managers, who tend to roam,
to have cell phones, cordless phones, or beepers (any of
which may be borrowed).  The jprint command, that allows
any judge to print a message for site managers on the
site printers, may suffice.

To prepare to judge a formal contest that you really
want to work, you should read the documentation and
in some cases the code of the very few programs that are
involved in actual judging.  These are:

    receivemail		Read documentation.

    dispatchmail	Read documentation and code.
    			Code is in hpcm/judge/bin.

    autojudge		Read documentation and code.
    			Code is in hpcm/judge/bin.

    extractmail		Read documentation.

    autoscore		Read documentation and code.
    			Code is in hpcm/judge/bin.

    scorediff		Read documentation.


Some of these programs call procedures in

	hpcm/judge/lib/judging_common.tcl
	hpcm/judge/lib/scoring_common.tcl
	
and use parameters or procedures defined in

	hpcm/judge/lib/hpcm_judging.rc
	
Read the documentation in these files as necessary.
It should not be necessary to read code.

Particular attention should be paid to being sure that
email works on the day of the contest.  Two solutions
are: have everyone on one machine, so email is internal
to that machine; or have an email guru available to fix
problems with email.



An Example Contest Emergency
-- ------- ------- ---------

The following is an example emergency from BOSPRE 2001.
It illustrates what can happen and how to fix the
situation.

The first two hours of the contest ran normally, but
then the operating system (Linux RedHat 6.1) started to
send out error messages saying there were too many open
files, and processes started dying spontaneously.  The
judge was very concerned since he though this kind of
problem had been solved by UNIX kernels and would not
appear.

The contest was a distributed contest, with a judge at
one school and two sites with contestants at other
schools.  The judge and one of the site managers talked
by phone promptly, and the judge asked the site manager
to have contestants clean up any excess processes they
might have.  The judge also posted a notice at the top
of the scoreboard (which contestants can put in one of
their windows), which asked contestants to be careful
about how many processes they ran.  With the help of
these actions, the problem went away within about 10
minutes, though there was aftermath that we will
describe below.

One piece of good news is that the judge had backup
available in the form of an assistant who had some rough
knowledge of Linux OS issues.  The assistant found,
after a few tens of minutes of research, that Linux has
a bound on the total number of open files in /proc/sys/
fs/file-max that can be set by root using `echo >/proc/
sys/fs/file-max XXX'.  The normal setting was 4096,
which seemed to be large enough.  There are also three
numbers in the read-only file /proc/sys/fs/file-nr, the
middle of which is supposed to be the current number of
open files, though this number did not seen to agree
with results from other sources (the lsof command).

The assistant also knew about the lsof command, that
lists all the open files in the system, when run by
root.  By using this command in conjunction with grep,
the judge and assistant were able to figure out how
many open files each contestant account had.  By con-
tinual monitoring, one team was identified that seemed
to increasing their number of open files by 200 per 10
minutes.  This was done after teams had been asked to
watch their processes.  The site manager for that team
was contacted and asked to work with the team to reduce
their number of open files.  There were no subsequent
operating system problems with the contest.

However, because processes died spontaneously, some sub-
missions were not handled correctly during the time when
processes were failing, and fixup was required.  Al-
though contestants can be told to resubmit, manual re-
view of submissions also permits fixups of difficulties
caused by process failure.  To do this, a rough know-
ledge of how the `autojudge' program works is necessary.

One common problem that occurred in this case is erron-
eous scores of `Syntax Error'.  This error occurs when
the `autojudge' program cannot make an executable binary
from the submitted source.  In the case of BOSPRE 2001,
this happened because files could not be opened, but in
BOSPRE 2000 this also happened but for a different rea-
son: the judge's account at the beginning of BOSPRE 2000
had the wrong JAVA compiler installed, and this wrong
compiler lacked an important part of the subroutine
library.

The `tracker' program selects submissions with the
score of `Syntax Error' for review (if the scoring mode
is `auto+manual', as it was in BOSPRE 2001).  The gener-
al recovery procedure for this situation is to use the
`sh' command of `manualreply' to start a shell in the
submission directory, use the shell `rm' command to re-
move the submission source file (the .c, .cc, or .java
file), and then run the `autojudge' program.  Deleting
the source file is necessary to cause `autojudge' to
go through all the steps of recomputing the auto score.
Note, however, if the scoring mode is `auto+manual',
this results in sending a second auto score to the
contestant.  One then uses the shell `exit' command to
return to `manualreply'.  After manual review and con-
firmation of the auto score, the `er' and `sr' commands
in manual reply may be used to send an explanation to
the contestant, stating why the auto score was recom-
puted.

Note that the `lookat' program can also be used to
display some information about submissions in a rough
time range (by using `DATE::<regular-expression>'),
and double check that everything has been fixed up.




Backup Plans
------ -----

When judging a formal contest, it is important to have
a backup plan in case the contest computers or computer
communications fail in some significant way.

If the power in the building fails, but there is suffi-
cient light, the ultimate backup plan may be applied:
have contestants use paper and pencil, and grade the
results over the next week as one would grade exam
problems.

One can cautiously modify this plan by using computer
facilities that are still working for ALL contestants.
For example, if the judge's computer fails but all
contestants have access to a computer with editors, the
contestants can edit their solutions into the computers.
If ALL these computers have sufficient compilers, the
contestants can test run their solutions.  Etc.

If a contest is distributed among several sites, one
site may have difficulties (e.g. with network communi-
cations) while other sites may not.  It will then be
necessary to split the contest, with the site that had
difficulties becoming a separate contest, as it would
be unfair to have teams at a site with difficulties
competing against teams at a site with no difficulties.

It is not a bad idea to have a backup computer for the
judge (and for the contestants if all are on a single
computer), and to use some program to periodically
copy all relevant files from the primary to the backup
computer.  The `rsync' program (available under Linux)
looks promising for this application.  In the case of
a distributed contest, the ideal might be to have the
backup computer located at a different site, in case
the network at the judge's site went down.



Judging Email and Informal Contests
------- ----- --- -------- --------

Email and informal contests are usually judged automa-
tically.  The `tracker' program does not work for such
contests, and if you want to examine submissions, you
must use the `lookat' program.  Queries are forwarded
to the email address in the hpcm_judging.rc `reply_
manager' variable, if that is set, so the judge can have
queries forwarded to the judge's personal email address.
"

exit 0

# Include common error catching code:
#
} caught_output
caught_error
