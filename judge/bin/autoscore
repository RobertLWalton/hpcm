#!/bin/sh
#
# Compute the auto score file in a submission directory.
#
# File:		autoscore
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Mon Oct  2 10:24:16 EDT 2000
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: hc3 $
#   $Date: 2000/10/02 15:46:03 $
#   $RCSfile: autoscore,v $
#   $Revision: 1.19 $
#
# The next line starts tcl \
exec tcl "$0" "$@"

# Use tcl rather than tclsh so that `signal' is defined.

# Include common code and parameters:
#
set lib_directory "[file dirname $argv0]/../lib"
source $lib_directory/judging_common.tcl
catch {

set document "
cd submission_directory; autoscore program_name

    Given the submission directory as the current dir-
    ectory, given the program name (e.g. pppp), the test
    file (pppp.test, the judge's solution's version of
    the output file), and optionally the output file
    (pppp.out) and the error file (pppp.err), computes
    the `$auto_score_file' file in the submission\
					    directory,
    using purely automatic (non-manual means).

    If the error file (pppp.err) exists and is non-
    empty, the score is one of:

    	Cpu Time Limit Exceeded
	Output Size Limit Exceeded
	Program Crashed

    depending upon whether a line of the error file
    matches a regular expression indicating there
    was a cpu time or output size problem.  Currently
    it is not possible to discriminate memory limit
    exceedments from other memory errors, and they
    are all classed as `Program Crashed'.

    If the error file does not exist or is empty, and
    the output file does not exist, the score is:

	Program Crashed

    If the error file does not exist or is empty, and
    the output file exists, the program is scored by
    comparing the output of

    	scorediff output_file test_file

    to the whitespace separated items of the first line
    of any
    
	$scoring_instructions_file

    file in the submission directory.  If this last
    file is missing, the items default to:

    	$scoring_instructions_default

    The possible $scoring_instructions_file file items\
                                                 are:

    	whitespace	Allow matching whitespace in
			the two files to be not exactly
			the same.  However, by itself
			this item does not permit
			different numbers of `\\n's.

	linebreak	Allow one file to have line
			breaks where the other file
			does not.  Only effective if
			whitespace or spacebreak is
			allowed.

	spacebreak	Allow one file to have white-
			space where the other file has
			none.  However, by itself this
			item does not permit one file
			to have `\\n's where there
			other file has no whitespace.

	number A R	Allow the two files to have
			matching numbers whose absolute
			difference is as much as A, and
			whose relative difference is as
			much as R, where A and R are
			floating point values.

			The `number' item implies the
			`whitespace' item, as a small
			difference in a number can make
			a difference in the whitespace
			that immediately precedes the
			number.

	decimal		Allow two files to have matching
			numbers that have different
			numbers of decimal digits, or
			for which only one of the
			matching numbers has a decimal
			point.

	exponent	Allow two files to have matching
			numbers just one of which has an
			exponent.

	case		Allow two files to have letters
			outside of numbers that match
			but for case.

	column		Allow to files to have matching
			numbers that do not end in the
			same line column, or matching
			non-whitespace characters that
			do not end in the same line
			column.

    The possible scores (with empty error file and
    extant output file) are:

    	Completely Correct
	Formatting Error
	Incomplete Output
	Incorrect Output

    If scorediff reports `nonblank' or `eof2' (output
    has non-whitespace after test file ends), or if
    scorediff reports a `number' difference greater than
    allowed by the $scoring_instructions_file, the
    output is incorrect.  Otherwise, if scorediff
    reports something other than `eof1' that is not
    allowed by $scoring_instructions_file, the output
    has a formatting error.  Otherwise if scorediff
    reports `eof1' the output is incomplete.  Otherwise
    the output is correct.

    The relative difference of two numbers x and y is
    defined to be:

                       | x - y |
                    ----------------
                    max ( |x|, |y| )

    which has a maximum value of 2.  If x = y = 0, the
    relative difference of x and y is defined to be 0.

    The score is written to the `$auto_score_file' file
    in the submission directory and is also written as a
    single line to the standard output.

    For the purpose of computing character line column
    positions, tabs are set every 8 columns."

# If wrong number of arguments or first argument begins
# with `-', print documentation and exit with error.
#
if { $argc != 1 || [regexp {^-} [lindex $argv 0]] } {
    puts $document
    exit 1
}

# Set file names and check file permissions.
#
set program_name [lindex $argv 0]
set output_file $program_name.out
set error_file  $program_name.err
set test_file   $program_name.test

# Initialize score to blank.
#
set score ""

# If error file exists and is not empty, compute score.
#
if { [file exists $error_file] \
     && [file size $error_file] > 0 } {

    set error_fd [open $error_file r]
    while { "yes" } {
    	set line [gets $error_fd]
	if { [eof $error_fd] } break
	if { [regexp -nocase -- \
	             $time_limit_regexp $line] } {
	    set score "Cpu Time Limit Exceeded"
	    break;
	} elseif { [regexp -nocase -- \
	             $output_limit_regexp $line] } {
	    set score "Output Size Limit Exceeded"
	    break;
	}
    }
    close $error_fd

    if { $score == "" } {
    	set score "Program Crashed"
    }
} elseif { ! [file exists $output_file] } {

    # Error file does not exist or is empty, and
    # output file does not exist.
    #
    set score "Program Crashed"
}

# If score is still blank, compute the score using
# the instructions file and the results of scorediff.
#
if { $score == "" } {

    # Read the instructions file or use default.
    #
    set scoring_instructions [find_scoring_instructions]

    # Encode the instructions in the following
    # variables:
    #
    set spacebreak_ok	no
    set linebreak_ok	no
    set whitespace_ok	no
    set number_ok	no
    set decimal_ok	no
    set exponent_ok	no
    set case_ok		no
    set column_ok	no
    set number_absdiff	0.0
    set number_reldiff	0.0

    set last ""
    foreach i $scoring_instructions {
	if { $last == "number" } {
	    if { [catch { expr $i }] } {
	        error \
		    "Non-number after `number' in\
		     scoring instructions: $i"
	    }
	    set number_absdiff $i
	    set last absdiff
	} elseif { $last == "absdiff" } {
	    if { [catch { expr $i }] } {
	        error \
		    "Non-number after `number' in\
		     scoring instructions: $i"
	    }
	    set number_reldiff $i
	    set last ""
	} elseif { $i == "number" } {
	    set number_ok yes
	    set whitespace_ok yes
	    set last number
	} elseif { $i == "decimal" } {
	    set decimal_ok yes
	} elseif { $i == "exponent" } {
	    set exponent_ok yes
	} elseif { $i == "case" } {
	    set case_ok yes
	} elseif { $i == "column" } {
	    set column_ok yes
	} elseif { $i == "spacebreak" } {
	    set spacebreak_ok yes
	} elseif { $i == "linebreak" } {
	    set linebreak_ok yes
	} elseif { $i == "whitespace" } {
	    set whitespace_ok yes
	} else {
	    error "Unknown scoring_instruction: $i"
	}
    }
    
    if { $last != "" } {
	error \
	    "Number not followed by two floating point\
	     numbers\n\
	    \    in the scoring instructions:\n\
	    \        $scoring_instructions"
    }

    # Compute result of scorediff applied to output
    # and test files.
    #
    set scorediff \
        [exec scorediff $output_file $test_file]

    # Compute score based on scoring instructions and
    # results of scorediff.
    #
    set last ""
    foreach d $scorediff {
	if { $last == "number" } {
	    if { $d > $number_absdiff } {
		set score "Incorrect Output"
		break
	    }
	    set last absdiff
	} elseif { $last == "absdiff" } {
	    if { $d > $number_reldiff } {
		set score "Incorrect Output"
		break
	    }
	    set last ""
	} elseif { $d == "number" } {
	    if { $number_ok == "no" } {
		set score "Incorrect Output" 
		break
	    }
	    set last number
	} elseif { $d == "nonblank" } {
	    set score "Incorrect Output"
	    break
	} elseif { $d == "eof2" } {
	    set score "Incorrect Output"
	    break
	} elseif { $d == "decimal" } {
	    if { $decimal_ok == "no" } {
		set score "Formatting Error" 
	    }
	} elseif { $d == "exponent" } {
	    if { $exponent_ok == "no" } {
		set score "Formatting Error" 
	    }
	} elseif { $d == "case" } {
	    if { $case_ok == "no" } {
		set score "Formatting Error" 
	    }
	} elseif { $d == "column" } {
	    if { $column_ok == "no" } {
		set score "Formatting Error" 
	    }
	} elseif { $d == "whitespace" } {
	    if { $whitespace_ok == "no" } {
		set score "Formatting Error" 
	    }
	} elseif { $d == "spacebreak" } {
	    if { $spacebreak_ok == "no" } {
		set score "Formatting Error" 
	    }
	} elseif { $d == "linebreak" } {
	    if { $linebreak_ok == "no" } {
		set score "Formatting Error" 
	    }
	} elseif { $d == "eof1" } {
	    if { $score == "" } {
		set score "Incomplete Output"
	    }
	} elseif { $d == "none" } {
	    # No error
	} else {
	    error "Unknown scorediff result: $d" 
	}
    }
}

if { $score == "" } {
    set score "Completely Correct"
}

write_file $auto_score_file $score
set_flag $score_flag_file

puts $score

exit 0

# Include common error catching code:
#
} caught_output
caught_error
