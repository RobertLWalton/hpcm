#! /bin/sh -f
# file:		receive_submissions
# author:	Bob Walton (walton@deas.harvard.edu)
# The next line starts tclsh \
exec tclsh "$0" "$@"

# Set program parameters that could be changed.
#
set allowed_extensions_default \
    ".c .cc .java"
set allowed_extensions_filename \
    "allowed_submission_extensions"
set log_filename \
    "receive_submissions.log"

# Regexp to match first line of mail message.
# If you send a line matching this in a mail message,
# a `>' will be prefixed to prevent the line from
# matching this regexp.
#
set From_line_regexp {^From\ }

set document "
receive_submissions mail_file judging_directory

    For each submission in the mail_file builds a sub-
    directory of the judging_directory containing the
    submitted file.  The subdirectory name is the entire
    `From' line for the submission message in the mail
    file, which includes the date and submitter.
    Nothing is done if the subdirectory already exists.

    All actions are logged by appendments to:
    	judging_directory/$log_filename

    Submission errors include:
        Submitted file before first mail message.
	Submitted file improperly terminated.
	2 or more submitted files in one message.
	Unallowed extension for submitted file.

    The allowed extensions are read from the file:
        D/../lib/$allowed_extensions_filename
    where D is the directory containing the program.
    If this file is not readable (e.g. does not exist),
    the default allowed extensions are:
    	$allowed_extensions_default
    
    Errors are both logged in the log file and
    announced on the standard output.  All but the first
    error above causes a `.score' file to be written
    with the first line equal to `Submission Error'."



if { $argc != 2 } {
    puts $document
    exit 0
}

set mail_file [lindex $argv 0]
set judging_directory [lindex $argv 1]

if { ! [file readable $mail_file] } {
    puts "ERROR: not readale:"
    puts "       $mail_file"
    exit 1
}

if { ! [file isdirectory $judging_directory] } {
    puts "ERROR: not a directory:"
    puts "       $judging_directory"
    exit 1
}

set log_file "$judging_directory/$log_filename"
puts "Logging to $log_file"
set log_fd   [open $log_file a]

puts $log_fd \
     "-----------------------------------------------"
puts $log_fd \
     "Starting Run: [clock format [clock seconds]]"
puts $log_fd \
     "    Mail File: $mail_file"

set program_directory [file dirname $argv0]
set lib_directory "$program_directory/../lib"

set allowed_extensions_file \
    "$lib_directory/$allowed_extensions_filename"

if { [file readable $allowed_extensions_file] } {
    set allowed_extensions_fd \
        [open $allowed_extensions_file r]
    set allowed_extensions \
        [gets $allowed_extensions_fd]
    close $allowed_extensions_fd

    puts $log_fd "    Allowed extensions read from\
                      $allowed_extensions_file:"
    puts $log_fd "        $allowed_extensions"
} else {
    set allowed_extensions $allowed_extensions_default
    puts $log_fd "    No file $allowed_extensions_file"
    puts $log_fd "    Allowed extensions default to:"
    puts $log_fd "        $allowed_extensions"
}

set mail_fd [open $mail_file r]

# State can be `none', `found', `next_found'
#
set From_line_state none
set From_line       ""
set next_From_line  ""

proc flush_submitted_file {} {
    global mail_fd next_From_line From_line_state \
           From_line_regexp

    while {1} {
	set line [gets $mail_fd]
	if { [eof $mail_fd] } {
	    break
	} elseif {
	    [regexp \
		{^\[\[\.\.ACM\.\.END\.\.\]\]} \
		$line] } {
	    break
	} elseif {
	    [regexp $From_line_regexp $line] } {
	    set next_From_line $line
	    set From_line_state next_found
	    break
	}
    }
}

proc output_error { score_fd
		    score_file
		    error_message_line } {
    global log_fd From_line
    if { $score_fd == "no" } {
	puts $log_fd \
	     "    Creating $score_file"
	set score_fd \
	    [open $score_file w]
	puts $score_fd "Bad Submission"
	puts $From_line
    }
    puts $log_fd   $error_message_line
    puts $score_fd $error_message_line
    puts           $error_message_line

    return $score_fd
}

proc copy_file { directory submitted_file } {
    global From_line mail_fd log_fd \
           next_From_line From_line_state \
	   From_line_regexp

    set submitted_program \
        [file rootname $submitted_file]
    set submitted_extension \
        [file extension $submitted_file]
    set output_file \
	"$directory/$submitted_file"
    set score_file \
	"$directory/${submitted_program}.score"

    puts $log_fd $From_line
    puts $log_fd \
	 "    Making directory $directory"
    file mkdir $directory

    puts $log_fd "    Creating $output_file"
    set output_fd [open $output_file w]

    set number_of_good_lines 0
    set number_of_bad_lines 0

    set score_fd no

    while {1} {
	set line [gets $mail_fd]
	if { [eof $mail_fd] } {
	    set score_fd \
	        [output_error $score_fd $score_file \
		 "    ERROR: unexpected eof\
			 ends submitted file" ]
	    puts $output_fd \
		 "ERROR: unexpected eof ends\
			 this submitted file"
	    break
	} elseif { [regexp {^\.\.(.*)$} $line \
			   all real_part] } {
	    incr number_of_good_lines
	    puts $output_fd $real_part
	} elseif {
	    [regexp \
	     {^\[\[\.\.ACM\.\.END\.\.\]\]} \
	     $line] } {
	    break
	} elseif {
	    [regexp $From_line_regexp $line] } {
	    set next_From_line $line
	    set From_line_state next_found
	    set score_fd \
	        [output_error $score_fd $score_file \
		 "    ERROR: unexpected end of message\
			 ends submitted file" ]
	    puts $output_fd \
		 "ERROR: unexpected end of message\
			 ends this submitted file"
	    break
	} else {
	    if { ! [info exists score_fd] } {
		puts $log_fd \
		     "    Creating $score_file"
		set score_fd \
		    [open $score_file w]
		puts $score_fd "Bad Submission"
		puts $From_line
	    }
	    incr number_of_bad_lines
	    puts $output_fd "ERROR: bad line in\
				submitted file:"
	    puts $output_fd $line
	    if { $number_of_bad_lines == 1 } {
		set score_fd \
		    [output_error $score_fd \
		                  $score_file \
			"    ERROR: bad lines in\
				  submitted file:" ]
	    }
	    if { $number_of_bad_lines <= 5 } {
		set score_fd \
		    [output_error $score_fd \
		                  $score_file \
			"           $line" ]
	    } elseif {
		  $number_of_bad_lines == 6 } {
		set score_fd \
		    [output_error $score_fd \
		                  $score_file \
		     "           AND THERE ARE\
			     MORE BAD LINES!" ]
	    }
	}
    }

    puts $log_fd \
	 "    There were $number_of_good_lines\
	      good lines in file."
    if { $score_fd != "no" } { close $score_fd }
    close $output_fd
}

set number_of_files 0

while {1} {
    if { $From_line_state == "next_found" } {
    	set line next_From_line
	set From_line_state none
    } else {
	set line [gets $mail_fd]
	if { [eof $mail_fd] } break
    }

    if  { [regexp $From_line_regexp $line] } {
    	set From_line $line
	set From_line_state found
	set number_of_files 0
	set directory \
	    "$judging_directory/$From_line"
	set first_submitted_file ""
    } elseif {
	    [regexp {^\[\[\.\.ACM\.\.BEGIN\.\.\]\]} \
		    $line] } {

	incr number_of_files

	set submitted_file \
	    [lindex $line 1]
	set submitted_program \
	    [file rootname $submitted_file]
	set submitted_extension \
	    [file extension $submitted_file]

	if { $From_line_state == "none" } {
	    puts $log_fd \
		 "ERROR: file before any mail message:\
		         $submitted_file"
	    puts \
		 "ERROR: file before any mail message:\
		         $submitted_file"

	    flush_submitted_file
	} elseif { [file isdirectory $directory] } {
	    if { $first_submitted_file != "" } {

		set score_file \
		    "$directory/${submitted_program}.score"

		if { ! [file exists $score_file] } {
		    set score_fd no
		} else {
		    set score_fd [open $score_file a]
		}

		if { $number_of_files == 2 } {
		    set score_fd \
		        [output_error $score_fd \
				      $score_file \
			 "    ERROR: extra file in\
				     submission:\
			     $first_submitted_file"]
		}

		set score_fd [output_error $score_fd \
					   $score_file \
		     "    ERROR: extra file in\
		                 submission:\
				 $submitted_file"]
		close $score_fd
	    }

	    flush_submitted_file
	} elseif { [lsearch \
	            -exact $allowed_extensions \
		    $submitted_extension] < 0 } {
	    puts $log_fd $From_line
	    puts $log_fd \
	         "    Making directory $directory"
	    file mkdir $directory

	    set score_file \
		"$directory/${submitted_program}.score"

	    set score_fd [output_error no $score_file \
		 "    ERROR: bad extension on file\
		             named: $submitted_file"]
	    close $score_fd

	    flush_submitted_file
	} else {
	    set first_submitted_file $submitted_file
	    copy_file $directory $submitted_file
	}
    }
}

exit 0
