#! /bin/sh -f
# file:		extract
# author:	Bob Walton (walton@deas.harvard.edu)
# The next line starts tcl \
exec tcl "$0" "$@"

if { $argc < 2 } {
    puts "
extract mail_file judging_directory
    For each submission in the mail_file builds a sub-
    directory of the judging_directory containing the
    submitted file.  The subdirectory name is the entire
    `From' line for the submission message in the mail
    file, which includes the date and submitter.
    Nothing is done if the subdirectory already exists.

    All actions are logged at the end of
    	judging_directory/extract.log

    Errors are both logged and announced."

    exit 0
}

set mail_file [lindex $argv 0]
set judging_directory [lindex $argv 1]

if { ! [file readable $mail_file] } {
    puts "ERROR: not a directory:"
    puts "       $mail_file"
    exit 1
}

if { ! [file isdirectory $judging_directory] } {
    puts "ERROR: not a directory:"
    puts "       $judging_directory"
    exit 1
}

set log_file "$judging_directory/extract.log"
set log_fd [open $log_file a]
puts "Logging to $log_file"

puts $log_fd \
     "-----------------------------------------------"
puts $log_fd \
     "Starting Run: [clock format [clock seconds]]"

set program_directory [file dirname $argv0]
set lib_directory "$program_directory/../lib"

set allowed_extensions_file \
    "$lib_directory/allowed_submission_extensions"

if { [file readable $allowed_extensions_file ] } {
    set allowed_extensions_fd \
        [open $allowed_extensions_file r]
    set allowed_extensions \
        [gets $allowed_extensions_fd]
    close $allowed_extensions_fd

    puts $log_fd "    Allowed extensions read from\
                      $allowed_extensions_file:"
    puts $log_fd "        $allowed_extensions"
} else {
    set allowed_extensions ".c .cc .java"
    puts $log_fd "    No file $allowed_extensions_file"
    puts $log_fd "    Allowed extensions default to:"
    puts $log_fd "        $allowed_extensions"
}

set mail_fd [open $mail_file r]

if { [info exists From_line] } { unset From_line }
set number_of_files 0

while {1} {
    set line [gets $mail_fd]
    if { [eof $mail_fd] } break

    if  { [regexp {^From\ } $line] } {
    	set From_line $line
	set number_of_files 0
    } elseif {
	    [regexp {^\[\[\.\.ACM\.\.BEGIN\.\.\]\]} \
		    $line] } {

	incr number_of_files

	set submitted_file [lindex $line 1]

	if { ! [regexp {^(.*)(\.[^.]*)$} \
	               $submitted_file \
		       all submitted_program \
		       submitted_extension] } {
	    set submitted_program $submitted_file
	    set submitted_extension ""
	}

	if { [info exists From_line] } {
	    set directory \
	        "$judging_directory/$From_line"
	    set score_file \
	        "$directory/$submitted_program.score"
	}

	if { ! [info exists From_line] } {
	    puts $log_fd \
		 "ERROR: file before any mail message:\
		         $submitted_file"
	    puts \
		 "ERROR: file before any mail message:\
		         $submitted_file"

	    while {1} {
		set line [gets $mail_fd]
		if { [eof $mail_fd] } {
		    break
		} elseif {
		    [regexp \
			{^\[\[\.\.ACM\.\.END\.\.\]\]} \
			$line] } {
		    break
		}
	    }
	} elseif { [file isdirectory $directory] } {
	    if { $number_of_files > 1 } {
		puts $log_fd $From_line
		puts $log_fd
		     "    Making directory $directory"
		file mkdir $directory

		if { ! [file exists $score_file] } {
		    puts $log_fd \
		         "    Creating $score_file"
		    set score_fd [open $score_file w]
		    puts $score_fd "Bad Submission"
		} else {
		    set score_fd [open $score_file a]
		}
		puts $From_line

		puts $log_fd \
		     "    ERROR: extra file in\
		                 submission:\
				 $submitted_file"
		puts $score_fd \
		     "    ERROR: extra file in\
		                 submission:\
				 $submitted_file"
		puts \
		     "    ERROR: extra file in\
		                 submission:\
				 $submitted_file"

		close $score_fd
	    }

	    while {1} {
		set line [gets $mail_fd]
		if { [eof $mail_fd] } {
		    break
		} elseif {
		    [regexp \
		     {^\[\[\.\.ACM\.\.END\.\.\]\]} \
		     $line] } {
		    break
		}
	    }
	} elseif { [lsearch \
	            -exact $allowed_extensions \
		    $submitted_extension] < 0 } {
	    puts $log_fd $From_line
	    puts $log_fd \
	         "    Making directory $directory"
	    file mkdir $directory

	    puts $log_fd "    Creating $score_file"
	    set score_fd [open $score_file w]
	    puts $score_fd "Bad Submission"
	    puts $From_line

	    puts $log_fd \
		 "    ERROR: bad extension on file\
		             named: $submitted_file"
	    puts $score_fd \
		 "    ERROR: bad extension on file\
		             named: $submitted_file"
	    puts \
		 "    ERROR: bad extension on file\
		             named: $submitted_file"

	    close $score_fd

	    while {1} {
		set line [gets $mail_fd]
		if { [eof $mail_fd] } {
		    break
		} elseif {
		    [regexp \
		     {^\[\[\.\.ACM\.\.END\.\.\]\]} \
		     $line] } {
		    break
		}
	    }
	} else {
	    puts $log_fd $From_line
	    puts $log_fd \
	         "    Making directory $directory"
	    file mkdir $directory

	    set output_file \
	        "$directory/$submitted_file"

	    puts $log_fd "    Creating $output_file"
	    set output_fd [open $output_file w]

	    set number_of_good_lines 0
	    set number_of_bad_lines 0

	    if { [info exists score_fd] } {
		unset score_fd
	    }

	    while {1} {
		set line [gets $mail_fd]
		if { [eof $mail_fd] } {
		    if { ! [info exists score_fd] } {
			puts $log_fd \
			     "    Creating $score_file"
		    	set score_fd \
			    [open $score_file w]
			puts $score_fd "Bad Submission"
			puts $From_line
		    }
		    puts $output_fd \
			 "ERROR: unexpected eof at end\
			         of this submitted file"
		    puts $log_fd \
		         "    ERROR: unexpected eof at\
			         end of submitted file"
		    puts $score_fd \
		         "    ERROR: unexpected eof at\
			         end of submitted file"
		    puts \
		         "    ERROR: unexpected eof at\
			         end of submitted file"
		    break
		} elseif { [regexp {^\.\.(.*)$} $line \
		                   all real_part] } {
		    incr number_of_good_lines
		    puts $output_fd $real_part
		} elseif {
		    [regexp \
		     {^\[\[\.\.ACM\.\.END\.\.\]\]} \
		     $line] } {
		    break
		} else {
		    if { ! [info exists score_fd] } {
			puts $log_fd \
			     "    Creating $score_file"
		    	set score_fd \
			    [open $score_file w]
			puts $score_fd "Bad Submission"
			puts $From_line
		    }
		    incr number_of_bad_lines
		    puts $output_fd "ERROR: bad line in\
		                        submitted file:"
		    puts $output_fd $line
		    if { $number_of_bad_lines == 1 } {
			puts $log_fd \
			     "    ERROR: bad lines in\
				      submitted file:"
			puts $score_fd \
			     "    ERROR: bad lines in\
				      submitted file:"
			puts \
			     "    ERROR: bad lines in\
				      submitted file:"
		    }
		    if { $number_of_bad_lines <= 5 } {
		        puts $log_fd \
			     "           $line"
		        puts $score_fd \
			     "           $line"
		        puts \
			     "           $line"
		    } elseif {
			  $number_of_bad_lines == 6 } {
		        puts $log_fd \
			     "           AND THERE ARE\
				     MORE BAD LINES!"
		        puts $score_fd \
			     "           AND THERE ARE\
			             MORE BAD LINES!"
		        puts \
			     "           AND THERE ARE\
			             MORE BAD LINES!"
		    }
		}
	    }

	    puts $log_fd \
	         "    There were $number_of_good_lines\
		      good lines in file."
	    close $output_fd
	}
    }
	
}
exit 0
