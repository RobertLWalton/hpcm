#!/bin/sh
#
# Receive incoming mail and write it into separate
# mail directory subdirectories.
#
# File:		receivemail
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Sun Nov  5 08:53:48 EST 2000
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: hc3 $
#   $Date: 2000/11/05 14:02:04 $
#   $RCSfile: receivemail,v $
#   $Revision: 1.23 $
#
# The next line starts tcl \
exec tcl "$0" "$@"

# Use tcl rather than tclsh so that `signal' is defined.

# If an argument is given, use it as a name of a
# directory to make current, and consume the argument.
# This must be done before looking for the parameters
# file.
#
# Don't change argc or argv so error output will work.
#
set my_argc $argc
set my_argv $argv
if { $my_argc >= 1 \
     && ! [regexp {^-} [lindex $my_argv 0]] } {
    cd [lindex $my_argv 0]
    set my_argv [lreplace $my_argv 0 0]
    set my_argc [expr { $my_argc - 1 }]
}

# Include common code and parameters:
#
set lib_directory "[file dirname $argv0]/../lib"
source $lib_directory/judging_common.tcl
set log_globally yes
catch {

set document "
receivemail \[directory\]

    Reads mail from the standard input and divides it
    into messages.  For each message, a subdirectory is
    made in the mail directory to hold the message,
    its reply, and any program file extracted from the
    message, binary of that program, output of that
    program, etc.  The message is copied into the
    `$received_file' file in that directory and the name
    of the subdirectory is output.  The output can be
    piped to the `dispatchmail' program in order to
    call `autodispatch' for the subdirectory.

    The name of the subdirectory for a message has the
    form:
		dddd-<<tttt>>-submission

    where dddd is the message date in `filename format'
    and tttt is the email address to reply to, or is
    derived therefrom.  If tttt cannot be computed, it
    is given the value `UNKNOWN'.

    If a message is read that already has a directory,
    the message is ignored.  Note that this means that
    no one (including `UNKNOWN') can send more than one
    message per second.

    If the directory argument is given, this program
    makes that directory current before searching for
    the `$judging_parameters_file' file.

    If there are non-blank lines before the first `From'
    line in the input, these are organized into a spec-
    ial message from the user `UNKNOWN' with date equal
    to the current time.  The subject of this message is
    something ignored by `autodispatch'.

    This program outputs the names of the subdirector-
    ies of the mail directory that are actually created.
    The output of this program can be piped into the
    `dispatchmail' program."

# If any arguments left, print documentation and exit.
#
if { $my_argc != 0 } {
    puts $document
    exit 1
}

# Make sure making subdirectories of the mail
# directory will not fail: i.e., be sure the mail
# directory exists and is writable.
#
if { ! [file isdirectory $mail_directory] } {
    error "$mail_directory is not a directory."
} elseif { ! [file writable $mail_directory] } {
    error "$mail_directory is not writable."
}

# Read stdin until non-blank line found.
#
while { "yes" } {
    set line [gets stdin]
    if { [eof stdin] } {
	exit 0
    } elseif { ! [regexp "^\[\ \t\]*\$" $line] } {
    	break
    }
}

# Loop to handle each message.  Starts with $line
# equal to the `From' line of the message unless
# it is the first non-blank line of the input and
# that is not a `From' line.
#
while { "yes" } {

    # Read header
    #
    if { [regexp {^From\ } $line] } {

	set fake_message no

        # Read message header, deleting any X-HPCM-
	# Signature-OK field sent by the sender, as
	# we only believe the value for this field
	# that we compute.
	#
    	read_header stdin $line {x_hpcm_signature_ok}

    } else {

	set fake_message yes

        # If this is non-blank text before the first
	# `From' line in the input, fake a header.
	#
    	set null_ch [open /dev/null r]
	read_header $null_ch \
	            "From UNKNOWN\
		     [clock format [clock seconds]]"
	close $null_ch
	set message_subject \
	    "Subject: lines received in front of\
	              From line"
	set message_header \
	   "$message_header\n$message_subject"

	# Since there is no `From:', `Reply-to:' or
	# `Date:' in this fake header, the computed
	# reply-to and date will come from the fake
	# `From' line.
    }

    # If authentication is to be used, authenticate
    # header.  We do not use authentication in this
    # program, but computing it here saves time
    # when it is used later, as the result is cached
    # in the X-HPCM-Signature-OK field of the header.
    #
    if { $use_authentication } {
    	compute_authentication
    }

    # Compute and reformat Reply-to.  Delete all
    # whitespace, and if Reply-to ends with <...>,
    # replace Reply-to by the ...
    #
    set reply_to [compute_message_reply_to]
    regsub -all "\[\ \t\n\]" $reply_to "" reply_to
    regexp {<([^<>]*)>$} $reply_to forget reply_to

    if { $reply_to == "" } {
    	set reply_to UNKNOWN
    }

    # Compute the message date.
    #
    set date [compute_message_date]

    set dddd [clock_to_filename_date [clock scan $date]]
    set dirname $dddd-<<$reply_to>>-submission


    # Make directory for message.  On sucess copy
    # message to the directory.  On failure, skip the
    # message.

    if { [catch \
	  { create_directory \
	    $mail_directory/$dirname }] } {

	# Directory must already exist.  Skip message.
	#
	while { "yes" } {
	    set line [gets stdin]
	    if { [eof stdin] } {
	    	break;
	    } elseif { [regexp {^From\ } $line] } {
		break;
	    }
	}
    } else {

    	# Directory did NOT exist, and was just made.
	# Copy message.
	#
	set d $mail_directory/$dirname
	set message_ch [open $d/$received_file w]

	puts $message_ch $message_header
	puts $message_ch ""

	if { $fake_message == "no" } {
	    set line [gets stdin]
	}

	while { "yes" } {

	    if { [eof stdin] } {
	    	break;
	    } elseif { [regexp {^From\ } $line] } {
		break;
	    }
	    puts $message_ch $line

	    set line [gets stdin]
	}

	close $message_ch

	puts $dirname
    }

    if { [eof stdin] } break
}

# Come here on eof for stdin.

exit 0

# Include common error catching code:
#
} caught_output
caught_error
