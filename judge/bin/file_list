#!/bin/sh
#
# Given keywords, list the files the File_List that
# have matching keywords.
#
# File:		file_list
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Sat Sep 15 10:20:36 EDT 2001
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: hc3 $
#   $Date: 2001/09/15 16:54:59 $
#   $RCSfile: file_list,v $
#   $Revision: 1.1 $
#
# The next line starts tcl \
exec tcl "$0" "$@"

# This is a utility program that does NOT have to run
# in a judging directory tree.

set document "
file_list expression

    List all the file names in the HPCM File_List file
    for which the expression is true, where the names
    in the expression are taken as key names.  The
    operators `!', `&' and `|' are permitted, as are
    parentheses.  Precedence order is `!', `&', `|'.
"

if { $argc == 0 || [regexp {^-doc} [lindex $argv 0]] } {
    puts $document
    exit 1
}

# A list of all the names in the expression.
#
set vars ""

# Expression to be evaluated: must add `$' to each var.
#
set expression ""

foreach var $argv {
    if { [regexp {^[_a-zA-Z0-9]} $var] } {
        lappend vars $var
        set expression "$expression \$$var"
    } else {
	set expression "$expression $var"
    }
}

set ch [open "[file dirname $argv0]/../../File_List" r]

# We isolate evaluation in an environment where all
# key and variable names are local (assuming they
# do not begin and end with `_').
#
proc evaluator { _expression_ _keys_ _vars_ } {
    foreach _var_ $_vars_ { set $_var_ 0 }
    foreach _key_ $_keys_ { set $_key_ 1 }
    return [expr $_expression_]
}

set outsw 0
while { "yes" } {
    set line [gets $ch]
    if { [eof $ch] } break
    if { [regexp {^#KEYS:(.*)$} $line forget keys] } {
	set outsw [evaluator $expression $keys $vars]
    } elseif { [regexp {^#} $line] } {
	set outsw 0
    } elseif { $outsw } {
	puts $line
    }
}

exit 0
