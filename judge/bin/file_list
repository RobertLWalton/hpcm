#!/bin/sh
#
# Given a logical expression containing keywords, list
# the files the File_List whose keywords satisfy the
# expression.
#
# File:		file_list
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Fri Nov  8 19:41:45 EST 2002
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: hc3 $
#   $Date: 2002/11/09 00:42:13 $
#   $RCSfile: file_list,v $
#   $Revision: 1.5 $
#
# The next line starts tcl \
exec tcl "$0" "$@"

# This is a utility program that does NOT have to run
# in a judging directory tree.

set document "
file_list expression

    List all the file names in the HPCM File_List file
    for which the expression is true, where the names
    in the expression are taken as keyword names.  The
    operators `!', `&', `^', and `|' are permitted, as
    are parentheses.  Precedence order is `!', `&', `^',
    `|'.

    See the File_List file for documentation of the
    format of that file, including special *KEYS* and
    *ABBREVS* lines interpreted by this program.

    Unlike most HPCM judging programs, this program does
    not read any hpcm_judging.rc file and errors made by
    this program are not written to log files."

if { $argc != 1 || [regexp {^-doc} [lindex $argv 0]] } {
    puts $document
    exit 1
}

# Check that argument is a TCL list.
#
set argument [lindex $argv 0]
if { [catch { llength $argument }] } {
    error "Argument is not TCL list: $argument"
}


# A list of all the names in the expression.
#
set vars ""

# Expression to be evaluated: must add `$' to each var.
#
set expression ""

foreach var $argument {
    if { [regexp {^[_a-zA-Z][_a-zA-Z0-9]*$} $var] } {
        lappend vars $var
        set expression "$expression \$$var"
    } elseif { [lcontain {( ) ! & ^ |} $var] } {
	set expression "$expression $var"
    } else {
        error "Bad atom `$var' in `$argument'"
    }
}

# We isolate evaluation in an environment where all
# key and variable names are local (assuming they
# do not begin and end with `_').
#
proc evaluator { _expression_ _keys_ _vars_ } {
    foreach _var_ $_vars_ { set $_var_ 0 }
    foreach _key_ $_keys_ { set $_key_ 1 }
    return [expr $_expression_]
}

# Replace abbreviations in a list.  The array of
# abbreviations is given along with the list.  Replace-
# ment values are sublists of the result, and replace-
# ment is NOT recursive.
#
proc replace_abbrevs { list abbrev } {

    upvar $abbrev ab

    set result ""
    foreach x $list {
    	if { [info exists ab($x)] } {
	    set result [concat $result $ab($x)]
	} else {
	    lappend result $x
	}
    }
    return $result
}

# Loop through file lines.
#
set base_keys ""
set ch [open "[file dirname $argv0]/../../File_List" r]
while { "yes" } {
    set line [gets $ch]
    if { [eof $ch] } {
    	break
    } elseif { [regexp {^#} $line] } {
    	# Ignore comment.
    } elseif { [catch { llength $line }] } {
        error "Line is NOT a TCL list:\n$line"
    } elseif { [llength $line] == 0 } {
        # Ignore blank line.
    } elseif { [lindex $line 0] == "*ABBREVS*" } {
        foreach abbrev [lrange $line 1 end] {
	    if { ! [regexp {^([^=]+)=(.*)$} $abbrev \
	    		   forget name value] } {
		error "Bad abbreviation line:\n$line"
	    }
	    set key_abbrev($name) $value
	    set file_abbrev($name) [split $value "/"]
	}
    } elseif { [lindex $line 0] == "*KEYS*" } {
        set base_keys \
	    [replace_abbrevs [lrange $line 1 end] \
	                     key_abbrev]
    } elseif { [evaluator \
                  $expression \
		  [concat $base_keys \
			  [replace_abbrevs \
			       [lrange $line 1 end] \
			       key_abbrev]] \
		  $vars] } {
        
	puts [join [replace_abbrevs \
	              [split [lindex $line 0] "/"] \
		      file_abbrev] \
		   "/"]
    }
}

exit 0
