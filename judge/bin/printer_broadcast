#! /bin/sh
#
# Pipe a postscript file to all the printers.
#
# File:		printer_broadcast
# Author:	Bob Walton <walton@deas.harvard.edu>
# Date:		Tue Dec 26 01:34:27 EST 2006
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: walton $
#   $Date: 2006/12/26 07:15:05 $
#   $RCSfile: printer_broadcast,v $
#   $Revision: 1.16 $

Pswitch=0

case "$1" in
   -P)
       Pswitch=1
       ;;
   -doc* )
   	echo "
printer_broadcast filename
printer_broadcast -P

    Print the standard input to all the printers in the
    
    	contest-directory/printer_map

    file if that is readable, or the printer named in
    the
    
    	contest-directory/printer
    
    file otherwise, or if neither file is readable, use
    the printer named in the PRINTER environment var-
    iable.  The printing to each printer is done just
    like hpcm/contestant/bin/printer_pipe, except the
    \`where' argument is replaced by \`JUDGE', and
    printer names beginning with \`!' are ignored (so
    contestant specified printers are ignored).
    
    The standard input to this program should be a
    file to be piped to the printers.  It is usually a
    postscript file, but can be ASCII with form feeds.

    If the -P option is given, the list of printer
    names is output, and no printing is done.  If the
    printer name can be shortened for purpose of putting
    the name in printer_jobs, then \`shortname=longname'
    is output."

    	exit 1
	;;
esac

filename="$1"
if test "$filename" = ""
then
    filename="-"
fi

# Locate judging and contest directories.
#
contest=""
for jd in . .. ../.. ../../.. ../../../..
do
    if test -r $jd/hpcm_judging.rc
    then
        contest=$jd/contest
	break
    fi
done

if test "$contest" = ""
then
    echo ERROR: Cannot find hpcm_judging.rc.
    exit 1
fi

if test ! -x $contest
then
    echo ERROR: Cannot access $contest
    exit 1
fi

# Make a list of all printers.
#
# We are forced to use a bash array variable as a
# printer name that is an executable command may have
# spaces.
#
printers=0
if test -r "$contest/printer_map"
then

    # Open print map.
    #
    exec 3<"$contest/printer_map"

    # Read print map lines until match found.
    #
    while test x = x
    do
	read <&3 regexp printer
	if test $? -ne 0
	then
	    break
	fi
	case "$regexp" in
	"#*") continue ;;
	"#") continue ;;
	"")   continue ;;
	esac

	found=no
	i=0
	while test $i -lt $printers
	do
	    if test "${p[i]}" = "$printer"
	    then found=yes
	    fi
	    i=`expr $i + 1`
	done

	if test $found = no
	then
	    p[$printers]="$printer"
	    printers=`expr $printers + 1`
	fi
    done

    # Close printer_map file.
    #
    exec 3<&-

elif test -r "$contest/printer"
then
    p[0]=`cat "$contest/printer"`
    printers=1
elif test "${PRINTER:-}" != ""
then
    p[0]=$PRINTER
    printers=1
else
    echo >&2 Could not find printers.
    exit 1
fi

# If not -P, copy standard input into tmpfile.
#
if test $Pswitch -eq 0
then
    tmpfile="/tmp/printer_broadcast$$"
    trap "rm -f $tmpfile" 0
    rm -f $tmpfile
    cat >$tmpfile
fi

# Print tmpfile to all printers, or just echo
# printer name if -P.
#
i=0
while test $i -lt $printers
do
    # Ignore blank printer names or printer names
    # beginning with !.
    #
    printer="${p[$i]}"
    i=`expr $i + 1`

    if test ` expr "$printer" : "!" ` -ne 0
    then
    	continue
    fi

    if test "$printer" = ""
    then
    	continue
    fi

    shortname1=`expr "$printer" : "\\([^<]*\\)<"`
    if test "$shortname1" = ""
    then
	shortname1="$printer"
    fi
    shortname=`expr "$shortname1" : ".*/\\([^/]*\\)$"`
    if test "$shortname" = ""
    then
	shortname="$shortname1"
    fi

    if test $Pswitch -ne 0
    then
        if test "$shortname" = "$printer"
	then
	    echo $printer
	else
	    echo "$shortname=$printer"
	fi
	continue
    fi

    # If printer_jobs exists, announce job therein.
    #
    if test -w $contest/printer_jobs; then
	line=`date "+%a %r"`
	line="$line $shortname $filename JUDGE"
	echo "$line" \
	     >> $contest/printer_jobs
    fi

    # Send the print job to the printer.

    case "$printer" in
	\|*)
	    c=` expr "$printer" : '|\(.*\)$' `
	    cat $tmpfile | eval "$c"
	    ;;
	@*)
	    address=` expr "$printer" : '@\(.*\)$' `
	    if ( head -1 $tmpfile | \
	         grep '^%!PS' >/dev/null 2>&1 )
	    then
		ct=application/postscript
	    else
		ct=text/plain
	    fi
	    ( echo "To: $address"; \
	      echo "Subject: $filename JUDGE"; \
	      echo "Content-type: multipart/mixed;" \
	       "boundary=\"=-s81nn0vOWcIHsyzN7sbU\""; \
	      echo ""; \
	      echo "--=-s81nn0vOWcIHsyzN7sbU"; \
	      echo "Content-Disposition: attachment"; \
	      echo "Content-Type: $ct"; \
	      echo "Content-Transfer-Encoding: 7bit"; \
	      echo ""; \
	      cat $tmpfile; \
	      echo "--=-s81nn0vOWcIHsyzN7sbU" ) \
		  | /usr/sbin/sendmail -t
	    ;;
	*@*)
	    ( echo "To: $printer"; \
	      echo "Subject: $filename JUDGE"; \
	      echo ""; cat $tmpfile ) \
	          | /usr/sbin/sendmail -t
	    ;;
	*)
	    lpr -P$printer < $tmpfile
	    ;;
    esac

done

exit 0
