#!/bin/sh
#
# Runs the trackfinder program to get tracking informa-
# tion, formats the results into a tables upon request,
# and dispatches the `manualreply' program to work on
# directories upon request.
#
# File:		tracker
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Wed Dec 20 07:16:26 EST 2006
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: walton $
#   $Date: 2006/12/20 12:18:15 $
#   $RCSfile: tracker,v $
#   $Revision: 1.41 $
#
# The next line starts tcl \
exec tcl "$0" "$@"

# Use tcl rather than tclsh so that `signal' is defined.

# Include common code and parameters:
#
set lib_directory "[file dirname $argv0]/../lib"
source $lib_directory/judging_common.tcl
source $lib_directory/display_common.tcl
set log_mode none
catch {

set document "
tracker

    This program inputs the output of `trackfinder' to
    get tracking information.  This program is menu
    driven, with commands that permit the tracking
    information to be displayed in various ways, and
    commands that permit the `manualreply' program to
    be dispatched for a subdirectory.

    The main tracking function is to select submis-
    sions whose directories need the attention of
    manualreply.  If there are unchecked error files in
    any non-submission-specific logging directory, that
    directory is also selected.  A summary of all
    selected directories is output, and manualreply can
    be launched on any selected directory.

    In addition this program can print statistics show-
    ing how many submissions got a given score for a
    given program or a given score for a given submit-
    ter.  Also how much time is spent in the different
    submission processing steps, for each problem.

    Unlike most HPCM judging programs, errors made by
    this program are not written to log files, but are
    written to the standard error output instead."


# If any arguments, print documentation and exit.
#
if { $argc > 0 } {
    puts $document
    exit 1
}

# The value of info_array($dirname) is a list of input
# lines that concern the directory.  The $dirname is
# calculated from the line
#
#	sub date {submitter}
#
# as `date-<<submitter>>-submission', or is taken from
# the line
#
#	dir date {dirname}
#
# The value of xxx_array($dirname) exists for every
# dirname with a `xxx' line, and equals that line.  This
# can be used to compute statistics of various kinds.
#
# The exception is for `chk' and `err' lines. For these
# there are arrays
#
#	chk_array($dirname)
#	err_array($dirname)
#
# whose values are merely lists of the filenames taken
# from the `chk' and `err' lines.  Note these filenames
# begin with a date and sorting on filenames sorts on
# the dates.

# Helper function for read_input below.  Save the line
# in ${type}_array($dirname) after checking that no
# line was previously saved therein and that the line
# is a properly formatted TCL list with list length
# equal given length.
#
proc save_line { line type length dirname } {

    global ${type}_array

    if { [info exists ${type}_array($dirname)] } {
	error "Too many `$type' lines for $dirname"
    } elseif { [catch { set linelen [llength $line] }] \
    	       || $linelen != $length } {
	error "Badly formatted `$type' line:\n\
	      \   $line"
    } else {
	set ${type}_array($dirname) $line
    }
}

# Read trackfinder output from the input channel and
# accumulate data in info_array, rec_array, ...,
# chk_array, err_array.
#
proc read_input { ch } {

    global info_array rec_array ext_array bin_array \
           out_array sco_array rep_array got_array \
	   pid_array chk_array err_array

    set line [gets $ch]
    if { [eof $ch] } return

    while { "yes" } {

        # Read submit_time and dirname.
	#
	if { [llength $line] < 3 \
	     || ! [lcontain {sub dir} \
	                    [lindex $line 0]] } {
	    error "Non `sub' or `dir' line from\
	           `trackfinder':\n    $line"
	}
	set date	[lindex $line 1]
	set submit_time	[filename_date_to_clock $date]
	if { [lindex $line 0] == "sub" } {
	    set submitter [lindex $line 2]
	    set dirname \
	        "$date-<<$submitter>>-submission"
	} else {
	    set dirname [lindex $line 2]
	}

        # Clear previous knowledge about dirname.
	#
	if { [info exists info_array($dirname)] } {
	    unset info_array($dirname)
	    if { [info exists rec_array($dirname)] } {
		unset rec_array($dirname)
	    }
	    if { [info exists ext_array($dirname)] } {
		unset ext_array($dirname)
	    }
	    if { [info exists bin_array($dirname)] } {
		unset bin_array($dirname)
	    }
	    if { [info exists out_array($dirname)] } {
		unset out_array($dirname)
	    }
	    if { [info exists sco_array($dirname)] } {
		unset sco_array($dirname)
	    }
	    if { [info exists rep_array($dirname)] } {
		unset rep_array($dirname)
	    }
	    if { [info exists got_array($dirname)] } {
		unset got_array($dirname)
	    }
	    if { [info exists chk_array($dirname)] } {
		unset chk_array($dirname)
	    }
	    if { [info exists err_array($dirname)] } {
		unset err_array($dirname)
	    }
	    if { [info exists pid_array($dirname)] } {
		unset pid_array($dirname)
	    }
	}

	# Read and save information about dirname.
	#
	set info_array($dirname) [list $line]

	while { "yes" } {
	    set line [gets $ch]
	    if { [eof $ch] } break

	    if { [llength $line] == 0 } continue
	    switch [lindex $line 0] {
	    sub {
		    break
		}
	    dir {
		    break
		}
	    rec {
		    save_line $line rec 3 $dirname
		}
	    ext {
		    save_line $line ext 3 $dirname
		}
	    bin {
		    save_line $line bin 3 $dirname
		}
	    out {
		    save_line $line out 3 $dirname
		}
	    sco {
		    save_line $line sco 5 $dirname
		}
	    rep {
		    save_line $line rep 3 $dirname
		}
	    got {
		    save_line $line got 2 $dirname
		}
	    pid {
		    save_line $line pid 3 $dirname
		}
	    chk {
		    if { [catch { set len \
		                      [llength $line] \
				}] \
		         || $len != 3 } {
			error "Badly formatted `chk'\
			       line:\n    $line"
		    } else {
			set file [lindex $line 2]
			lappend chk_array($dirname) \
				$file
		    }
		}
	    err {
		    if { [catch { set len \
		                      [llength $line] \
				}] \
		         || $len != 3 } {
			error "Badly formatted `err'\
			       line:\n    $line"
		    } else {
			set file [lindex $line 2]
			lappend err_array($dirname) \
				$file
		    }
		}
	    }
	    lappend info_array($dirname) $line
	}

	if { [eof $ch] } break
    }
}

# Read or re-read all input sources.  Clear data arrays
# first.
#
proc read_all_sources {} {

    global default_log_directory \
           judging_directory \
	   info_array rec_array ext_array bin_array \
           out_array sco_array rep_array got_array \
	   pid_array chk_array err_array

    # Unset all arrays.
    #
    foreach x { info_array rec_array ext_array bin_array
                out_array sco_array rep_array got_array
	        pid_array chk_array err_array } {
    	if { [info exists $x] } {
	    unset $x
	}
    }

    # Read from judging directory.
    #
    set ch [open "|trackfinder" r]
    read_input $ch
    close $ch

    # Read from log directory.
    #
    if { [file isdirectory $judging_directory/log] } {
	set ch \
	    [open \
	       "|trackfinder $judging_directory/log" r]
	read_input $ch
	close $ch
    }

    # Read from default log directory.
    #
    if { [file isdirectory $default_log_directory] } {

    	# Be sure hpcm_judging.rc is symbolically linked
	# into this directory so trackfinder and manual
	# reply can work in the directory.
	#
	set jp hpcm_judging.rc
	set dldjp $default_log_directory/$jp
	set jdjp $judging_directory/$jp
	if { ! [regexp {^/} $jdjp] } {
	    set jdjp "[pwd]/$jdjp"
	}
	while { [regsub \
		 {/([^/.]|\.[^/.])[^/]*/\.\./} \
		 $jdjp {/} jdjp] > 0 } {}
	file delete -force $dldjp
	link_file $jdjp $dldjp

	# Read from default logging directory.
	#
	set ch [open "|trackfinder\
	              $default_log_directory" r]
	read_input $ch
	close $ch
    }
}

# Function to return time summary by problem.
# Arguments are possible times: min, med(ian), avg, max.
#
proc time_summary { args } {

    global rec_array ext_array bin_array out_array \
           sco_array

    set disp_min 0
    set disp_med 0
    set disp_avg 0
    set disp_max 0
    foreach xxx $args {
        if { ! [lcontain {min med max avg} $xxx] } {
	    error "BAD argument to ti command\
	          `$xxx'."
	}
        set disp_$xxx 1
    }

    set r "
			            Times in Seconds
Problem		  sub-rec rec-ext ext-bin bin-out\
                  out-aut   aut-man   sub-man
"

    foreach dir [array names rec_array] {

        set rec_line $rec_array($dir)
	set rec_time [lindex $rec_line 1]
	set subject [lindex $rec_line 2]
	if {    [catch { set len [llength $subject] }] \
	     || $len != 2 \
	     || [lindex $subject 0] != "submit" } {
	    continue
	}
	set problem [file rootname [lindex $subject 1]]

	if { ! [info exists ext_array($dir)] } \
	    continue
        set ext_line $ext_array($dir)
	set ext_time [lindex $ext_line 1]

	lappend sub_rec_array($problem) $rec_time

	set rec_ext_time \
	    [expr { $ext_time - $rec_time }]
	lappend rec_ext_array($problem) $rec_ext_time

	if { ! [info exists bin_array($dir)] } \
	    continue
        set bin_line $bin_array($dir)
	set bin_time [lindex $bin_line 1]
	set bin_time2 [lindex $bin_line 2]
	if { $bin_time < $bin_time2 } {
	    set bin_time $bin_time2
	}

	set ext_bin_time \
	    [expr { $bin_time - $ext_time }]
	lappend ext_bin_array($problem) $ext_bin_time

	if { ! [info exists out_array($dir)] } \
	    continue
        set out_line $out_array($dir)
	set out_time [lindex $out_line 1]
	set out_time2 [lindex $out_line 2]
	if { $out_time < $out_time2 } {
	    set out_time $out_time2
	}

	set bin_out_time \
	    [expr { $out_time - $bin_time }]
	lappend bin_out_array($problem) $bin_out_time

	if { ! [info exists sco_array($dir)] } \
	    continue
        set sco_line $sco_array($dir)
	set aut_time [lindex $sco_line 1]
	set man_time [lindex $sco_line 2]

	if { $aut_time != "" } {

	    set out_aut_time \
		[expr { $aut_time - $out_time }]
	    lappend out_aut_array($problem) \
	    	    $out_aut_time
	}

	if { $aut_time != "" && $man_time != "" } {

	    set aut_man_time \
		[expr { $man_time - $aut_time }]
	    lappend aut_man_array($problem) \
	    	    $aut_man_time
	}

	if { $man_time != "" } {

	    lappend sub_man_array($problem) $man_time
	}
    }

    foreach problem \
            [lsort [array names sub_rec_array]] {

        set min_time ""
        set avg_time ""
        set med_time ""
        set max_time ""

	foreach xxx_yyy { sub_rec rec_ext ext_bin \
	                  bin_out out_aut aut_man \
			  sub_man } {
	    if { ! [info \
	              exists \
	              ${xxx_yyy}_array($problem)] } {
		if { ! [info \
			  exists \
			  sub_man_array($problem)] } \
		     break
		elseif { [regexp {(^sub_|_man$)} \
				 $xxx_yyy] } {
		    set spaces "          "
		} else {
		    set spaces "        "
		}

		set min_time "$min_time$spaces"
		set med_time "$med_time$spaces"
		set avg_time "$avg_time$spaces"
		set max_time "$max_time$spaces"

		continue
	    }

	    if { [regexp {(^sub_|_man$)} $xxx_yyy] } {
	        set format { %9d}
	    } else {
	        set format { %7d}
	    }
	    set times \
		[lsort -integer \
		       [set ${xxx_yyy}_array($problem)]]
	    set min \
		[format $format [lindex $times 0]]
	    set len [llength $times]
	    set med [expr { $len / 2 }]
	    set med \
		[format $format [lindex $times $med]]
	    set avg 0
	    foreach t $times {
	        incr avg $t
	    }
	    set avg \
		[format $format [expr { $avg / $len }]]
	    incr len -1
	    set max \
		[format $format [lindex $times $len]]

	    set min_time "$min_time$min"
	    set med_time "$med_time$med"
	    set avg_time "$avg_time$avg"
	    set max_time "$max_time$max"
	}

	set pr ""
	if { $disp_min } {
	   set pr "$pr\n           min:$min_time"
	}
	if { $disp_med } {
	   set pr "$pr\n           med:$med_time"
	}
	if { $disp_avg } {
	   set pr "$pr\n           avg:$avg_time"
	}
	if { $disp_max } {
	   set pr "$pr\n           max:$max_time"
	}
	set r "$r\n[format {%-10.10s} $problem]\
	           [string range $pr 12 end]"
    }

    return $r
}

# Score summaries.
#
# score_array(submitter/problem) is a list of items of
# the form { submission-time, score } where the submis-
# sion-time is a 14 digit integer suitable for sorting
# and the score is a two letter abbreviation for the
# score according to:
#
set "score_id_array(Incorrect Output)" io
set "score_id_array(Completely Correct)" cc
set "score_id_array(Formatting Error)" fe
set "score_id_array(Incomplete Output)" ic
set "score_id_array(Syntax Error)" se
set "score_id_array(Cpu Time Limit Exceeded)" te
set "score_id_array(Program Crashed)" pc
set "score_id_array(Output Size Limit Exceeded)" oe
#
# problem_array(problem) is the total number of submis-
# sions for the problem.  submitter_array(submitter) is
# the total number of submissions for the submitter.
#
# For every problem and submitter, all submissions after
# the first `Completely Correct' submission are not in
# any of the arrays just described.

# Function to compute score_array.
#
proc compute_score_array {} {

    global rec_array sco_array score_id_array \
           score_array problem_array submitter_array \
	   info_array

    if { [info exists score_array] } {
    	unset score_array
    }
    if { [info exists problem_array] } {
    	unset problem_array
    }
    if { [info exists submitter_array] } {
    	unset submitter_array
    }

    foreach dir [array names sco_array] {

        set sco_line $sco_array($dir)
	if { [lindex $sco_line 2] != "" } {
	    set score [lindex $sco_line 4]
	} else {
	    set score [lindex $sco_line 3]
	}
	if { [regexp : $score] } {
	    set score [lrange $score 1 end]
	}
	if { ! [info exists score_id_array($score)] } {
	    error "STRANGE SCORE `$score':\
	          $dir\n$info_array($dir)"
	} else {
	    set score $score_id_array($score)
	}

	if { ! [regexp \
	            {^([^<>]*)-<<(.*)>>-submission$} \
		    $dir forget date submitter] } {
	    set time 0
	    set submitter UNKNOWN
	} else {
	    if { $submitter == "" } {
		set submitter UNKNOWN
	    } else {
		set submitter \
		    [submitter_compress $submitter]
	    }
	    set time [filename_date_to_clock $date]
	}
	set time [format {%014d} $time]

	if { ! [info exists rec_array($dir)] } {
	    error "NO RECEIVED MAIL:\
	           $dir\n$info_array($dir)"
	} else {
	    set rec_line $rec_array($dir)
	    set subject [lindex $rec_line 2]
	    if {    [catch { set len \
	    			 [llength $subject] }] \
		 || $len < 2 \
		 || $len > 3 \
		 || [lindex $subject 0] != "submit" } {
		error "STRANGE SUBJECT `$subject':\
		      $dir\n$info_array($dir)"
	    }
	    set problem \
	    	[file rootname [lindex $subject 1]]
	}

        set item [list $time $score]
	set sp "$submitter/$problem"
	lappend score_array($sp) $item
    }

    foreach sp [array names score_array] {
        regexp {^([^/]*)/([^/]*)$} $sp \
	       forget submitter problem

	set items [lsort $score_array($sp)]
	set score_array($sp) $items
	set count [llength $items]

	if { [info exists \
		   problem_array($problem)] } {
	    incr problem_array($problem) $count
	} else {
	    set problem_array($problem) $count
	}

	if { [info exists \
		   submitter_array($submitter)] } {
	    incr submitter_array($submitter) $count
	} else {
	    set submitter_array($submitter) $count
	}
    }
}

# Function to return score summary by problem or
# submitter.  The `kind' argument equals `problem' or
# `submitter'.
#
proc score_summary { kind } {

    compute_score_array

    global score_array ${kind}_array

    set r "
			    	  Number of Submissions
[format {%-14.14s} [string toupper $kind 0 0]]"
    set r "$r    cc    io    fe    ic    se    te   \
                 pc    oe    ac    total\n"

    foreach xx {cc io fe ic se te pc oe ac} {
	set ${xx}_total 0
    }

    foreach item \
            [lsort [array names ${kind}_array]] {

	foreach xx {cc io fe ic se te pc oe ac} {
	    set $xx 0
	}

	switch $kind {
	    problem { set sp_match "*/$item" }
	    submitter { set sp_match "$item/*" }
	}

	foreach sp [array names score_array $sp_match] {
	    set cc_found no
	    foreach score_item $score_array($sp) {
	        if { $cc_found } {
		    incr ac
		} else {
		    set score [lindex $score_item 1]
		    incr $score
		    if { $score == "cc" } {
		        set cc_found yes
		    }
		}
	    }
	}

	set item_total 0
	set line [format {%-14.14s} $item]
	foreach xx {cc io fe ic se te pc oe ac} {
	    if { [set $xx] == 0 } {
	        set line "$line    --"
	    } else {
	        set line \
		    "$line[format {%6d} [set $xx]]"
	    }
	    incr ${xx}_total [set $xx]
	    incr item_total [set $xx]
	}
	set line "$line  [format {%6d} $item_total]"
	set r "$r\n$line"
    }

    set line [format {%-14.14s} ""]
    foreach xx {cc io fe ic se te pc oe ac} {
	set line "$line -----"
    }
    set line "$line   -----"
    set r "$r\n$line"

    set total 0
    set line [format {%-14.14s} "Total"]
    foreach xx {cc io fe ic se te pc oe ac} {
	set line "$line[format {%6d} [set ${xx}_total]]"
	incr total [set ${xx}_total]
    }
    set line "$line  [format {%6d} $total]"
    set r "$r\n$line"
    
    return $r
}

# List of directories.  Used to select directories
# for manualreply.
#
set directory_list ""
set directory_list_length 0

# Clear the directory list.
#
proc clear_list {} {
    global directory_list directory_list_length
    set directory_list		""
    set directory_list_length	0
}

# All the add_xxx functions return a printable summary
# string that contains EXACTLY two lines per directory.
# There is a blank line (initial \n) at the beginning
# of the returned string and NO \n after the last line.

# Add directories with unchecked errors to directory
# list, and return printable summary string.  Director-
# ies are listed so ones with the oldest unchecked error
# files are first.  The oldest error file is listed for
# each directory.
#
proc add_err {} {

    global directory_list directory_list_length \
    	   err_array

    set items ""
    foreach dir [lsort [array names err_array]] {
        set files [lsort $err_array($dir)]
	if { [llength $files] == 0 } continue
	lappend items [list [lindex $files 0] $dir]
    }
    set result ""
    foreach item [lsort $items] {
        set file [lindex $item 0]
        set dir  [lindex $item 1]
	lappend directory_list $dir
	incr directory_list_length
	set result "$result\n[format {%3d. %s} \
	     $directory_list_length $dir]"
	set result "$result\n         $file"
    }

    return $result
}

# Add directories with `Subject:'s not handled by auto-
# dispatch and without any Reply_Mail or No_Reply file
# to the directory list, and return a printable summary
# string.  Directories are sorted by directory name.
# The subject of the Received_Mail in each directory is
# listed.
#
proc add_queries {} {

    global directory_list directory_list_length \
    	   rec_array rep_array autodispatch_map

    set result ""
    foreach dir [lsort [array names rec_array]] {
	if { [info exists rep_array($dir)] } {
	    continue
	}
        set rec_line $rec_array($dir)
	set subject [lindex $rec_line 2]
	if {    ! [catch { set dword \
			       [lindex $subject 0] }] \
	     && [llength $subject] >= 1 \
	     && [info exists \
	              autodispatch_map($dword)] } {
	    continue
	}

	lappend directory_list $dir
	incr directory_list_length
	set result "$result\n[format {%3d. %s} \
	                      $directory_list_length \
			      $dir]"
	set result "$result\n         Subject: $subject"
    }

    return $result
}

# Add directories with too old Dispatch_PID files to
# directory list, and return printable summary string.
# The directories are sorted by name, and the elapsed
# time between when the Dispatch_PID file was created
# and when trackfinder was run is listed.
#
proc add_pid { { too_old "" } } {

    global directory_list directory_list_length \
    	   pid_array dispatch_too_old

    set result ""
    if { $too_old == "" } {
	set too_old $dispatch_too_old
    }
    foreach dir [lsort [array names pid_array]] {
        set pid_line $pid_array($dir)
	set mtime [lindex $pid_line 1]
	set rtime [lindex $pid_line 2]
	set elapsed [expr { $rtime - $mtime }]
	if { $elapsed < $too_old } continue

	lappend directory_list $dir
	incr directory_list_length
	set result "$result\n[format {%3d. %s} \
	                      $directory_list_length \
			      $dir]"
	set result "$result\n         running for\
		    $elapsed seconds"
    }

    return $result
}

# Add directories with Auto_Score file and no
# Reply_Mail, No_Reply, or Dispatch_PID file.
# The directories are sorted by name, and the subject
# of the Received_Mail in each directory is listed.
#
proc add_score {} {

    global directory_list directory_list_length \
    	   sco_array pid_array rep_array rec_array

    set result ""
    foreach dir [lsort [array names sco_array]] {
        set sco_line $sco_array($dir)
	set auto_score [lindex $sco_line 3]
	if { [regexp : $auto_score] } {
	    set auto_score [lrange $auto_score 1 end]
	}
	if { $auto_score == "" } {
	    continue
	}
	if { [info exists rep_array($dir)] } {
	    continue
	}
	if { [info exists pid_array($dir)] } {
	    continue
	}
	if { [info exists rec_array($dir)] } {
	    set subject [lindex $rec_array($dir) 2]
	} else {
	    set subject "submit ???"
	}

	lappend directory_list $dir
	incr directory_list_length
	set result "$result\n[format {%3d. %s} \
	                      $directory_list_length \
			      $dir]"
	set result "$result\n         Subject: $subject\
	            Score: $auto_score"
    }

    return $result
}

# Add directories with `Subject:'s handled by autodis-
# patch and without any Reply_Mail or No_Reply files
# to the directory list, and return a printable summary
# string.  The directories are sorted by name, and the
# `Subject"' of each directory is listed.  If a direc-
# tory has a Dispatch_PID file, the elapsed time between
# when that file was created and when trackfinder was
# run is also listed.
#
proc add_auto {} {

    global directory_list directory_list_length \
    	   rec_array rep_array pid_array \
	   autodispatch_map

    set result ""
    foreach dir [lsort [array names rec_array]] {
	if { [info exists rep_array($dir)] } {
	    continue
	}
        set rec_line $rec_array($dir)
	set subject [lindex $rec_line 2]
	if {    [catch { set dword \
			       [lindex $subject 0] }] \
	     || [llength $subject] < 1 \
	     || ! [info exists \
	                autodispatch_map($dword)] } {
	    continue
	}

	lappend directory_list $dir
	incr directory_list_length
	set result "$result\n[format {%3d. %s} \
	                      $directory_list_length \
			      $dir]"
	if { [info exists pid_array($dir)] } {
	    set pid_line $pid_array($dir)
	    set mtime [lindex $pid_line 1]
	    set rtime [lindex $pid_line 2]
	    set elapsed [expr { $rtime - $mtime }]

	    set result "$result\n         Subject:\
	                $subject       running for\
			$elapsed seconds"
	} else {
	    set result "$result\n         Subject:\
	                $subject"
	}
    }

    return $result
}

# Clip output of add functions to n - m directories.
# Returns empty string if n - m <= 0.
#
proc clip { out m n } {
    set limit [expr { $n - $m }]
    set outlist [split $out "\n"]
    set len [llength $outlist]
    if { 2 * $limit < $len - 1 } {
	set offset [expr { 2 * $limit }]
	set out [join [lrange $outlist 0 $offset] "\n"]
    }
    return $out
}

# Return summary of successful replies, etc. as one or
# two lines without any beginning or ending "\n".
#
proc summary {} {

    global rec_array rep_array err_array chk_array

    set replies 0
    set no_replies 0
    set submits 0
    set gets 0
    set queries 0
    set uncheckeds 0
    set checkeds 0

    foreach dir [array names rec_array] {
        set rec_line $rec_array($dir)
	set subject [lindex $rec_line 2]
	if { [catch { set dword \
			  [lindex $subject 0] }] } {
	    incr queries
	} elseif { $dword == "submit" } {
	    incr submits
	} elseif { $dword == "get" } {
	    incr gets
	} else {
	    incr queries
	}
	if { [info exists rep_array($dir)] } {
	    set rep_line $rep_array($dir)
	    if { [lindex $rep_line 1] != "" } {
	        incr replies
	    } else {
	        incr no_replies
	    }
	}
	if { [info exists err_array($dir)] } {
	    incr uncheckeds
	}
	if { [info exists chk_array($dir)] } {
	    incr checkeds
	}
    }

    set r1 ""
    set r2 ""
    if { $submits != 0 } {
        set r1 "$r1, $submits Submits"
    }
    if { $gets != 0 } {
        set r1 "$r1, $gets Gets"
    }
    if { $queries != 0 } {
        set r1 "$r1, $queries Queries"
    }
    if { $replies != 0 } {
        set r1 "$r1, $replies Replies"
    }
    if { $no_replies != 0 } {
        set r1 "$r1, $no_replies No Replies"
    }
    if { $checkeds != 0 } {
        set r2 "$r2, $checkeds Checked Errors"
    }
    if { $uncheckeds != 0 } {
        set r2 "$r2, $uncheckeds UNCHECKED Errors"
    }
    set r [string range $r1$r2 2 end]
    if { [string length $r] > 79 } {
        set r1 [string range $r1 2 end]
        set r2 [string range $r2 2 end]
	set r "$r1\n$r2"
    }
    return $r
}

# Recompute and display list of directories.  If list
# is empty, display summary.
#
proc display_directory_list {} {

    global directory_list_length \
    	   directory_list judging_directory

    clear_list

    set err_list [add_err]
    set err_last $directory_list_length
    set queries_list [add_queries]
    set queries_last $directory_list_length
    set pid_list [add_pid]
    set pid_last $directory_list_length
    set score_list [add_score]
    set score_last $directory_list_length

    if { $directory_list_length == 0 } {

    	# Come here if the only directories that might
	# be interesting are those being processed by
	# autodispatch.

	set auto_list [add_auto]
	if { $directory_list_length != 0 } {

	    # If there are directories being
	    # processed, rerun trackfinder on
	    # these and relist them.

	    set list ""
	    foreach dir $directory_list {
		if { [regexp \
		      {^[^<>]*-<<.*>>-submission$} \
		      $dir] } {
		    set dir $judging_directory/mail/$dir
		}
		lappend list $dir
	    }
	    set ch [open "|trackfinder\
			  [join $list]" r]
	    read_input $ch
	    close $ch
	    clear_list
	    set auto_list [add_auto]
	}

	if { $directory_list_length == 0 } {
	    puts "\n\n\n\n\n\n\n\n[summary]"
	} else {
	    puts "1-$directory_list_length.\
		  Are being automatically\
		  processed;"
	    puts "You should not need to do\
		  anything."
	    puts [clip $auto_list 0 5]
	}
    } else {

    	# Come here if there are directories ready
	# for error analysis, query response,
	# manual scoring, or checking for too old
	# Dispatch_PID files.

	set o ""
	set f 0
	if { $err_list != "" } {
	    incr f
	    set o "$o\n$f-$err_last. \
		   Unchecked Errors"
	    set o \
		"$o[clip $err_list 0 5]"
	    set f $err_last
	}
	if { $queries_list != "" } {
	    incr f
	    set o "$o\n$f-$queries_last. \
		   Queries"
	    set o \
		"$o[clip $queries_list $err_last 5]"
	    set f $queries_last
	}
	if { $pid_list != "" } {
	    incr f
	    set o "$o\n$f-$pid_last. \
		   Stuck Submissions"
	    set o \
		"$o[clip $pid_list $queries_last 5]"
	    set f $pid_last
	}
	if { $score_list != "" } {
	    incr f
	    set o "$o\n$f-$score_last. \
		   Submissions Needing Manual\
		   Scoring"
	    set o \
		"$o[clip $score_list $pid_last 5]"
	    set f $score_last
	}
	puts $o
    }
}

# Given the number of an entry in the directory list,
# call manualreply for that directory, and on return
# reread that directory.  Return a string that can be
# printed to indicate success or failure.
#
proc call_manualreply { index } {

    global directory_list directory_list_length \
	   judging_directory

    if { $index < 1 \
	 || $index > $directory_list_length } {
	return "$index out of range"
    }

    set dir \
	[lindex $directory_list [expr { $index - 1 }]]

    if { [regexp {^[^<>]*-<<.*>>-submission$} $dir] } {
	set dir $judging_directory/mail/$dir
    }

    exec manualreply $dir >@ stdout 2>@ stderr

    set ch [open "| trackfinder $dir" r]
    read_input $ch
    close $ch

    return "Done with [file tail $dir]"
}

proc display_help { arg } {

    puts "HELP `$arg'"

    switch $arg {
	{} {
	    puts "
? = display this help page	q = x = control-D = exit
ls = update information about directories that may need\
            attention and display
     a prioritized list of such directories.  Details\
	    are given only for the
     first directories in this list.
# = call manualreply for directory # of the `ls'\
            directory list.
ti \[min\] \[med\] \[avg\] \[max\] = display by problem\
            information about the
   times taken by various steps in judging the\
            problems.  Type `? ti' for
   more details.
pr = display by problem counts of the number of\
            submissions with different
     final scores.  Type `? pr' for more details.
su = display by submitter counts of the number of\
            submissions with different
     final scores.  Type `? su' for more details."
	return yes
	}

	{ti} {
	    puts "
ti \[min\] \[med\] \[avg\] \[max\] = display by problem\
	    information about the
   times taken by various steps in judging the\
   	    problems.  The event names
   are:

   	sub = submission time
	rec = mtime of Received_Mail in which\
		    submission email is stored
	ext = mtime of source (.c, .cc, .java, etc.)\
		    file most recently
	      extracted from email
	bin = max of mtimes of binary output and .cerr\
		    files
	out = max of mtimes of .out and .err files
	aut = mtime of Auto_Score
	man = mtime of Manual_Score

    sub-rec is the time in seconds from sub to rec,
    rec-ext is the time in seconds from rec to ext,
    etc.
    
    By `mtime' of a file we mean the time the file was\
		    last modified."
	return yes
	}

	{su} -
	{pr} {
	    puts "
pr = display by problem counts of the number of\
	    submissions with different
     final scores.
su = display by submitter counts of the number of\
	    submissions with different
     final scores.

The column headings denote score values as follows:

    io = Incorrect Output      cc = Completely Correct 
    fe = Formatting Error      ic = Incomplete Output
    se = Syntax Error          te = Cpu Time Limit\
					Exceeded
    pc = Program Crashed       oe = Output Size Limit\
					Exceeded

    ac = any submission ignored because it was made
         AFTER a Completely Correct submission
"
	    return yes
	}
	default {
	    return no
	}
    }
}

# Initialize data base.
#
read_all_sources

# Main menu loop.
#
# The display consists of what the command prints
# followed by a blank line, a second line (or lines)
# equal to $output, and then the prompt line.
#
set default_output "? = help   ls = directory list  \
                    # = manualreply directory #  \
		    ti = times  etc"
set output $default_output
display_directory_list
while { "yes" } {

    puts ""
    puts "$output"
    puts -nonewline "> "
    flush stdout

    set answer [string trim [gets stdin]]
    if { [eof stdin] } break

    set output $default_output

    if { [catch { switch -regexp -- $answer {
	{^ti} {
	    set args [lrange $answer 1 end]
	    if { [llength $args] == 0 } {
		set args {med avg}
	    }
	    puts [eval time_summary $args]
	    set output "ti \[min\] \[med\] \[avg\]\
	                \[max\] = display min, median,\
			average, max times"
	}
	{^pr} {
	    puts [score_summary problem]
	}
	{^su} {
	    puts [score_summary submitter]
	}
	{^ls$} -
	{^di} -
	{^li} {
	    read_all_sources
	    display_directory_list
	}
	{^[0-9]+$} {
	    set output [call_manualreply $answer]
	    display_directory_list
	}
	{^q} -
	{^x} {
	    exit 0
	}
	{^\?} {
	    regexp "^\\?\[ \t\]*(\[^ \t\]*)\$" \
	           $answer forget arg
	    if { [display_help $arg] == "no" } {
		set output "Did not understand\
		            `$answer'.  Type ? for\
			    help."
		display_directory_list
	    }
	}
	default {
	    set output "Did not understand `$answer'.  \
	                Type ? for help."
	    display_directory_list
	}
    } } out] } {
        puts "\n\n\n\n"
	puts "============== ERROR =============="
        puts $out
	puts "==================================="
	puts [join \
		[concat \
		   [lrange [split $errorInfo "\n"] \
		   	   0 9] \
		   [list ". . . . ."]] \
	        "\n"]
	puts "==================================="
	set output "ERROR executing `$answer'.  \
	                Type ? for help."
    }
}

exit 0

# Include common error catching code:
#
} caught_output
caught_error
