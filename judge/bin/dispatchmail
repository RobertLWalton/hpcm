#!/bin/sh -f
#
# Reads a list of mail directory subdirectory names
# from the standard input and calls autodispatch
# on each.
#
# File:		dispatchmail
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Mon Aug 28 07:05:40 EDT 2000
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: acm-cont $
#   $Date: 2000/08/28 13:02:16 $
#   $RCSfile: dispatchmail,v $
#   $Revision: 1.1 $
#
# The next line starts tcl \
exec tcl "$0" "$@"

# Use tcl rather than tclsh so that `signal' is defined.

# If an argument is given, use it as a name of a
# directory to make current, and consume the argument.
# This must be done before looking for the parameters
# file.
#
# Don't change argc or argv so error output will work.
#
set my_argc $argc
set my_argv $argv
if { $argc >= 1 && ! [regexp {^-} [lindex $argv 0]] } {
    cd [lindex $argv 0]
    set my_argv [lreplace $argv 0 0]
    set my_argc [expr { $argc - 1 }]
}

# Include common code and parameters:
#
set lib_directory "[file dirname $argv0]/../lib"
source "$lib_directory/judging_common.tcl"
catch {

set document "
dispatchmail \[directory\]

    If the directory argument is given, this program
    makes that directory current before searching for
    the `$judging_parameters_file' file or doing
    anything else.

    This program then reads directory names, one per
    line, from the standard input.  Treating each as the
    name of a subdirectory of the mail directory, this
    program calls `autodispatch' for each subdirectory.

    This program outputs each subdirectory name just
    before it calls autodispatch for the subdirectory."


if { $my_argc != 0 } {
    puts $document
    exit 1
}

while { "yes" } {
    set subdirectory [gets stdin]
    if { [eof stdin] } break
    puts $subdirectory
    exec autodispatch "$mail_directory/$subdirectory"
}

exit 0

# Include common error catching code:
#
} caught_output
caught_error
