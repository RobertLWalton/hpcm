#!/bin/sh
#
# Reads a list of mail directory subdirectory names
# from the standard input and calls autodispatch
# on each.
#
# File:		dispatchmail
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Sat Oct  1 15:36:22 EDT 2005
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: hc3 $
#   $Date: 2005/10/01 19:30:45 $
#   $RCSfile: dispatchmail,v $
#   $Revision: 1.11 $
#
# The next line starts tcl \
exec tcl "$0" "$@"

# Use tcl rather than tclsh so that `signal' is defined.

# Compute absolute name of current directory as we
# may change the current directory.
#
set current_directory [file dirname $argv0]
if { ! [regexp {^/} $current_directory] } {
    set current_directory [pwd]/$current_directory
}

# If an argument is given, use it as a name of a
# directory to make current, and consume the argument.
# This must be done before looking for the parameters
# file.
#
# Don't change argc or argv so error output will work.
#
set my_argc $argc
set my_argv $argv
if { $my_argc >= 1 \
     && ! [regexp {^-} [lindex $my_argv 0]] } {
    cd [lindex $my_argv 0]
    set my_argv [lrange $my_argv 1 end]
    incr my_argc -1
}

# Include common code and parameters:
#
set lib_directory "$current_directory/../lib"
source $lib_directory/judging_common.tcl
set log_globally yes
catch {

set document "
dispatchmail \[directory\]

    If the directory argument is given, this program
    makes that directory current before searching for
    the `hpcm_judging.rc' file or doing anything else.

    After reading the `hpcm_judging.rc' file, this pro-
    gram then reads subdirectory names, one per line,
    from the standard input.  Treating each as the name
    of a subdirectory of the mail directory, this pro-
    gram calls `autodispatch' for each subdirectory.
    When `autodispatch' is called, the standard output
    and error output is sent to /dev/null to be dis-
    carded.

    This program outputs each subdirectory name just
    before it calls autodispatch for the subdirectory."


# If any arguments left, print documentation and exit.
#
if { $my_argc != 0 } {
    puts $document
    exit 1
}

# For each subdirectory name read from stdin, execute
# autodispatch.
#
while { "yes" } {
    set subdirectory [gets stdin]
    if { [eof stdin] } break
    puts $subdirectory
    exec autodispatch >& /dev/null \
                      $mail_directory/$subdirectory
}

exit 0

# Include common error catching code:
#
} caught_output
caught_error
