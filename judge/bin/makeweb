#!/bin/sh
#
# Make a `web' directory containing the problem
# statements and optionally solutions of a contest,
# and optionally for email contests a description
# of how to submit a problem.
#
# File:		makeweb
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Fri May 24 22:26:53 EDT 2013
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: walton $
#   $Date: 2013/05/25 02:27:17 $
#   $RCSfile: makeweb,v $
#   $Revision: 1.34 $
#
# The next lines start tclsh \
trap "echo makeweb: Terminated by Signal" \
    HUP INT QUIT; \
tclsh "$0" "$@"; exit $status

# Include common code and parameters:
#
set lib_directory "[file dirname $argv0]/../lib"
set log_disable yes
source $lib_directory/judging_common.tcl
catch {

set document "
makeweb \[ parameter-file-name | \\
           parameter-name-value-list \] ...

  When this program starts, it processes its arguments
  as follows.  Any named parameter file is `sourced'.
  Any argument that begins with a `{' is treated as a
  TCL list (after the outer `{ }' brackets are removed)
  of items each of the format `{PN V}'.  For each item,
  the global variable `web_PN' is set to the value V.

  This program makes a web directory for a contest.
  Other directories such as, info, contest/help,
  contest/problems, and solutions must already exist.
  The web directory contains an index.html file, the
  ./help/this_contest file if that is readable, option-
  ally a problem subdirectory with problem descriptions,
  and optionally a password protected problem solutions
  subdirectory containing problem solutions.  The web
  directory can be copied to another location and made
  accessible to the WWW.

  Options are controlled by `web page parameter' global
  variables in hpcm_judging.rc.  See that file for
  documentation.

  If problem descriptions are to be include on the web
  page, the problems_print_files file must exist.  Sim-
  ilarly if solutions are to be included, the problems_
  solution_files file must exist.

  Unlike most HPCM judging programs, errors made by this
  program are not written to log files, but are announ-
  ced on the standard error output."

# } This closes extra left bracket in documentation so
# outer {} brackets work.

# On first -doc* argument, print documentation and exit.
#
if { [regexp {^-doc} [lindex $argv 0]] } {
    puts $document
    exit 1
}

# Process arguments.
#
set LB "{"
# } to balance left bracket in last line
#
foreach arg $argv {
    if { [regexp "^${LB}" $arg] } {
	if { [catch { set items [lindex $arg 0] }] } {
	    error "argument is not a TCL list: $arg"
	}
	foreach item $items {
	    if { [catch { set len [llength $item] }] \
	         || $len != 2 } {
	        "argument element is not a length 2\
		 TCL list: $item"
	    }
	    set name  [lindex $item 0]
	    set value [lindex $item 1]
	    if { ! [info exists web_$name] } {
	    	error "web_$name does not exist"
	    }
	    set web_$name $value
	}
    } else {
	source $arg
    }
}

# Exit with message if web_title does not exist or
# is "".
#
if {    ! [info exists web_title] \
     || $web_title == "" } {
    puts "Web page not made\
          (web_title does not exist or is \"\")."
    exit 0
}

# Set default web_directory.
#
if {    ! [info exists web_directory] \
     || $web_directory == "" } {
    set web_directory $judging_directory/web
}

# Abbreviations to shorten lines.
#
set j_d $judging_directory
set c_d $judging_directory/contest
set w_d $web_directory
set p_d $w_d/problems
set r_d $w_d/private
set s_d $r_d/$web_solutions_password

# Complain of web directory already exists.
#
if { [file exists $w_d] } {
    error "$w_d already exists"
}

# Find problems and help directories and check
# their usability, and also check problems_print_files
# readability.
#
if { $web_problems != "no" } {
    set f $j_d/problems_print_files
    if { ! [file readable $f] } {
        error "$f is not readable"
    }
    set required_dirs { problems help }
} else {
    set required_dirs { help }
}
foreach d $required_dirs {
    if { [file exists $j_d/info/$d] } {
	set dir $j_d/info/$d
    } elseif { [file exists $c_d/$d] } {
	set dir $c_d/$d
    } else {
	error "cannot find `$d' directory"
    }
    if {    ! [file isdirectory $dir] \
	 || ! [file executable $dir] \
	 || ! [file readable $dir] } {
	error "`$dir' is not a useable directory"
    }
    set ${d}_dir $dir
}

# Be sure solutions directory and problems_solution_
# files exist if needed.
#
if { $web_solutions_password != "" } {
    set dir $j_d/solutions
    if {    ! [file isdirectory $dir] \
         || ! [file executable $dir] \
         || ! [file readable $dir] } {
	error "`$dir' is not a useable directory"
    }
    set f $j_d/problems_solution_files
    if { ! [file readable $f] } {
        error "$f is not readable"
    }
}

# Make web directory.
#
file mkdir $w_d
grant_access $w_d

# Copy this_contest if it exists.
#
if { [file readable $j_d/help/this_contest] } {
    copy_file $j_d/help/this_contest $w_d/this_contest
    grant_access $w_d/this_contest
}

# Set up defaults.
#
if { $web_body_attributes == "" } {
    set web_body_attributes \
        "LINK=\"blue\" VLINK=\"red\""
}
if { $web_header == "" } {
    set web_header "
<H1 ALIGN=\"CENTER\">
<FONT COLOR=\"red\">$web_title</FONT></H1>
"
}
if { $web_problems_header == "" } {
    set web_problems_header "
<H1 ALIGN=\"CENTER\">
<FONT COLOR=\"red\">$web_title</FONT></H1>
<H2 ALIGN=\"CENTER\">
<FONT COLOR=\"red\">Problem Descriptions</FONT></H2>
"
}
if { $web_solutions_header == "" } {
    set web_solutions_header "
<H1 ALIGN=\"CENTER\">
<FONT COLOR=\"red\">$web_title</FONT></H1>
<H2 ALIGN=\"CENTER\">
<FONT COLOR=\"red\">Problem Solutions</FONT></H2>
"
}

# Output $w_d/index.html

# Output header.
#
set ch [open $w_d/index.html w]
puts $ch "
<HTML>
<TITLE>$web_title</TITLE>
<BODY $web_body_attributes>
$web_header
$web_prefix
"

# Output list start.
#
puts $ch "
<UL>
"

# Output web list prefix elements if any.
#
if { $web_list_prefix_elements != "" } {
    puts $ch $web_description_prefix_elements
}

# Output E-mail Address of Autojudge if any.
#
if { $web_autojudge_address != "" } {
    set aja $web_autojudge_address
    set aja [regsub "<" $aja "&LT;"]
    set aja [regsub ">" $aja "&GT;"]
    puts $ch "
<LI> Autojudge Address: $aja
"
}

# Output Contest Description if any.
#
if { $web_description_URL != "" } {
    puts $ch "
<LI> <A HREF=\"$web_description_URL\">Contest\
                                      Description</A>
"
}

# Output help link if any.
#
if { $web_help_URL != "" } {
    puts $ch "
<LI> <A HREF=\"$web_help_URL\">Help and Demos Files</A>
"
}

# Output problem info.
#
if { $web_problems == "yes" } {
    puts $ch "
<LI><A HREF=\"problems/index.html\">Problem\
     Descriptions and Sample Input/Output</A>
"
} elseif { $web_problems == "protect" } {
    puts $ch "
<!-- To make problems visible remove these 2 lines and
     the comment end and execute 'chmod a+rx problems'.
<LI><A HREF=\"problems/index.html\">Problem
     Descriptions and Sample Input/Output</A>
-->
"
} elseif { $web_problems_URL != "" } {
    puts $ch "
<LI> <A HREF=\"$web_problems_URL\">Problem\
                                   Descriptions</A>
"
}

# Output scoreboard link.
#
if { $web_scoreboard_URL != "" } {
    puts $ch "
<LI> <A HREF=\"$web_scoreboard_URL\">Scoreboard</A>
"
}

# Output solutions information.
#
if { $web_solutions_password != "" } {

    puts $ch "
<LI>
Solutions are available at the URL made by adding
&nbsp;&nbsp;&nbsp;<CODE>private/pppp</CODE>&nbsp;&nbsp;&nbsp;
to the directory portion of the URL used to access this
page.  Here <CODE>pppp</CODE> is a password that you
must get from the managers of this web page.
"
}

# Output web list postfix elements if any.
#
if { $web_list_postfix_elements != "" } {
    puts $ch $web_description_postfix_elements
}

# Output List End and Postfix.
puts $ch "
</UL>
$web_postfix
"

# Output web page manager contact information.
#
if { $web_manager_address != "" } {
set address $web_manager_address
regsub -all {>} $address {\&gt;} address
regsub -all {<} $address {\&lt;} address
puts $ch "
<P ALIGN=\"center\"><FONT COLOR=\"purple\">
If you have questions email the manager of this
web page at <TT>$address</TT></FONT>"
}

# Output trailer for $w_d/index.html
#
puts $ch "
</BODY>
<HTML>"
close $ch
grant_access $w_d/index.html


# If web_problems not "no", output $w_d/problems and its
# contents.
#
if { $web_problems != "no" } {


    # Make $p_d and grant access if web_problems is
    # "yes".  Announce error if web_problems not "yes",
    # "no", or "protect".
    #
    file mkdir $p_d
    if { $web_problems == "yes" } {
        grant_access $p_d
    } elseif { $web_problems != "protect" } {
        error "web_problems is not \"no\", \"yes\",\
	       or \"protect\""
    }

    # Copy problems index.
    #
    copy_file $help_dir/problems $p_d/problems
    grant_access $p_d/problems

    # Output header for $p_d/index.html
    #
    set ch [open $p_d/index.html w]
    puts $ch "
<HTML>
<TITLE>$web_title Problem Descriptions</TITLE>
<BODY $web_body_attributes>
$web_problems_header
$web_problems_prefix
<P>
<A HREF=\"problems\">Annotated Index of the Problems</A>
<P>
The problems and their files are as follows.  Note that
files with extensions
<TT>.txt</TT>,
<TT>.html</TT>,
<TT>.htm</TT>,
<TT>.ps</TT>,
<TT>.pdf</TT> contain problem descriptions, while
<TT>Makefile</TT> files describe how the autojudge
runs solutions, and other files are (typically data)
files that are needed to solve the problem.
<P>
<TABLE>
<TR>
<TH WIDTH=50>&nbsp;</TH>
<TH>Problem</TH>
<TH WIDTH=50>&nbsp;</TH>
<TH ALIGN=\"left\">Files</TH>
</TR>"

    # Process problems.
    #
    set problems_print_files \
        [read_entire_file $j_d/problems_print_files]
    set print_files {}
    foreach f $problems_print_files {
	set fname [file tail $f]
	set problem [file tail [file dir $f]]
	if { "$problem/$fname" == "help/problems" } \
	    continue
	lappend print_files $problem/$fname
    }
    foreach pdir \
	    [lsort [glob -nocomplain $problems_dir/*]] {

	set problem [file tail $pdir]
	file mkdir $p_d/$problem
	grant_access $p_d/$problem
	puts $ch "<TR>"
	puts $ch "<TD WIDTH=50>&nbsp;</TD>"
	puts $ch "<TD>$problem</TD>"
	puts $ch "<TD WIDTH=50>&nbsp;</TD>"
	puts $ch "<TD>"

	set source_files {}
	set description_files {}

	# Get files from $problems_dir/$problem.  Files
	# in print_files are description_files and
	# other files are source_files.
	#
	foreach pfile [glob -nocomplain $pdir/*] {
	    set fname [file tail $pfile]
	    if { [lcontain $print_files \
	    		   $problem/$fname] } {
		lappend description_files $fname
	    } else {
		lappend source_files $fname
	    }
	    set wfile $problem/$fname
	    copy_file $pfile $p_d/$wfile
	    grant_access $p_d/$wfile
	}
	
	# Get $print_files not already gotten from
	# $j_d/solutions/$problem and add them to
	# description_files.
	#
	foreach pfile $print_files {
	    set p [file dirname $pfile]
	    if { $p != $problem } continue
	    set fname [file tail $pfile]
	    if { [lcontain $description_files \
	                   $fname] } \
	        continue
	    set wfile $problem/$fname
	    copy_file $j_d/solutions/$pfile $p_d/$wfile
	    grant_access $p_d/$wfile
	    lappend description_files $fname
	}

	# Output file links, description files first and
	# then source files.
	#
	foreach fname \
	        [concat [lsort $description_files] \
		        [lsort $source_files]] {
	    set wfile $problem/$fname
	    puts $ch "<A HREF=\"$wfile\">$fname</A>"
	}
	puts $ch "</TD>"
	puts $ch "</TR>"
    }

    # Output trailer for $p_d/index.html.
    #
    puts $ch "
</TABLE>
</BODY>
<HTML>"
    close $ch
    grant_access $p_d/index.html
}

# If solutions, output $s_d/index.html
#
if { $web_solutions_password != "" } {

    # Make solution directory.
    #
    file mkdir $s_d
    grant_access $s_d
    deny_access $r_d
    grant_access $r_d x

    # Output header for $s_d/index.html
    #
    set ch [open $s_d/index.html w]
    puts $ch "
<HTML>
<TITLE>$web_title Problem Solutions</TITLE>
<BODY $web_body_attributes>
$web_solutions_header
$web_solutions_prefix
<P>
<TABLE>
<TR>
<TH WIDTH=50>&nbsp;</TH>
<TH>Problem</TH>
<TH WIDTH=50>&nbsp;</TH>
<TH ALIGN=\"left\">Solution File(s)</TH>
</TR>"

    # Process problems.
    #
    set solution_files \
        [read_entire_file $j_d/problems_solution_files]
    foreach pdir \
            [lsort [glob -nocomplain $problems_dir/*]] {

	set problem [file tail $pdir]
	set soldir $j_d/solutions/$problem
	set files {}
	foreach sfile $solution_files {
	    set d [file dirname $sfile]
	    if { $d != "solutions/$problem" } continue
	    set fname [file tail $sfile]
	    lappend files $fname
	}
	if { [llength $files] == 0 } {
	    error "No solution files for $problem"
	}

	file mkdir $s_d/$problem
	grant_access $s_d/$problem

	puts $ch "<TR>"
	puts $ch "<TD WIDTH=50>&nbsp;</TD>"
	puts $ch "<TD>$problem</TD>"
	puts $ch "<TD WIDTH=50>&nbsp;</TD>"
	puts $ch "<TD>"

	foreach file [lsort $files] {
	    copy_file $soldir/$file $s_d/$problem/$file
	    grant_access $s_d/$problem/$file
	    puts $ch \
	         "<A HREF=\"$problem/$file\">$file</A>"
	}

	puts $ch "</TD>"
	puts $ch "</TR>"
    }

    # Output trailer for $s_d/index.html
    #
    puts $ch "
</TABLE>
</BODY>
<HTML>"
    close $ch
    grant_access $s_d/index.html
}

exit 0

# Include common error catching code:
#
} caught_output
caught_error
