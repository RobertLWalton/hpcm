#!/bin/sh
#
# Make a `web' directory containing the problem
# statements and optionally solutions of a contest,
# and optionally for email contests a description
# of how to submit a problem.
#
# File:		makeweb
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Sat Feb  8 04:10:05 EST 2003
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: hc3 $
#   $Date: 2003/02/08 09:27:17 $
#   $RCSfile: makeweb,v $
#   $Revision: 1.8 $
#
# The next line starts tcl \
exec tcl "$0" "$@"

# Use tcl rather than tclsh so that `signal' is defined.

# Include common code and parameters:
#
set lib_directory "[file dirname $argv0]/../lib"
source $lib_directory/judging_common.tcl
set log_mode none
catch {

set document "
makeweb \[ parameter-file-name | \\
           parameter-name-value-list \] ...

  When this program starts, it processes its arguments
  as follows.  Any named parameter file is `sourced'.
  Any argument that begins with a `{' is treated as a
  TCL list (after the outer `{ }' brackets are removed)
  of items each of the format `{PN V}'.  For each item,
  the global variable `web_PN' is set to the value V.

  This program makes a web directory for a contest.
  Other directories, info, contest/help, contest/
  problems, must already exist.  The web directory
  contains an index.html file, problem statements, and
  optionally problem solutions.  The web directory can
  be copied to another location and made accessible to
  the WWW.

  Options are controlled by `web page parameter' global
  variables in hpcm_judging.rc.  See that file for
  documentation.

  Note that if problem descriptions are not included in
  the problem directories, then they will not be includ-
  ed in the web directory.

  Unlike most HPCM judging programs, errors made by this
  program are not written to log files, but are announ-
  ced on the standard error output."

# } This closes extra left bracket in documentation so
# outer {} brackets work.

# On first -doc* argument, print documentation and exit.
#
if { [regexp {^-doc} [lindex $argv 0]] } {
    puts $document
    exit 1
}

# Process arguments.
#
set LB "{"
# } to balance left bracket in last line
#
foreach arg $argv {
    if { [regexp "^${LB}" $arg] } {
	if { [catch { set items [lindex $arg 0] }] } {
	    error "argument is not a TCL list: $arg"
	}
	foreach item $items {
	    if { [catch { set len [llength $item] }] \
	         || $len != 2 } {
	        "argument element is not a length 2\
		 TCL list: $item"
	    }
	    set name  [lindex $item 0]
	    set value [lindex $item 1]
	    if { ! [info exists web_$name] } {
	    	error "web_$name does not exist"
	    }
	    set web_$name $value
	}
    } else {
	source $arg
    }
}

# Complain of web directory already exists.
#
if { [file exists $web_directory] } {
    error "$web_directory already exists"
}

# Complain if no contest name.
#
if { $web_contest_name == "" } {
    error "web_contest_name is \"\""
}

# Universal abbreviations to shorten lines.
#
set c_d $contest_directory

# Find problems and help directories and check
# their usability.
#
foreach d {problems help} {
    if { [file exists $info_directory/$d] } {
	if { [file exists $c_d/$d] } {
	    error "both $info_directory/$d and \
		   $c_d/$d exist"
	}
	set dir $info_directory/$d
    } elseif { [file exists $c_d/$d] } {
	set dir $c_d/$d
    } else {
        error "cannot find `$d' directory"
    }
    if {    ! [file isdirectory $dir] \
         || ! [file executable $dir] \
         || ! [file readable $dir] } {
	error "`$dir' is not a useable directory"
    }
    set ${d}_dir $dir
}

# Be sure solutions directory exists if needed.
#
if { $web_solutions_password != "" } {
    set dir $solutions_directory
    if {    ! [file isdirectory $dir] \
         || ! [file executable $dir] \
         || ! [file readable $dir] } {
	error "`$dir' is not a useable directory"
    }
}

# Make web directory.
#
file mkdir $web_directory
grant_access $web_directory

# Copy problems index.
#
copy_file $help_dir/problems $web_directory/problems
grant_access $web_directory/problems

# Make solutions subdirectory if necessary.
#
if { $web_solutions_password != "" } {

    # Set abbreviations for use in rest of this program.
    #
    set pdir $web_directory/private
    set sdir $pdir/$web_solutions_password

    file mkdir $sdir
    grant_access $sdir
    deny_access $pdir
    grant_access $pdir x
}

# Output header for $web_directory/index.html
#
set ch [open $web_directory/index.html w]
puts $ch "
<HTML>
<TITLE>$web_contest_name</TITLE>
<BODY VLINK=\"blue\" LINK=\"red\">
<H1 ALIGN=\"CENTER\">
<FONT COLOR=\"red\">$web_contest_name</FONT></H1>"

# Output email information.
#
if { $web_autojudge_address != "" } {
    set address $web_autojudge_address
    regsub -all {>} $address {\&gt;} address
    regsub -all {<} $address {\&lt;} address
    puts $ch "
<P>
You can submit solutions to the problems below to an
autojudge by sending email 
<P ALIGN=\"CENTER\">
<TT>To: $address</TT>
<P>
with
<P ALIGN=\"CENTER\">
<TT>Subject: submit </TT> <I>problem.ext</I>
<P>
where
<I>problem</I> is the name of the
problem below and <I>.ext</I> is an extension that
denotes the programming language you used as follows:
<P ALIGN=\"CENTER\">
<TT>         </TT><TABLE>
<TR>
<TD WIDTH=200>&nbsp;</TD>
<TD><TT>.c</TT></TD>
<TD WIDTH=50>&nbsp;</TD>
<TD>C</TD>
</TR>
<TR>
<TD WIDTH=200>&nbsp;</TD>
<TD><TT>.cc</TT></TD>
<TD WIDTH=50>&nbsp;</TD>
<TD>C++</TD>
</TR>
<TR>
<TD WIDTH=200>&nbsp;</TD>
<TD><TT>.java</TT></TD>
<TD WIDTH=50>&nbsp;</TD>
<TD>JAVA</TD>
</TR>
<TR>
<TD WIDTH=200>&nbsp;</TD>
<TD><TT>.lsp</TT></TD>
<TD WIDTH=50>&nbsp;</TD>
<TD>COMMONLISP</TD>
</TR>
</TABLE>
<P>
The body of the email message should be just a single
file containing source code for the solution program.
This program should read from the standard input and
write to the standard output; it should <EM>not</EM>
open any files.
<P>
The autojudge will score your solutions by running
input through them, comparing your output with
known correct output, and emailing back a score.
It is usually not able to tell you how your
output is incorrect if your output does not
match the correct output.
"
}

# Output help information.
#
if { $web_help_URL != "" } {
    puts $ch "
<P>
Help files and demos are available
<A HREF=\"$web_help_URL\">here</A>.
"
}

# Output scoreboard information.
#
if { $web_scoreboard_URL != "" } {
    puts $ch "
<P>
A scoreboard telling which submitters have correctly
solved which problems is
<A HREF=\"$web_scoreboard_URL\">here</A>.
"
}


# Output solutions information.
#
if { $web_solutions_password != "" } {
    puts $ch "
<P>
Solutions are available at the URL made by adding
<P ALIGN=\"CENTER\">
private/<EM>pppp</EM>
<P>
to the directory portion of the URL used to access this
page.  Here <EM>pppp</EM> is a password that you must
get from the managers of this web page.
"
}


# Output response information.
#
if { [regexp solution $web_response_mode] } {
    puts $ch "
<P>
The response to a `Completely Correct' submission will
include our solution.  Please do NOT make any solution
available to the public.
"
}
if { [regexp first $web_response_mode] } {
    puts $ch "
<P>
The response to an incorrect submission will include
the location in the output file of the first error.
"
}
if { [regexp summary $web_response_mode] } {
    puts $ch "
<P>
The response to an incorrect submission will include
a summary of error locations in the output file.
"
}

# Output problem info.
#
    puts $ch "
<P>
An annotated index of the problems is
<A HREF=\"problems\">here</A>.
<P>
The problems and their files are as follows.  Note that
files with extensions
<TT>.txt</TT>,
<TT>.html</TT>,
<TT>.htm</TT>, or
<TT>.ps</TT> contain problem descriptions, while
<TT>Makefile</TT> files describe how the autojudge
runs solutions.
<P>
<TABLE>
<TR>
<TH WIDTH=50>&nbsp;</TH>
<TH>Problem</TH>
<TH WIDTH=50>&nbsp;</TH>
<TH ALIGN=\"left\">Files</TH>
</TR>"

# Process problems.
#
foreach pdir \
        [lsort [glob -nocomplain $problems_dir/*]] {

    set problem [file tail $pdir]
    file mkdir $web_directory/$problem
    grant_access $web_directory/$problem
    puts $ch "<TR>"
    puts $ch "<TD WIDTH=50>&nbsp;</TD>"
    puts $ch "<TD>$problem</TD>"
    puts $ch "<TD WIDTH=50>&nbsp;</TD>"
    puts $ch "<TD>"

    set problem_description_found no
    set files ""
    foreach pfile [glob -nocomplain $pdir/*] {
        set fname [file tail $pfile]
	set ext [file extension $fname]
	if { [lcontain $problem_description_extensions \
	               $ext] } {
	    set problem_description_found yes
	}
	set wfile $problem/$fname
	copy_file $pfile $web_directory/$wfile
	grant_access $web_directory/$wfile
	lappend files $fname
    }
    if { $problem_description_found == "no" } {
	set soldir $solutions_directory/$problem
	foreach pfile [glob -nocomplain $soldir/*] {
	    set fname [file tail $pfile]
	    set ext [file extension $fname]
	    if { ! [lcontain \
	              $problem_description_extensions \
		      $ext] } \
		continue
	    set wfile $problem/$fname
	    copy_file $pfile $web_directory/$wfile
	    grant_access $web_directory/$wfile
	    lappend files $fname
	}
    }
    foreach fname [lsort $files] {
        set wfile $problem/$fname
	puts $ch "<A HREF=\"$wfile\">$fname</A>"
    }
    puts $ch "</TD>"
    puts $ch "</TR>"
}

# Output trailer for problems.
#
puts $ch "
</TABLE>"

# Output web page manager contact information.
#
if { $web_manager_address != "" } {
set address $web_manager_address
regsub -all {>} $address {\&gt;} address
regsub -all {<} $address {\&lt;} address
puts $ch "
<P>
If you have questions email the manager of this
web page at <TT>$address</TT>"
}


# Output trailer for $web_directory/index.html
#
puts $ch "
</BODY>
<HTML>"
close $ch
grant_access $web_directory/index.html

# If -solutions, output $sdir/index.html
#
if { $web_solutions_password != "" } {

    # Output header for $sdir/index.html
    #
    set ch [open $sdir/index.html w]
    puts $ch "
<HTML>
<TITLE>$web_contest_name</TITLE>
<BODY VLINK=\"blue\" LINK=\"red\">
<H1 ALIGN=\"CENTER\">
<FONT COLOR=\"red\">$web_contest_name</FONT></H1>
<H2 ALIGN=\"CENTER\">
<FONT COLOR=\"red\">Problem Solutions</FONT></H2>
<P>
<TABLE>
<TR>
<TH WIDTH=50>&nbsp;</TH>
<TH>Problem</TH>
<TH WIDTH=50>&nbsp;</TH>
<TH ALIGN=\"left\">Solution File(s)</TH>
</TR>"

    # Process problems.
    #
    foreach pdir \
            [lsort [glob -nocomplain $problems_dir/*]] {

	set problem [file tail $pdir]
	set soldir $solutions_directory/$problem
	set files ""
        foreach sfile \
	        [lsort [glob -nocomplain $soldir/*]] {
	    set file [file tail $sfile]
	    foreach pattern $web_solutions_files {
	        if { [regexp "^($pattern)\$" $file] } {
		    lappend files $file
		    break;
		}
	    }
	}
	if { $files == "" } {
	    puts "NOTE: No solution files for $problem"
	    continue
	}

	file mkdir $sdir/$problem
	grant_access $sdir/$problem

	puts $ch "<TR>"
	puts $ch "<TD WIDTH=50>&nbsp;</TD>"
	puts $ch "<TD>$problem</TD>"
	puts $ch "<TD WIDTH=50>&nbsp;</TD>"
	puts $ch "<TD>"

	foreach file $files {
	    copy_file $soldir/$file $sdir/$problem/$file
	    grant_access $sdir/$problem/$file
	    puts $ch \
	         "<A HREF=\"$problem/$file\">$file</A>"
	}

	puts $ch "</TD>"
	puts $ch "</TR>"
    }

    # Output trailer for $sdir/index.html
    #
    puts $ch "
</TABLE>
</BODY>
<HTML>"
    close $ch
    grant_access $sdir/index.html
}



exit 0

# Include common error catching code:
#
} caught_output
caught_error
