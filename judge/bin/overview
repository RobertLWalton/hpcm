#!/bin/sh
#
# Make judge's overview document.
#
# File:		overview
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Thu Oct 31 06:12:08 EST 2002
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: hc3 $
#   $Date: 2002/10/31 11:14:52 $
#   $RCSfile: overview,v $
#   $Revision: 1.69 $
#
# The next line starts tcl \
exec tcl "$0" "$@"

# Use tcl rather than tclsh so that `signal' is defined.

# Include common code and parameters:
#
set lib_directory "[file dirname $argv0]/../lib"
source $lib_directory/judging_common.tcl
set log_mode none
catch {

puts "
		     HPCM Overview
		     ---- --------

	Features
	Requirements
	Installing HPCM
	Creating a Contest
	Data and Programs
	Library Data: Problems
	Library Data: Complex Problems
	Library Data: Help Documentation
	Library Data: Example Contests
	Library Data: System Maintenance
	Contest Definition Data: The Judging Directory
	Contest Definition Data: The Contest Directory
	Contest Definition Data: Web Pages
	Contest Definition Data: The Home Directory
	Contest Definition Data: Contestant Accounts
	Contest Definition Data: Auxiliary Files
	Contest Definition Data: Security
	Contest Raw Data: Directories
	Contest Raw Data: Submissions
	Contest Raw Data: Solution Submissions
	Contest Raw Data: Get Requests
	Contest Raw Data: Queries
	Contest Raw Data: Data Flow
	Contest Derived Data: Processing Status Files
	Contest Derived Data: Scoreboard Files
	Programs: Contestant
	Programs: Judging
	Programs: Contest Making
	Programs: Maintenance
	Programs: Common Functions
	Programs: System/User Interface Common Functions
	Programs: General Common Functions
	Programs: Display Common Functions
	Programs: Scoring Common Functions
	Programs: Scoreboard Common Functions

Features
--------

The Harvard Programming Contest Manager, HPCM, has the
following features:

    o Supports different kinds of programming contests:

    	email	    Contestants supply their own ac-
		    counts and communicate with the
		    judge by email to get problems and
		    submit solutions.  Contestants may
		    compete at any time.

	informal    Contestants are given accounts which
		    they can use locally or remotely at
		    any time to get problems and submit
		    solutions.

	formal	    Contestants are given accounts which
		    can only be used locally, and con-
		    testants are given printouts of pro-
		    blems at a fixed contest starting
		    time.

    o Has an automatic judge, that can be used exclu-
      sively, or as an aid to a human judge.

    o Has a library of problems and supports easy semi-
      automated creation of new contests.

    o Supports complex multi-file problems, such as
      those found in advanced Computer Science courses.

    o Supports running long term contests and multiple
      simultaneous contests.

    o Supports contests in which problems are timed and
      supports contests in which problems are not timed
      and the scoreboard shows only the date a problem
      was solved by a contestant.

    o Keeps a complete log of everything that happens
      during contests in the form of files that can be
      easily analyzed for different purposes.

    o Is written modularly in TCL and Bourne Shell (sh)
      so that HPCM can easily be adapted and modified.


Requirements
------------

HPCM currently requires a UNIX system with Bourne shell
and TCL language interpreters.  If JAVA is to be usable
by contestants, an appropriate version of JAVA is also
required.

A couple of programs require the `read -r' Bourne shell
command, a Bourne shell `echo' command that does not
specially interpret the `\\' character, or a `test -e'
command.  If you are using a UNIX system whose Bourne
shell does not support these features (which is likely
if you are not using a Linux), the simplest fix is to
import the GNU Bourne shell, bash, and fix your path
to contain this shell under the name `bash', so that
`which bash' can find it.  The HPCM programs that have
shell difficulties like those just mentioned test
whether they are running bash and, if not, use `which
bash' to find bash if they can, and run it instead of sh
if they find it.

TCL can be obtained at:	 	www.scriptics.com

You may need TCL version 8.0 or later.  You will need
a version of TCL that includes Extended TCL.

Bash can be obtained at:

	www.gnu.org/software/bash/bash.html

A suitable JAVA can be obtained from

	www.javasoft.com

by selecting the jdk platform and downloading jdk
version 1.3.0 or later.

If you want to use COMMON LISP as a programming langu-
age, HPCM is currently set up to use CLISP, a version
of COMMON LISP obtainable at

	clisp.cons.org



Installing HPCM
---------- ----

There is a separate document, `Installing HPCM' (hpcm/
judge/bin/installing_hpcm), that describes how to obtain
and install HPCM.  HPCM can be obtained from

	www.deas.harvard.edu/~hc3/hpcm



Creating a Contest
-------- - -------

To create a contest, first read the help files

	hpcm/contestant/help/*/*

to get a good idea of what you are creating.  The file

	hpcm/contestant/help/index

explains what each of these files contains and suggests
an order in which these files may be read.

Then choose the type of contest you want to create
(email, informal, formal) and read the instructions in

	hpcm/examples/<contest-type>_contest/Makefile

This file also contains basic advice on how to judge
the contest.  There is also a type of contest known as
a `web contest' which is just an email contest in which
the problem descriptions are placed on the web and the
scoreboard shows the date a solution was submitted
instead of a problem time.

You should also read

	hpcm/judge/lib/hpcm_judging.rc

and try to understand the parameters in that file as
best you can.

In order to better understand what you are doing, you
may wish to read the following overview, and then read
the individual program documentation for some of the
programs used to set up or judge contests.  Each prog-
ram produces its own documentation when it is executed
with the `-doc' option.  After installing HPCM and run-
`make' in the hpcm directory, all these program docu-
mentations will also be collected within the hpcm/judge/
doc directory.

If you want to create complex problems, such as multi-
file problems that occur in an advanced Computer Science
course, you should read the section `Library Data:
Complex Problems' below.


Data and Programs
---- --- --------

HPCM handles different categories of data:

Library Data
    Problem descriptions, help documentation files,
    example contest parameter files, system maintenance
    files, and system test files.

Contest Definition Data
    Files that define a contest, including documentation
    for contestants, problem definition, solution defi-
    nition, and contest parameter definition.

Contest Raw Data
    Files that capture submissions and information gen-
    erated during judging, such as binary program files,
    output files, scores, and email replies.

Contest Derived Data
    Scoreboards and contest tracking summaries.


HPCM also contains several different categories of
programs:

Contestant Programs
    Programs run by contestants during a contest.

Judging Programs
    Programs run to judge a contest.

Contest Making Programs
    Programs run to make a contest.

Maintenance Programs
    Programs run to maintain the library, produce doc-
    umentation, or test the HPCM system.

Common Functions
    Functions usable by HPCM TCL programs.  These come
    in several different packages, including one general
    package for all programs, and another package for
    programs that interact with a user through a dis-
    play.


Library Data: Problems
------- ----- --------

The problem library consists of the subdirectory tree
rooted at

	hpcm/problem_library

Each problem (and each demonstration problem) has its
own directory within the problem library.  The last
component of the name of this directory is the name of
the problem, and is also the basename of files describ-
ing the problem and solving the problem.

The library problem directories are placed within one of
following subdirectories of the hpcm/problem_library
directory:

	demos	Demonstration problems.

	public	Problems that can be freely distributed
		to the public, without any restriction
		on verbatim copying, without any re-
		strictions on verbatim redistribution,
		and with no restriction on alteration
		unless otherwise indicated.

	private	Problems that cannot be redistributed
		to the public.  These have been taken
		off the web in most cases, and can be
		distributed to true friends and colla-
		borators or other members of your uni-
		versity, but cannot be placed on the web
		or be made available to strangers.

The problem directories are listed in the

	hpcm/problem_library/index

file, which can be input to the makejudgingdir program
to define which problems are to be used in a particular
contest, and to create an index of these problems.

Emails giving permission to make various problems public
are in the directory

	hpcm/problem_library/legal


If a problem has name `pppp', then the problem has a
problem directory named `pppp' within one of the
directories just mentioned, and the following files
within this problem directory:

    pppp.txt, pppp.html, pppp.htm, pppp.ps, etc.
    		Problem description file in ASCII (txt),
		HTML (html or htm), or POSTSCRIPT (ps).

    Makefile	Gives instructions for compiling and
                running the problem solution.

These files are made available to the contestant, though
in a formal contest only Makefiles are made available
electronically, and problem description files are only
made available as a printout (to prevent contestants
from emailing an electronic version to cohorts for
advice).

In order to be able to score a problem, three more files
are placed in the problem directory within the program
library:

    pppp.in		    The judge's test input.
    pppp.test		    The judge's test output.
    Scoring_Instructions    Optional file containing
    			    parameters that control how
			    the automatic scoring is
			    done (e.g., what numeric
			    tolerances are permitted).
			    See the documentation of
			    the `autoscore' program.

A contest has a solutions directory that contains sym-
bolic links to the library problem directories for every
problem that can be judged during the contest.  The
files just mentioned become input to the judging.

In addition to the files already mentioned, the library
problem directory usually contains a judge's solution
written in one of the contest programming languages.
The solution is written as a file whose extension indi-
cates the programming language of the solution.  Typical
possibilities are:

    pppp.c	C language solution.
    pppp.cc	C++ language solution.
    pppp.java	JAVA language solution.
    pppp.p	PASCAL language solution.
    pppp.lsp	COMMONLISP language solution.

The programming languages allowed may vary; but every
solution language must be explicitly supported by the
problem Makefile.

It is possible to compile and run the solution within
the library problem directory in the same manner as
a problem is compiled and run by contestants and by the
judge.  Doing this results in making temporary files
that can be removed by the `make clean' command in the
problem directory.

Compilation creates a temporary binary file named `pppp'
and may create other temporary files for some languages:

    pppp	    The executable program binary.
    pppp*.class	    JAVA class files.
    pppp.p2c	    C translation of PASCAL program.

The solution is written to take input from the standard
input (the terminal by default) and put output to the
standard output (also the terminal by default).  The
Makefile contrives to run the program with resource
limits and so that the standard input and output are
mapped to the pppp.in file and the pppp.out file, re-
spectively.  Running the solution program using the
Makefile reads or creates the following temporary files:

    pppp.in	Solution input.
    pppp.out	Solution output.
    core	Dump of program if it crashes.

It is important to note that the solution code should
NOT open any files.  Also, the standard error output is
sent to the terminal, and NOT to a file.

The `make' command in the problem directory makes the
binary program if that does not exist or it is older
than the solution source file, and then makes the
pppp.out file if that does not exist or it is older than
the binary file or the .in file.

If a problem directory symbolically linked into a con-
test solutions directory has a pppp.out file, this file
will be treated as the judge's output in PREFERENCE to
any pppp.test file.  Thus if a judge finds an error in
the judge's solution, the judge merely needs to fix
the judge's solution and run the `make' command in the
solution problem directory to fix the judge's output.
After the contest the judge can replace the pppp.test
file by a copy of the correct pppp.out file.

However, there is a difficulty with running JAVA
solutions in a library problem directory using `make'.
The judge's hpcm_sandbox program runs the binary as
a user named `sandbox' that cannot access the problem
directory using an absolute pathname.  Unfortunately,
existing JAVA systems have a bug that causes them to
convert relative pathnames of .class files into absolute
pathnames before they are used, so the .class files
cannot be found by the `sandbox' user.  One fix for this
currently is to run the programs manually by

	pppp <pppp.in >pppp.out

Another fix is to do a

	chmod a+x .. ../.. ../../.. ../../../..

in the library problem directory; but this has the dis-
advantage that contestants will then be able to read any
*.class files in this and other library problem direc-
tories: see `Contest Definition Data: Security' below.

Some things change if a problem directory also contains
a file named:

	$scoring_filter_file

In this case, both the pppp.out and pppp.test files are
run through the program named $scoring_filter_file to\
	pro-
duce files named pppp.fout and pppp.ftest, respectively.
Then instead of comparing pppp.out and pppp.test to pro-
duce a score, HPCM compares pppp.fout and pppp.ftest.
For example, if a problem asks for a shortest path
through a graph whose nodes are labeled with upper case
letters, pppp.out might contain the lines

    Case 5: B -> D -> E -> F -> C
    Case 6: B -> F -> H -> A -> K -> M

and pppp.fout might contain corresponding lines:

    Case 5: 4
    Case 6: not a legal path

where 4 is the length of the `Case 5' path.  If 4 is the
length of the shortest path, pppp.ftest would have the
same `Case 5' line, but of course it would not have the
same `Case 6' line.  Note that the $scoring_filter_file\
	pro-
gram can input pppp.in and even pppp.test.

Lastly, the `make clean' command in the problem direc-
tory deletes all temporary files, including `pppp',
`pppp.out', `pppp.fout', `core', and `.class' files.


Library Data: Complex Problems
------- ----- ------- --------

The standard problem format described in the last sec-
tion has many limitations.  Only one file, Makefile, is
provided to support the contestant.  Only one file, e.g.
pppp.c, can be submitted.  At most one file, e.g.
pppp.txt, can be used to describe the problem.  There is
no way to supply a contestant with an initial version of
a file the contestant is supposed to submit.

All this can be changed by including a `$files_file'\
	file in
the problem directory.  The default value of this file
is-

	-DESCRIPTION-
	    PROBLEM.TTT
	-SOURCE-
	    $make_file
	-REQUIRED-
	    PROBLEM.EXTENSION
        -LINK-
	    { $make_file $make_file.EXTENSION\
	    	$make_file }
	    PROBLEM.in
	    { PROBLEM.test PROBLEM.out PROBLEM.test }
	-OPTIONAL-LINK-
	    $scoring_instructions_file
	    $scoring_filter_file
	    { PROBLEM.ftest PROBLEM.fout PROBLEM.ftest }
	    { $response_instructions_file 
	        $response_instructions_file.EXTENSION
	    	$response_instructions_file }

This value specifies the standard format of a problem as
was described above.  Here `PROBLEM' denotes the name of
the problem, TTT denotes the extension (e.g., .ps or
.txt) needed to name the description file of the pro-
blem, and `EXTENSION' is the programming language exten-
sion (e.g., .c or .java) taken from the subject field of
the submission.  The above says that the file describing
the problem has the name PROBLEM.TTT; the file given to
the contestant (as -SOURCE-) is $make_file; and when a
submission is scored by the judge a bunch of files are
linked from the problem directory to the directory in
which the submission is being scored.  For example, the
PROBLEM.test file must be linked and it is linked to the
problem directory PROBLEM.out file if that exists or to
the problem directory PROBLEM.test file otherwise.  The
PROBLEM.ftest file is similar, but linking it is option-
al, in case neither PROBLEM.fout or PROBLEM.ftest exist.

In general the `$files_file' file consists of special
symbols, like -DESCRIPTION- and -SOURCE-, each followed
by items that are either file names or lists of file
names.  Different special symbols are processed by dif-
ferent HPCM programs: e.g., -DESCRIPTION- is processed
by makejudgingdir and -LINK- by autojudge.  The follow-
ing is a list of the recognized special symbols, the
programs that recognize them, and a description in brief
of their function.  See program documentation for more
details.

    Recognized by makejudgingdir:

        -DESCRIPTION-	Items name problem description
			files given to contestants in
			email or informal contests.

	-SOURCE-	Items name files that are given
			to the contestant as read-only
			files that support solution
			development (e.g. Makefile).

    Recognized by extractmail:

	-REQUIRED-	Items name files that must be
			submitted.

	-OPTIONAL-	Items name files that may op-
			tionally be submitted.

    Recognized by autojudge:

	-LINK-		Items name files that must be
			linked from the problem di-
			rectory to the submission
			directory.  The file name in
			the problem directory can be
			different from the file name
			in the submission directory.

	-OPTIONAL-LINK-	Ditto but the files need not be
			linked if the correct files do
			not exist in the problem direc-
			tory.

	-SOLUTION-MAKE-	Items name files that are to be
			made by `make filename' in the
			problem directory (a.k.a. solu-
			tion directory) before linking
			is attempted.

Sometimes the same file may be named as an item for dif-
ferent special symbols to good effect.  A file named as
both -OPTIONAL- and -LINK- will be supplied by linking
if it is not supplied by the submitter, as -LINK- files
are not linked if they are supplied by other means.  A
file can have different versions for contestants and
the judge, by being specified as -SOURCE- and -LINK- and
using a different name for the judge's version in the
problem directory. 

In addition to the control over problem files given by
the `$files_file' file, two other HPCM features support
complex problems.

First, if there is a -SOURCE- file named xxx.ISF, then
this is an initial value for a read-write submittable
file named xxx.  The hpcm_get and hpcm_extract programs
support this by automatically copying xxx.ISF to xxx if
the latter does not exist, and making xxx writable.

Second, if there is a file named\
	$response_instructions_file
linked to the submissions directory, responses from the
autojudge program can contain extra information about
scores, including positions of errors or first errors
in pppp.out, summaries of errors found, and extra com-
ment lines or copies of information files.  See the
documentation of autojudge for details.

Some complex problems are in the directory:

    hpcm/problem_library/symbolic_computing
	    Problems for the text book `Introduction
	    to Symbolic Computing' by Robert Walton.


Library Data: Help Documentation
------- ----- ---- -------------

The help documentation files reside in the subdirectory
tree rooted at

	hpcm/contestant/help

A help file index (in a format prescribed by the
`makejudgingdir' program) is in

	hpcm/contestant/help/index

Each `help' file is a short ASCII text document on some
topic contestants may need to know about.  For example,
there is a `help' file on the mechanics of solving a
problem (what files to write, how to compile, etc.).

The help files have a 56 column times 40 line format
that permits them to be printed two file pages per
paper page using a reasonable size font.  The fprint
program prints these files: the fcheck program checks
that they have no line longer than 56 columns and no
page longer than 40 lines.

The subdirectories of `hpcm/contestant/help' are
as follows:

    common	Help files used for all kinds of con-
    		tests (email, informal, and formal).

    email	Help files used for email contests only.

    email/sh	Programs (e.g., hpcm_get, hpcm_extract,
    		hpcm_sandbox, hpcm_submit, hpcm_send-
		mail) written in the Bourne Shell (sh)
    		language that can be used by contestants
		of an email contest on their own com-
		puters.  Actually, only the GNU Bourne
		Again Shell (bash) will run some of
		these programs correctly.

    email/tclsh	Code written in the TCL Shell (tclsh)
    		language that can be used by contestants
		of an email contest on their own com-
		puters, instead of the Bourne shell code
		just mentioned.  Only programs whose
		Bourne Shell version requires the GNU
		bash shell are currently available in
		tclsh (e.g., hpcm_extract).

    informal	Help files used for informal contests
    		only.

    formal	Help files used for formal contests
    		only.

    advanced	Help files that describe algorithms a
    		contestant should know or learn in
		order to be more competitive.


Library Data: Example Contests
------- ----- ------- --------

Subdirectories of

	hpcm/examples

contain parameter files necessary to set up a specific
type of contest.  Some of these subdirectories are:

    email_contest	Example email contest.

    informal_contest	Example informal contest.

    formal_contest	Example formal contest.

    test_submissions	Files that can be submitted with
    			hpcm_sendmail to test various
			features of a contest and HPCM.
			See the X-HPCM-Test-Subject
			fields of these messages for a
			description of each message, and
			the Makefiles in the contest
			directories above for examples
			using these files.  Also files
			that are replies to these sub-
			missions (and can be extracted
			from mail by hpcm_extract_test_
			replies: see Programs: Mainten-
			ance below).

    test_contest	A `test contest' that merely
    			tests the autojudge.  This is
			an actual contest and because
			it contains solutions from
			real teams is not public.

Each of these subdirectories contains a Makefile that
contains documentation on how to use the files in the
subdirectory.  Typically this documentation tells how
to create a contest by making a judging directory, copy-
ing the files in the `hpcm/examples' subdirectory into
the judging directory, editing these copies, etc.


Library Data: System Maintenance
------- ----- ------ -----------

There are a few files in the system root directory
(hpcm) that are used for system maintenance.


    File_List	This file lists all the files that can
    		be distributed.

    TODO	This file lists known deficiencies of
    		HPCM.

    Makefile	Typing `make' in the system root (hpcm)
    		directory invokes Makefiles in various
		subdirectories to perform HPCM instal-
		lation functions, such as setting file
		permissions on contestant executable
		programs.  This system root Makefile
		also makes distributions: see documen-
		tation within the Makefile.

One of the subdirectories that typing `make' in the
system root (hpcm) directory effects is

	hpcm/judge/doc

in which `make' stores copies of all per-program docu-
mentation.




Contest Definition Data: The Judging Directory
------- ---------- ----- --- ------- ---------

A contest is defined by a collection of directories and
files, and by a few lines in parameter files that are
shared among many contests (e.g., ~/.procmailrc).

The heart of the contest is the judging directory.  This
typically has a name of the form:

	~/judging_cccc_ppppppppppp

where cccc is the name of the contest and ppppppppppp is
a string of random numbers and letters that makes the
directory name hard to guess.  The reason for this is
that in order to run JAVA code in a sandbox, all the
directories on the path from the root directory to the
program directories have to have a+x permissions (this
is a security bug in JAVA, surely), so to prohibit out-
siders from getting into the judge's subdirectory tree
it is necessary that the judging directory name be un-
guessable.

Fortunately the judge really does not need to use the
full name of the judging directory except in very rare
instances, as `~/judging_cccc_*' or the equivalent
suffices.  The judge's account has u+r permission on
directories, so the `*' works for the judge's account,
but there is NO read permission on the directories for
outside users.

The judging directory contains the hpcm_judging.rc file
that defines parameters for the contest.  Whenever most
HPCM programs in hpcm/judge/bin are executed, they
search the current directory and its ancestors for a
file named hpcm_judging.rc.  If a program finds one such
file, it uses that to define the contest parameters, and
uses the directory that file is in as the contest jud-
ging directory.  It is an error if the program finds two
such files.  Therefore, one judging directory cannot be
the ancestor of another judging directory.  However,
one judging account can have many judging directories,
each the root of a disjoint subtree of directories.
Therefore one judging account can judge many contests.

An HPCM program can therefore execute anywhere in the
directory tree rooted at a judging directory, and the
program will find the judging directory and its hpcm_
judging.rc file.

The judging directory contains several components that
define the contest, in addition to many components that
belong to the raw or derived data of the contest, and
are listed elsewhere below.  Starting from a few contest
defining components, the other contest defining compo-
nents can be made automatically by the `makejudgingdir'
program.

The contest defining components of the judging directory
are:

    hpcm_judging.rc
        The contest parameters file.  This is edited
	by hand to define the contest.

    solutions
        The solutions directory for the contest.  Each
	component of the solutions directory is a sym-
	bolic link to a problem directory.  Often these
	problem directories are in the problem library.

	But for formal contests problems are often used
	that have not yet been entered into the problem
	library, and the problem directories for these
	are usually in a special (and secure) directory
	that has an index file listing the problems.
	This index file is in a format suitable for the
	`makejudgingdir' program.

	The solutions directory and its contents (i.e.,
	the symbolic links) are made automatically by
	`makejudgingdir'.

    info
        The info directory for the contest.  This only
	exists for email and informal contests, and it
	is the root of a subdirectory tree that holds
	the files that can be obtained by contestants
	via email (the contestants often use hpcm_get
	which for email and informal contests uses email
	under the hood).  Thus the contents of the info
	directory proper are just three subdirectories:
	help, demos, and problems.  These in turn con-
	tain files and subdirectories.  The files
	proper are typically represented by symbolic
	links: see `makejudgingdir' documentation.

	The info directory and its contents are made
	automatically by `makejudgingdir'.

    contest
        The contest directory of the contest.  Actually,
	this is not a subdirectory proper of the judging
	directory, but `contest' in the judging direc-
	tory is symbolically linked to the contest
	directory.  This is because the contest direct-
	ory must be accessible by the contestants, who
	must not know the full name of the judging di-
	rectory.

	Only informal and formal contests have a contest
	directory.  Email contests do not.

	The contest directory itself and the symbolic
	link from the judging directory to the contest
	directory must be made by hand.

	The contents of the contest directory are made
	automatically by `makejudgingdir', with the
	exception of a few symbolic links to other
	directories and a few files (see `Contest Def-
	inition Data: The Contest Directory' below).

    help
        The help directory within the judging directory.
	This is not used during the contest proper, but
	is merely a staging area for the `this_contest'
	help file.  It contains the following files that
	are created by `makejudgingdir':

	    this_contest
	        The help file particular to the contest.

	    index
	        An index file to be input to `make-
		judgingdir' that lists all the index
		files output by that program and also
		lists the `this_contest' help file.

	The help directory and its contents are made
	automatically by `makejudgingdir', but then
	the person defining the contest must edit the
	`this_contest' file and re-run `makejudgingdir'.

    scoreboard.notes
        A file standardly appended to the scoreboard by
	the `makescoreboard' program when it emails the
	scoreboard to other locations (e.g., for display
	on the web).  This is normally used only for
	email contests.  By changing the scoreboard in-
	structions in hpcm_judging.rc, different files
	can be used for this purpose, and the layout of
	the scoreboard can be changed.

    TODO
    	When `makejudgingdir' runs, it appends instruc-
	tions to its user to the end of this file.
	Typical instructions are `edit ./contest/secure/
	passwords' and `put the following lines in
	the judge's ~/.procmailrc file: ...'.

In addition to these files which are used by HPCM
programs, there is typically one other file that is not
used by HPCM programs themselves.  This is:

    Makefile
        The instructions to the UNIX `make' program so
	that running `make' in the judging directory
	will run `makejudgingdir' to build all the
	contest definition files.  The parameters to
	`makejudgingdir' are complex, and need to be
	kept in a file.  The Makefile may also do
	some of the things that this overview says
	must be done `by hand'.

	See hpcm/examples/*/Makefile for examples.


Contest Definition Data: The Contest Directory
------- ---------- ----- --- ------- ---------

Formal and informal contests have a contest directory
containing files that can be accessed by contestants.
Email contests do not have this directory.

Each contestant in a formal or informal contest has
an account in which `~/.hpcm_contest' is symbolically
linked to the contest directory.  The contest directory
itself has a+x permissions and contains the following
components that contestants can access.

    bin
    	A directory containing programs the contestants
	can execute.  The name `~/.hpcm_contest/bin' is
	part of the program search path for each contes-
	tant account.

	The name `bin' in the contest directory must be
	symbolically linked by hand to
	
	    ~/hpcm/contestant/bin

	in the judging directory.  Note that this means
	that ~, ~/hpcm and ~/hpcm/contestant must have
	a+x permissions, ~/hpcm/contestant/bin must
	have a+rx permissions, and appropriate programs
	in the ~/hpcm/contestant/bin must have a+x or
	a+rx permissions.  Running `make' inside the
	~/hpcm directory, a part of the installation
	procedure of HPCM, sets these permissions.
	See `Installing HPCM' (hpcm/judge/doc/instal-
	ling_hpcm.doc).

	The `makejudgingdir' program symbolically links
	`bin' to `contestant/bin' in the contest direc-
	tory.  See `contestant' below.

    demos
        This is a directory that contains demonstration
	problems.  It is strictly analogous to the
	`problems' directory, see below.

    help
    	This directory contains a+r copies of all the
	help files for the contestants.  These can be
	read by the contestant `help' program.

	This `help' directory and its contents are
	made automatically by `makejudgingdir'.  It is
	an exact copy of info/help (except that info/
	help does not exist for some (formal) contests).

	The following are some special help files
	of note:

	    this_contest
	    	Information specific to the current
		contest.

	    index
	    	Index of all help files.

	    demos
	    	Index of demonstration problems.

	    problems
	    	Index of contest problems.

	One file, ./contest/help/problems, does not
	have a+r permissions when it is made, so that
	contestants in a formal contest cannot find
	out about the problems before the contest
	starts.  The `startcontest' program sets the
	permissions on this file to a+r.

    home
    	This is a symbolic link to a directory that is
	informally called the `contest/home' directory
	and that contains files shared among all con-
	testant accounts.  For example, in a contestant
	account the `.cshrc' name is symbolically linked
	to `.hpcm_contest/home/.cshrc', and thence to
	the `.cshrc' file in the contest/home directory.
	Therefore editing the `.cshrc' file within the
	contest/home directory changes that file in ALL
	contestant accounts.

	The contest/home directory is set up by the
	SETUP_PROTOTYPE program: see `Contest Definition
	Data: The Home Directory' below for more
	details.

    printer_map
        This file contains a map from contestant names,
	specified by regular expressions, to printer
	names.  See hpcm/contestant/printer_pipe for
	details.

    printer
    	This file contains nothing but the name of the
	printer to be used by the contestants.  This
	file is used only if printer_map is not readable
	by contestants.  See hpcm/contestant/printer_
	pipe for details.

	This file is made by `makejudgingdir' if neither
	it or printer_map exist, and may be edited or
	removed by hand.

    printer_jobs
        If this file exists and is a+w, each use of the
	printer by one of the print commands in the
	contestant bin directory causes a line to be
	written into this file.  The line gives the
	time, printer, contestant account name and
	location, and filename for the print operation.
	The location is taken from the who_where file
	(see below) `WHERE' field, if available.

	This file can be used by the contestant `lpq'
	program to print out printer status, and by the
	judges to monitor printer activity.

	This file is made by `makejudgingdir' and can
	be removed or made o-rw by hand.

    problems
    	This directory contains problem directories for
	each of the contest problems.  The strictly
	analogous `demos' directory (see above) contains
	demonstration problems.  These directories only
	exist for formal contests; for email and infor-
	mal contests, the same information (plus problem
	description (.txt, .html, etc.) files), see
	below) is put in info/problems and info/demos.

	Each non-demonstration problem directory in the
	contest directory is a subdirectory of this
	`problems' directory and has as its name the
	name of the problem.  Thus a problem named
	`pppp' would have `problems/pppp' as the name of
	its problem directory within the contest direc-
	tory.  Demonstration problems are similar but
	are in the `demos' directory instead of the
	`problems' directory.

	Within each problem directory there is standard-
	ly an a+r copy of the `Makefile' of the problem.
	It is also possible to include an a+r copy of a
	file describing the problem, but this is NOT
	usually done for formal contests, as for these
	only paper printouts of these files are normally
	given to the contestants.  For demonstration
	problems (in `demos') many a+r file copies may
	be in the problem directory, as judge's input
	and output and solutions in different program-
	ming languages are often provided.  For complex
	problems (see `Library Data: Complex Problems'
	above) a+r copies of -SOURCE- files are are in-
	cluded in place of `Makefile' and a+r copies of
	-DESCRIPTION- files can be included to describe
	the problem, if desired, though this is not
	usually done for formal contests.

	For a formal contest, the contestant's hpcm_get
	program creates a problem directory ppp in the
	contestant's account, and symbolically links
	into that directory all files in the contest/
	problems/ppp directory in the judge's account,
	by using the fact that this directory can be
	accessed by the name .hpcm_contest/problems/ppp
	in the contestant account.  For an informal
	contest hpcm_get obtains the same information
	from the `info/problems' directory by email and
	makes read-only copies of the files in the con-
	testant account.  If a one of the files made
	available in a contestant's directory by hpcm_
	get has the name xxx.ISF, then hpcm_get makes a
	writable copy named xxx of that file.

	This `contest/problems' directory (unlike the
	`contest/demos' directory) does not have a+rx
	permissions when it is made, so that contestants
	in a formal contest cannot find out about the
	problems before the contest starts.  The `start-
	contest' program sets the permissions on this
	directory to a+rx.

	This `problems' directory and its contents are
	made automatically by `makejudgingdir'.  This
	contest/problems directory is an exact copy for
	formal contests of what goes into info/problems
	for informal and email contests, except that
	contest/problems does not have problem descrip-
	tion (e.g., .txt) files (unless the makejudging-
	dir -description option is used), and the files
	in contest/problems are copies, while the files
	in info/problems are symbolic links.

	The `demos' directory is similarly made and is
	an exact copy of what would go into info/demos.

    scoreboard.1head
    scoreboard.2
    scoreboard.3
    scoreboard.4
        The scoreboard, which can be read by the contes-
	tant `scoreboard' program, standardly has up to
	four pages, which are stored in the a+r files
	scoreboard.1 through scoreboard.4.  The first of
	these files is standardly made automatically by
	the `makescoreboard' program, which concatenates
	the scoreboard.1head file to the computed score-
	board.  The scoreboard.1head, scoreboard.2,
	scoreboard.3, and scoreboard.4 files must be ed-
	ited by hand.  If non-standard scoreboard in-
	structions are included in hpcm_judging.rc, and
	if a scoreboard_map is provided, other files can
	be used for these purposes, multiple scoreboards
	may be implemented, and scoreboard layout may be
	changed.  See hpcm_judging.rc and the documenta-
	tion of `makescoreboard' and `hpcm/contestant/
	bin/scoreboard' for details.

    scoreboard_map
        This file can optionally be provided to map
	names of contestant accounts and contests onto
	scoreboard page files.  See `hpcm/contestant/
	bin/scoreboard' for details.

    secure
    	This directory contains files that cannot be
	accessed by contestants, but can be accessed by
	the judging account, and can be accessed by the
	hpcm_sendmail program which can be run by
	contestants but sets its user id (by the UNIX
	setuid mechanism) to the judging account.

	This directory, if it does not already exist,
	will be made by the `makejudgingdir' program,
	as will some of the files in the directory.
	The files in this directory are:

	    secure/hpcm_sendmail.rc
	        This file contains parameters for hpcm_
		sendmail.  Specifically, the email
		address to send mail to in order to
		contact the judge (this email address
		typically contains a password), and the
		key-name and key to use in signing parts
		of the email (more specifically, the
		HPCM return email address and date
		fields of the email).  An example
		hpcm_sendmail.rc file is:

		    To: 13cc299bd7<walton@walton1>
		    Key: 55071403c7
		    Key-Name: judging_informal

		Note that the password in the `To:' ad-
		dress is not secure from the contestant,
		as it appears in the contestant's CC
		copy of the email that the contestant
		sends to the judge.  It does prevent
		complete outsiders from `crashing the
		party', however.

		This file is made by the makejudgingdir
		program, which creates random passwords
		for the email address and key.

	    secure/passwords
	    	This file lists the contestant accounts,
		and is used to create these accounts.
		Each line of this file has the format:

		    account:password:who:C:T:comment

	        where C is the coach's email address and
		and T is the team's email address.  The
		first field is the contestant account
		name.  The `who' field is the team name
		in descriptive form.

		The password field can be generated by
		the makejudgingdir program.  The rest
		of the file must be made by hand.

		Only the account and password fields are
		needed by HPCM to run a contest.  The
		coach's email address is used by the
		hpcm_email_passwords program to send
		passwords to coaches.

		Note that in making up a list of contes-
		tant accounts, you should include one
		test account, which you can use to see
		if everything is working.  However, you
		should NOT include the prototype account
		in which SETUP_PROTOTYPE is run.

	    secure/passwords_header
	        This is a file used by hpcm_print_pass-
		words or hpcm_email_passwords.  Hpcm_
		print_passwords prints each account
		name and password on a separate page
		with the contents of this file at the
		beginning of the page.  It is used only
		when account names and passwords are to
		be handed to contestants: typically this
		is only in an informal contest.  Hpcm_
		email_passwords is similar, but emails
		the results to the coaches instead of
		printing.

    who_where
        This file is a copy of the secure/passwords file
	but with the password field value replaced by
	a `WHERE' value, that tells where the team is
	physically located.  This file is used by the
	print programs: the where field labels the pages
	of print output and the line output to any
	print_jobs file.  If the who_where file is
	missing, not a+r, or the `WHERE' field has not
	been filled in by hand, the print programs use
	the contestant account name instead.

	The who_where file is made automatically from
	the secure/passwords file by makejudgingdir,
	and will be updated automatically by that
	program when the secure/passwords file changes.
	However, the `WHERE' field in the who_where
	file must then be filled in by hand.

    trashable
        This file lists all contestant accounts that
	can be `trashed'.  To `trash' an account is
	to remove all its files and then reload its
	files from ./hpcm_contest/home/setup.tar, which
	is just the files in the prototype contestant
	account.  See the documentation of the SETUP_
	PROTOTYPE program and see `Contest Definition
	Data: The Home Directory' below.

	The `trashable' file is made from secure/
	passwords by the `makejudgingdir -trashable'
	command.  It is just the list of all accounts in
	secure/passwords. It should only be made just
	before trashing the contestant accounts, and
	should be removed immediately after trashing
	these accounts.  There is a program runnable by
	a contestant account, TRASH_ACCOUNT, that will
	trash the contestant account, but only if the
	name of that account is listed in an a+r
	.hpcm_contest/trashable file.



Contest Definition Data: Web Pages
------- ---------- ----- --- -----

Two directories can be made that can become web page
sets if copied to an appropriate internet server.  These
are

    ~/hpcm/contestant/help/web
        Made by `make web' in the ~/hpcm/contestant/help
	directory, this web page set contains all the
	help and demo files.

    ~/judging_cccc_ppppppppppp/web
        Made by `make web' in the judging directory
	~/judging_cccc_ppppppppppp, this set of web
	pages contains the problem statements and
	optionally the problem solutions.

	For some contests this set of web pages is
	posted after the contest is over.

	A `web contest' is a form of email contest where
	problem descriptions are placed on the web in
	this set of web pages.  Because problem descrip-
	tions are available before contestants interact
	with the autojudge, problems cannot be timed in
	a web contest, and the scoreboard displays only
	the dates of correct solutions.

	The `make web' command in the judging directory
	invokes the makeweb program whose parameters are
	the web page parameters in hpcm_judging.rc.


Contest Definition Data: The Home Directory
------- ---------- ----- --- ---- ---------

Each contestant account must be initialized identically
before the start of a contest.  This is done with the
help of some maintenance programs using a special di-
rectory which is called, informally, the `contest/home'
directory.

To initialize a contestant account, a program called
TRASH_ACCOUNT is run.  This first removes all files
and directories from the account.  It then loads a
completely new set of files and directories from the
`setup.tar' file in the `contest/home' directory.

However, what if something needs changing during the
contest?  As an aid to making this easier, each con-
testant account is set up so that most of the files and
directories in the account's home directory are symbol-
ic links to a real file or directory within the
`contest/home' directory.  Then changing the real file
or directory changes the file or directory for all the
contestant accounts at once.  Of course the real file
or directory must have a+r and maybe a+x permissions,
and cannot be writable by its users, the contestants.

There are a few files and directories which, for
security reasons, cannot be shared among contestants,
because the programs that use them insist they be
owned by the account running the program.  Examples
are the `.procmailrc' file which is used to automa-
tically extract files from the responses to hpcm_
get in an informal contest, and the `.ssh' directory
which can optionally be used to make it easy for
the judge to log into any contestant account.

The `contest/home' directory is symbolically linked to a
`prototype home' directory that is created inside a
`prototype account' by the SETUP_PROTOTYPE program.  If
the prototype account is named PPP, its prototype home
directory is named `~PPP/home'.  A single prototype home
directory can be shared among many contests.  See the
documentation of the SETUP_PROTOTYPE program for more
prototype home directory details.

There are several special files in the prototype home
directory.

    setup.tar
        The tar file that contains all the files
	and symbolic links which are to be in a
	contestant account after TRASH_ACCOUNT is
	run (except for .hpcm_contest: see below).
	It is made by SETUP_PROTOTYPE by tar'ing
	all the files and symbolic links in the
	prototype account.

    setup.ls
        The output of `ls -aR' run just after files
	have been restored from setup.tar.  Used to
	check for a valid restoration.  This is made
	by SETUP_PROTOTYPE.

    empty.ls
       The output of `ls -a' run just after all files
       have been deleted by TRASH_ACCOUNT, and before
       restoring files from setup.tar.  Used to check
       for valid file removal.  This is made by SETUP_
       PROTOTYPE.

There is one symbolic link that TRASH_ACCOUNT does not
set using setup.tar.  This is the .hpcm_contest symbolic
link to the contest directory.  As a consequence, the
.hpcm_contest of a contestant account may not the same
as the .hpcm_contest of the prototype account, and
one prototype home directory may be used by many dif-
ferent contests.  See documentation of TRASH_ACCOUNT for
details.


Contest Definition Data: Contestant Accounts
------- ---------- ----- ---------- --------

After making the following:

    ~JJJ			The judging account.

    ~JJJ/contest_cccc		A contest directory.

    ~PPP/home			The `prototype home'
    				directory made by
				SETUP_PROTOTYPE.

    ~JJJ/contest_cccc/home	A symbolic link to
    				~PPP/home.

    ~JJJ/contest_cccc/secure/passwords
    				The file listing all
				the contestant
				accounts and their
				passwords.

    ~JJJ/contest_cccc/secure/trashable
    				A list of the accounts
				for which TRASH_
				ACCOUNT will work:
				see above.

it is possible to make all the contestant accounts
very easily by logging in as root and running:

 	cd ~JJJ/hpcm/secure/bin
 	./hpcm_make_accounts ~JJJ/contest_cccc
 	./hpcm_set_passwords ~JJJ/contest_cccc
 	./hpcm_TRASH_ACCOUNTS ~JJJ/contest_cccc

The first of three programs run here makes the accounts
listed in secure/passwords, the second sets the pass-
words of these accounts, and the third runs TRASH_
ACCOUNT in each of these accounts.  Note that only con-
testant accounts, and NOT the prototype account, should
be listed in secure/passwords.

Most of the files that are in a contestant account are
just those provided by the UNIX operating system to
every newly created account.  However the following
files need special attention:

    .cshrc and initialization files for other shells

        These files are in the prototype home directory,
	and because contestants symbolically link to
	them, may be modified after contestant accounts
	have been created and initialized.

    	The `path' must be modified to include
	`.hpcm_contest/bin'.  If special compilers
	or interpreters are being used, the path
	should also include these.  Other changes are
	likely to be useful: see SETUP_PROTOTYPE docu-
	mentation for details.

    .procmailrc

        This file must be included in the prototype home
	directory setup.tar file as it cannot be symbol-
	ically linked due to security considerations.

        For an informal contest, this must include stuff
	to extract files from responses to hpcm_get.
	Therefore, it is set up to do this for all
	contestant accounts, so the prototype account
	may be shared between informal and formal con-
	tests.  See SETUP_PROTOTYPE documentation for
	details.

    .ssh/authorized_keys
    or
    .ssh/authorized_keys2

        This file must be included in the prototype home
	directory setup.tar file as it cannot be symbol-
	ically linked due to security considerations.

        Creating this file correctly can enable the
	judge to log into each contestant account with-
	out using the account's password.  If this is
	done, it means contests using this mechanism
	must have different prototype accounts if they
	want to use different keys to access contestant
	accounts.  See SETUP_PROTOTYPE documentation for
	details.


Contest Definition Data: Auxiliary Files
------- ---------- ----- --------- -----

There is one file in the judging account that is shared
among all the contests supported by the account:

    ~/.procmailrc
    	When the makejudgingdir program creates the
	contest/secure/hpcm_sendmail.rc file, it
	writes into the TODO file some lines that must
	be copied by hand to the ~/.procmailrc file.
	These lines route email submissions sent to the
	contest to the correct judging directory.

	For example, if the hpcm_sendmail.rc file
	contains the line:

	    To: 13cc299bd7<JJJ@judge's-computer>

	then the .procmailrc file should contain

	    :0
	    * ^To:.*13cc299bd7
	    | receivemail judging_cccc_ppppppppppp | \\
	      dispatchmail judging_cccc_ppppppppppp

	where ~/judging_cccc_ppppppppppp is the judg-
	ing directory for the contest in the judging
	account JJJ.


Contest Definition Data: Security
------- ---------- ----- --------

HPCM has the following security goals:

1. Prevent a foreign account from pretending to be
   a contestant account.  This is only achievable
   for informal and formal contests (but not for
   email contests).

   This is done in a formal and informal contest by
   having the hpcm_sendmail program which is used by
   the contestants to send mail to the judge be a
   privileged program with access to information not
   available to contestants, and by having that
   program add information and a signature for that
   information to the email sent.

   Specifically, hpcm_sendmail is a UNIX set-user-id
   program that sets the ID to the judging account,
   so it can see the .hpcm_contest/secure/hpcm_
   sendmail.rc file, even though the contestant
   accounts cannot.  This hpcm_sendmail.rc file
   contains a key name and key.  The hpcm_sendmail
   program adds three header fields to the mail it
   sends:

   	X-HPCM-Reply-To
	    The email address HPCM uses as the
	    identity of the account sending the
	    email, and therefore as the identity
	    of the contestant.
	X-HPCM-Date
	    The time the email is sent, which HPCM
	    uses as the time of submission.
	X-HPCM-Signature
	    A signature of the two fields just given,
	    made using the key name and key.

    Upon receipt the signature is verified by the
    judging software, and unverifiable email is
    rejected.

    More specifically, HPCM programs do the following.
    First, they use X-HPCM-Data and X-HPCM-Reply-To
    in preference to the normal mail Date and Reply-To
    header fields.  Second, when the email is first
    processed by `receivemail', any X-HPCM-Signature-OK
    header field in the received mail is stripped from
    the incoming message, and this field is recomputed
    from the two header fields just mentioned and the
    X-HPCM-Signature header field.  The recomputed
    X-HPCM-Signature-OK field is stored in the message
    $received_file file for use by subsequent process-
    ing.  Recomputation and use of X-HPCM-Signature-OK
    may be suppressed by setting the `use-authentica-
    tion' global variable to false.

    The reason that only the X-HPCM-Data and X-HPCM-
    Reply-To fields need to be signed is that if there
    are two submissions with the same values of these
    fields, they will have the same submission directory
    name, and the second submission will therefore be
    ignored as the directory will already exist.  Thus
    a contestant cannot take a submission, change just
    the subject and body but not the X-HPCM fields, and
    resubmit.

2. Prevent code written by contestants from corrupting
   the files of the judge.

   This is done by running the programs submitted by
   the contestant in a `sandbox'.

   The sandbox consists of changing the user and group
   (both real and effective) of the process executing
   the contestant program to `sandbox'.  This must be
   a defined account name that should not be able to
   access any files or directories except those public-
   ally available.

   The sandbox is implemented by the judge's hpcm_sand-
   box program, which must be installed in the UNIX
   /sbin directory (or equivalent), and is set to do a
   root set-user-id.  The contestant's hpcm_sandbox pro-
   gram is the same binary, but in the hpcm/contestant/
   bin directory, and without any set-user-id capabili-
   ty.

   However, current JAVA implementations seem to have
   the following security flaw: they convert relative
   .class file names to absolute names before using
   them.  As a consequence, all the directories in
   the path from the root to the directory in which a
   contestant's JAVA submission is being run must have
   a+x permissions because the contestant's submission
   is run by the `sandbox' account.  The .class files
   themselves must have a+r permissions.

   However, this last difficulty does not permit contes-
   tant code to write any files or directories in the
   judging account.

3. Prevent code written by the contestants from
   exporting judge's information, including solutions
   of the judge and other contestants, into the
   outside world.  This goal is met with some defects.

   It is not practical to make it impossible for
   contestant programs to write information to the
   outside world.  A contestant can merely open a
   file in the contestant's account's home directory,
   after leaving that directory a+w, for example.
   Or the contestant can exploit /tmp, or open a
   network connection.

   The `sandbox' previously described prevents
   contestant programs from being able to read most
   files and all directories in the judging account.
   However, because of the problem with JAVA mentioned
   above, a contestant's account can discover the names
   of components of some directories by guessing names
   and looking at the error codes returned.  Given an-
   other contestant, and guessing submission times, one
   contestant's program can read another contestant's
   .class files.

   To reduce the chances of this working, the `auto-
   judge' program removes a+x permissions from a
   submission directory immediately after running a
   solution program in that directory.  This means that
   the time window for reading any .class files in that
   directory is small.

   A contestant program can always read the judge's
   input, since that is provided to the program during
   judging.

   However, any contestant program that sends informa-
   tion to the outside world will itself be captured
   and held in the judging account, serving as damning
   evidence if the foul nature of the program is dis-
   covered.  Thus any contestant who wrote such a pro-
   gram would be risking discovery for a very long time,
   up until the judge's decide to discard information
   collected during the contest.

4. Prevent one contestant from executing another contes-
   tants solution.  This goal is achieved with a defect.

   This may sound like a ridiculous goal, because any
   security system should achieve it without trying, but
   due to the problems with JAVA, this goal is only im-
   perfectly achieved.

   In order to execute a submitted program with hpcm_
   sandbox changing real and effective user and group
   IDs to those of the `sandbox' account, both the
   submission directory and the submitted program must
   be made a+x first.  If the mail directory were not
   also a+x, there would be no way for outsiders to get
   into the submission directory.  But because of the
   JAVA bug, the mail directory is also a+x.

   Thus one contestant's submission can guess the time
   of another contestant's submission and execute that
   other contestant's submission.  A relatively simple C
   program can do this, in effect replacing itself by
   the submission of another contestant.

   To reduce the probability of success, the `autojudge'
   program removes a+x permissions from any submission
   directory right after running a solution in that dir-
   ectory.  This means that the time window in which
   another contestant might be able to run this solution
   is small.

   As for 3 above, any contestant program that tries
   this stunt leaves itself behind as damning evidence
   for a very long time.

Contest Raw Data: Directories
------- --- ----- -----------

The raw data of the contest consists of submissions and
the results of processing these.  Each submission is an
email message containing a problem solution, a request
to get files, or a query.  This email is placed in a
separate directory by itself.  The system then works in
that directory to develop information, such as the
binary program created by compiling a solution submis-
sion, the output of running this program on the judge's
input data, the score automatically assigned to the
submission, and any score later manually assigned to
the submission.  All of this information is considered
to be `raw data'.

In general, contest raw data is only created and never
destroyed.  Thus it provides both information about the
state of the contest and an audit trail telling what
happened during the contest.

Raw data is stored in the following directories:

    mail_directory

        Normally the `mail' subdirectory of the judging
	directory.

	The mail_directory contains a separate subdirec-
	tory for each piece of email sent to the judge.
	The processing of that email occurs within this
	subdirectory.

	The mail_directory is created by `makejudging-
	dir' and must exist before judge's email is
	received.

    mail_directory/dddd-<<ssssss>>-submission

        This is a submission directory, which is a sub-
	directory of the mail_directory created to pro-
	cess one email message sent to the judge by the
	submitter ssssss at a time indicated by the date
	dddd.  A specific example of the last component
	of the subdirectory name is:

	2000-12-10-06:30:49-<<hpcm-t@gigue>>-submission

	The submitter is normally the return email
	address of the email message sent to the judge,
	but may be edited to remove spaces and alter
	some special characters.  It is not used per se
	as an email address by HPCM.  The part before
	any `@', plus optionally a compressed version
	of the part after any `@' (see the submitter_
	compress function in hpcm_judging_rc), is used
	as a contestant name by the scoreboard software,
	and should therefore be unique to the submitter.

	Note that the date gives a time in seconds, and
	is organized so that submissions with later
	times sort alphanumerically later.

	Because the date is in seconds, there cannot be
	more than one submission per second from the
	same submitter.  Any submission but the first
	will find that the directory it is supposed to
	create already exists, and therefore all submis-
	sions but the first with the same date to the
	nearest second will be ignored.

	As a consequence, programs like hpcm_get that
	send email to the judge pause for at least a
	second after sending each separate piece of
	email.

	This directory is made automatically by the
	`receivemail' program when the email first
	arrives.

	More details about the files in this directory
	are given in following sections.

    log_directory
        Normally the `log' subdirectory of the judging
	directory.

        Errors that are not particular to one submission
	and therefore cannot be placed in a submission
	directory are placed here, each in their own
	file with the same name structure (including
	`checking') as errors put in submission direc-
	tories (see below).

	The log_directory is created automatically when
	it is first needed.

    ~/HPCM_Error_Log
        This is an emergency error log directory for
	use only if the log_directory cannot be found,
	cannot be created, or is not writable.

	This directory is created automatically when it
	is first needed.


Contest Raw Data: Submissions
------- --- ----- -----------

Any email sent to the judge is called a `submission'.
There are three kinds of submission: email containing a
problem solution, which is called a `solution submis-
sion'; email requesting files to be returned to a
contestant, which is called a `get request', and email
asking a question, which is called a `query'.

Each email sent to the judge is placed in a separate
subdirectory of the mail_directory.  This subdirectory
has a name of the form:

    mail_directory/dddd-<<ssssss>>-submission

and is called the `submission directory' for the piece
of email stored in it.  See above for details concerning
dddd and ssssss.

Files in the email's submission directory that are
specific to each kind of email are described in separate
sections below.  Files that can exist in all kinds of
submission directories are as follows:

    $received_file
	This is a read-only file that holds the piece of
	email sent to the judge which caused this direc-
	tory to be created.

    $reply_file
	This is the FINAL reply email sent by the judge
	concerning this directory.  Thus the presence of
	this file indicates that the judge is done with
	this submission directory.

	The judge can also send non-final email replies,
	which are NOT stored in this file.

    $reply_file+
        Every reply is first composed in this file, and
	then emailed.  When emailed, this file is either
	deleted or renamed to $reply_file (if it is the
	final reply).  Thus strictly speaking this file
	is not a `raw data' file, as it is not part of
	the audit trail.

    $no_reply_file
	This file is created by the judge to indicate
	the judge is done with this submission direc-
	tory, but does not intend to send an email reply
	to the contestant.  Typically this\
					$no_reply_file
	file is just a one line file containing a reason
	why the judge feels no email reply is needed.
	The `lookat' program can revisit directories
	containing a $no_reply_file file whose contents
	match some given regular expression; so the
	contents of this file can serve as a marker to
	find this directory later.

	When the judge is done with this directory,
	either the $reply_file file or $no_reply_file
	file must exist.

    $reply_history_file
	This file is a log of ALL email replies sent by
	the judge for this directory.

    dddd-rrrr-<<ppppp>>-unchecked-error
	This `error log' file describes a system error
	that occurred processing this directory.  Of
	course, system errors are not supposed to hap-
	pen, but if they do, this file containing all
	the available information about the error is
	created.

	dddd is the date in seconds, rrrr is a random
	number to make the file unique even if several
	system errors happen in the same second, ppppp
	is the name of the program that suffered the
	system error.

	If an error occurs in an HPCM program that is
	NOT processing a submission directory, this
	error log file is put in the log_directory (see
	above), instead of in a submission directory.

    dddd-rrrr-<<ppppp>>-checked-error
	This is an `unchecked-error' file (see just
	above) which has been read and `checked' by the
	judge.  An error file is `checked' by changing
	the `unchecked' in its name to `checked'.

	The `tracker' program searches for unchecked
	error log files and calls the judge's attention
	to them.  Error log files may be `checked' by
	the `manualreply' program.  Checked error log
	files are ignored by `tracker'.

    dddd-rrrr-<<ppppp>>-unchecked-error.mail
    dddd-rrrr-<<ppppp>>-checked-error.mail
	An error log file may be emailed to a `log_
	manager' when it is created.  If this is done, a
	companion .mail file is created containing the
	email message.  This file is `checked' when its
	associated error log file is `checked'.


The section `Contest Raw Data: Data Flow' below outlines
the creation of raw data files in a submission direc-
tory.

Contest Raw Data: Solution Submissions
------- --- ----- -------- -----------

A solution submission is an email with a subject of the
form `submit pppp.eee', where pppp is the problem name
and .eee is the extension that identifies the program-
ming language used in the submission.  Standardly
pppp.eee is also the name of the single submitted file
that is contained in the body of the submission email.
But is it possible (given a $files_file file in the\
	solu-
tion directory), for .eee to be omitted, and/or for
multiple files of various names to be submitted in the
body of the submission email.

A file being submitted may appear in the body of the
email in either of two ways.  It may be `formatted' or
`unformatted'.  If formatted, it appears as:

	HPCM_BEGIN filename
	.. first line of file
	.. next line of file
	.. rest of file, each line preceded by ..
	HPCM_END filename

If unformatted the file is just the body of the email
message, verbatim.  If there are multiple unformatted
files in a message, each file must contain `File:
filename' in its first block of non-blank lines.

Only formatted submissions are usually allowed in in-
formal and formal contests.  Such submissions are gener-
ated by the hpcm_submit program, which performs the
required formatting.  Unformatted submissions are
typically allowed in email contests so that contestants
who do not have hpcm_submit can submit easily.

A solution submission directory is processed by the
`autojudge' program.  If a single file named pppp.eee
is being submitted, this program produces the following
files in order (see `Library Data: Problems' above for
more details about many of these files):

   pppp.eee		The submitted file.
 * pppp.in		Judge's input.
 * $make_file		Problem Makefile.
 * pppp.test		Judge's output.
 * $scoring_filter_file\
   			Optional output filter program.
 * pppp.ftest		Optional filtered .test file.
 * $scoring_instructions_file\
			Optional scoring instructions.
 * $response_instructions_file\
			Optional response instructions.
   pppp			Binary program.
   pppp.cerr		Compiler error output.
   pppp.out		Solution standard output.
   pppp.fout		Optional filtered .out file.
   pppp.err		Solution error output.
   core			Possible core dump.
   pppp.score		Output of scorediff.
   $auto_score_file		Autojudge score.
   $reply_file		Possible final reply.
   $reply_history_file	History of all replies.

The files marked with a * are linked into the submission
directory from the problem solution directory (the pro-
blem's subdirectory in the solutions subdirectory of the
judging directory).  The above is the standard behavior
when no `$files_file' file is linked from the problem
solution directory.  But if a `$files_file' file is
linked, files different from pppp.eee can be submitted,
and additional files can be linked from the problem
solution directory, as indicated in the section `Library
Data: Complex Problems' above.

If an error happens during the process of producing
these files, the process stops.  An error in extracting
pppp.eee, or an error in the name of the file (pppp is
not a problem in the solutions directory or eee is not
a legal extension), generates a $reply_file file that is
the final say in the error.  Other errors generate an
$auto_score_file file.

The nature of any automatically generated reply to the
submitter given that an $auto_score_file file has been
generated is controlled by the\
	$response_instructions_file
file if that is present, or by a default value for that
file otherwise.  For the default, if the scoring mode is
`auto', a final reply containing the score is sent.  The
same is done if the score is `Completely Correct', re-
gardless of the scoring mode.  Otherwise if the scoring
mode is `auto+manual', a reply containing the score is
sent to the contestant, but not as a final score, and NO
$reply_file file is generated; and if the scoring mode
is `manual', no reply is sent to the contestant, and no
$reply_file file is generated.

The behavior of `autojudge' is similar to the behavior
of `make' in a contestant's problem directory (see help
files) or a problem library problem directory (see
above).  The main differences are that the `autojudge'
extracts the `pppp.eee' file, captures compiler errors
in `pppp.cerr', captures run errors in `pppp.err', and
scores `pppp.out' (or `pppp.fout') generating\
	$auto_score_file
and possibly reply email.

The section `Contest Raw Data: Data Flow' below gives
some more details for solution submission directories.

If the `autojudge' does not produce a final reply, it
creates a $needs_reply_flag_file file in the flag dir-
ectory to signal that this submission directory needs
the attentions of `manualreply'.  The `manualreply'
program must then be run to assign a manual score, which
is stored in a `$manual_score_file' file.   Email con-
taining this score is sent to the contestant as a final
reply and is stored in the $reply_file file.


Contest Raw Data: Get Requests
------- --- ----- --- --------

A get request submission is an email with a subject of
the form `get filename ...'.  The filenames are relative
to the judging directory's `info' subdirectory, and name
files in that directory to be `gotten', i.e., returned
in reply mail to the contestant.  A directory can also
be named, in which case all the files and the subdirec-
tories in the directory will be gotten, recursively.
See the documentation of the `autoinfo' program, which
processes get requests, for details.

The `autoinfo' program produces the following files in
the email's submission directory:

    $reply_file		Final reply.
    $reply_history_file	History of all replies.
    $gotten_file		List of files\
    				successfully
    			gotten.

The `autoinfo' program always produces a final reply
the therefore a $reply_file file.  It may produce two
email replies: one containing error messages and one
containing files successfully gotten.  These two kinds
of replies have different `Subject' header field formats
so they can be distinguished by automatic mail routers
such as `procmail', and replies containing files can be
sent to hpcm_extract, while replies containing error
messages can avoid hpcm_extract.

Processing of get requests is completely automatic;
there is never any need for manual reply (barring a sys-
tem error, of course).


Contest Raw Data: Queries
------- --- ----- -------

A query submission is an email with a subject that does
not begin with either `submit' or `get'.  Such an email
is used to ask a question of the judge.

If the `reply_mode' is `auto', the `autodispatch' pro-
gram produces an email reply and a $reply_file file
automatically.  If the `reply_manager' is not \"\", this
email is CC'ed to the `reply_manager' who can respond
from an account other than the judge's.

If the `reply_mode' is not `auto', the\
				$needs_reply_flag_file
file is created in the flag directory to signal that
this directory needs the attentions of `manualreply'.
The `manualreply' program must then be run to generate
a $reply_file or a $no_reply_file file.


Contest Raw Data: Data Flow
------- --- ----- ---- ----

The flow of raw data through the HPCM system is as
follows:

                email to judge
                     |
                     | receivemail (called
                     | from ~/.procmailrc)
                     |
                     v
        mail_directory/dddd-<<sssss>>-submission
               $received_file
                     |
                     | dispatchmail (called
                     | from ~/.procmailrc)
                     | autodispatch (called
                     | by dispatchmail)
                     |
                     v \[Test `Subject:']
+-----+-----+---------
|     |     | \[Subject: not `submit ...' or `get ...']
|     |     |
|     |     +---> flag_directory/$needs_reply_flag_file,
|     |               if reply_mode != `auto';
|     |           or $reply_file and $reply_history_file
|     |               if reply_mode == `auto'
|     |
|     | \[Subject: `get ...']
|     | autoinfo (called from autodispatch)
|     |
|     +----> $reply_file, $reply_history_file,\
             $gotten_file
|
| \[Subject: `submit: pppp.eee']
| autojudge (called from autodispatch)
+--------------+
               |
               v

               |
               | autojudge
               v
            $files_file (if any)
               |
               | \[is `$files_file' file present and\
                                       does
               |  it list -SOLUTION-MAKE- files]
               |
               +-------------+
               |             |
          \[no] |             | \[yes]
               |             |
               |             |  make filename ...
               |             |  (called in
               |             |   solutions_directory/ppp
               |             |   by autojudge)
               |             |
               |      files made in
               |  solutions_directory/ppp
               |             |
               |             |
               |<------------+
               |
               | extractmail (called from autojudge)
               v
               +-----------------+
               |                 |
    \[no error] |                 | \[non-system error]
               |                 |
               |                 | autojudge
               v                 v
            pppp.eee        $reply_file
            or other        $reply_history_file
         submitted files
               |
               |
               v

               |
               | autojudge
               | (linking files from
               |  solutions_directory/pppp)
               |
               v
            $make_file
            pppp.test 
            pppp.ftest (if any)
            $scoring_filter_file (if any)
            $scoring_instructions_file (if any)
            $response_instructions_file (if any)
            additional linked files\
                         (if `$files_file' file)
               |
               | make pppp (called from autojudge)
               |
               v
            pppp (if no error)
            pppp.cerr (compiler standard error output)
               |
               +-------------+
               |             |
 \[pppp exists] |             | \[pppp does not exist]
               |             |
               |             | autojudge
               |             v
               |        $auto_score_file =\
                        `Syntax Error'
               |        $reply_history_file
               |          if scoring_mode != `manual'
               |        $reply_file
               |          if scoring_mode == `auto'
               |
               v

               |
               | make pppp.out (called from autojudge)
               |
               v
            pppp.out (standard output)
            pppp.err (standard error output)
            core (if program crashes)
               |
               | \[is pppp.err empty]
               |
               +-------------+
               |             |
         \[yes] |             | \[no]
               |             |
               |             | autojudge
               |             v
               |        $auto_score_file
               |        $reply_history_file
               |          if scoring_mode != `manual'
               |        $reply_file
               |          if scoring_mode == `auto'
               |
               |
               | \[is $scoring_filter_file or pppp.ftest
               |  present, and is pppp.out non-empty]
               |
               +----------------+
               |                |
          \[no] |                | \[yes]
               |                |
               |                |\
                                $scoring_filter_file
               |                | (called by autojudge)
               |                v
               |             ppp.fout
               |                |
               |                |
               |<---------------+
               |
               v

               |
               | autoscore (called from autojudge)
               |
               |
               +------------------------+
               |                        |
    \[non-empty |                        | \[empty or
     .out or   |                        |   missing
     .fout]    |                        |   .out or
               |                        |   .fout]
               | scorediff (called      |
               | from autoscore)        |
               |                        |
               v                        |
            pppp.score                  |
               |                        |
               |                        |
               | autoscore              |
               | (called from           |
               |  autojudge)            |
               |                        |
               v                        |
           $auto_score_file     $auto_score_file =\
                                 `Program Crashed'
               |                        |
               |                        |
               |<-----------------------+
               |
               |
               v

               |
               | \[is $response_instructions_file\
                               present]
               |
               +--------------------+
               |                    |
          \[no] |                    | \[yes]
               |                    |
               |                    v
               |              $reply_file maybe
               |              $reply_history_file maybe
               |
               |
               +---------------+
               |               |
  \[score ==    |               | \[score !=
   `Completely |               |  `Completely  
    Correct']  |               |   Correct']
               |               v
               |        $reply_history_file
               |          if scoring_mode != `manual'
               |        $reply_file
               |          if scoring_mode == `auto'
               v
           $reply_file
       $reply_history_file


If a system error occurs at any point, which can only
happen if HPCM has a bug, then processing stops and
an unchecked error log file is created.  If processing
is within a submission directory, the log file is
created within this directory; otherwise the log file
is created within the log_directory.


Contest Derived Data: Processing Status Files
------- ------- ----- ---------- ------ -----

During the processing of raw data and the updating of
the scoreboard, several files are used to keep track of
the status of data processing and program processes.
These files and one of their containing directories
are:

    flag_directory
        Normally the `flag' subdirectory of the judging
	directory.

        Flag files in this directory are created just
	after information is written into other files
	that may need to be read by certain programs
	(makescoreboard or tacker).   The programs that
	read these other files, when they see that a
	flag file exists, delete the flag file first,
	and then read the other files to see what to do.

	Specifically, the following are flag files in
	the flag directory:

	    $score_flag_file
	        Created when any $auto_score_file or
		$manual_score_file file is written;  the
		`makescoreboard' program sees this flag
		and recomputes the scoreboard.

	    $needs_reply_flag_file
	        Created when any action that will re-
		quire a person to use the `manualreply'
		program happens.  The `tracker' program
		sees this flag and then looks throughout
		the contest directories and files to see
		where `manualreply' should be run.

    judging_directory/$scoreboard_pid_file
        A file in the judging directory containing the
	process ID of any `makescoreboard' program that
	is running in background.  This file is main-
	tained by the `makescoreboard' program with its
	`start' and `stop' options.  The `status'
	option reads this file and displays the status
	of the process identified in the file.

    mail_directory/*-submission/$dispatch_pid_file
        This file is used as a lock to prevent more than
	one `autojudge' or `manualreply' program from
	running in a submission subdirectory at once.
	This file is a lock on the submission direc-
	tory.  The file contains the process ID of the
	program that has locked the directory.

	If `autojudge' tries to create this file and
	the file already exists, `autojudge' terminates
	without error, assuming some other process is
	processing the directory.  If `manualreply'
	tries to create this file and the file already
	exists, `manualreply' displays the status of the
	process identified by this file, and asks its
	user whether to quit or kill the identified
	process (if it is still running) and continue.

    solutions_directory/pppp/$dispatch_pid_file
        This file is used as a lock to prevent more than
	one `autojudge' program from making files in the
	same problem solution directory at one time.
	See the -SOLUTION-MAKE- feature of the autojudge
	program.


Contest Derived Data: Scoreboard Files
------- ------- ----- ---------- -----

The `makescoreboard' program can run in background and
recompute the scoreboard as necessary.  It always com-
putes the following file:

    judging_directory/$scorefinder_output_file
        Output of the scorefinder program, for use as
	input to the scoreboard program.

The other scoreboard files depend upon the scoreboard
instructions in hpcm_judging.rc.  The standard instruc-
tions for different types of contests compute the fol-
lowing files (non-standard instructions may compute
different files):

  For email contests:

    judging_directory/scoreboard.mail
        A copy of the scoreboard emailed to an address
	by `makescoreboard'.  Concatenation of an actual
	scoreboard with scoreboard.notes

  For informal contests:

    contest_directory/scoreboard.1
        The first of four scoreboard pages visible to
	the contestant `scoreboard' display program.
	Concatenation of scoreboard.1head with the
	actual scoreboard.

  For formal contests:

    contest_directory/scoreboard.public
        The scoreboard proper containing submissions
	up until the freeze time.

    contest_directory/scoreboard.freeze
        A special freeze announcement created at the
	freeze time.

    contest_directory/scoreboard.1
        The first of four scoreboard pages visible to
	the contestant `scoreboard' display program.
	Concatenation of scoreboard.1head, scoreboard.
	freeze (if that exists), and scoreboard.public.

    contest_directory/scoreboard.current
        The current scoreboard.  Only readable by
	judges.

    contest_directory/scoreboard.final
        The final scoreboard suitable for printing,
	and containing a copy of the who_where file.
	Only readable by judges.

See `makescoreboard' and the scoreboard parameters in
hpcm_judging.rc for details.


Programs: Contestant
--------- ----------

The programs runnable by the contestant are documented
in the help files: see `Library Data: Help Documenta-
tion'.  All these programs are in the hpcm/contestant/
bin directory, to which the contestant account's
~/.hpcm_contest/bin directory is linked.  This last is
in the PATH of the contestant account.

A brief summary of these programs follows:

    help		Display help files.
    scoreboard		Display a scoreboard.
    xcsh		Create new xterm windows.
    hpcm_sendmail	Send email from a contestant to
    			the judge.
    hpcm_get		Make `get file' requests using
    			hpcm_sendmail or link problem
			files into contestant account
			directories.
    hpcm_extract	Extract files returned in email
    			replies to `get file' requests.
    hpcm_sandbox	Run contestant submissions in a
    			`sandbox'.  For a contestant,
			this just applies resource
			limits.
    hpcm_submit		Submit problem solution files
    			using hpcm_sendmail.
    hpcm_clisp		Run COMMONLISP programs.  Uses
    			hpcm_clisp.lsp as helper code.

    fprint		Print 56 column files.
    print		Print 80 column files.
    print2		Print 80 column files 2 file
    			pages per print page.
    lpq			Display printer status.

In addition, the following programs are designed to be
run in a contestant account, but are either to be run
by the judge while setting up accounts, are to be run
indirectly by the above programs:

    printer_pipe	Locates the printer, sends the
    			standard input to that printer,
			and updates the printer_jobs
			file.

    SETUP_PROTOTYPE	Used in the prototype account to
    			to make the prototype home di-
			rectory.  See below.

    TRASH_ACCOUNT	Used in a contestant account to
    			reinitialize all the files and
			symbolic links in that account.
			See below.

Programs: Judging
--------- -------

The judge's programs are in hpcm/judge/bin, which is
placed in the PATH of the judge's account.  A brief
summary of the programs used during a contest to run
the contest follows:

    hpcm_sendmail	Send mail to the judge (from
    			himself or an auxiliary judge).

    receivemail		Process received email and store
    			it in a submission directory
			that this program creates.
    dispatchmail	Call autodispatch for each
    			submission directory.
    autodispatch	Call autoinfo or autojudge, or
    			process query, for a submis-
			sion directory.

    autoinfo		Process a get request submis-
    			sion directory.
    autojudge		Process a solution submit
    			submission directory.

    extractmail		Extract solution files from
    			received email.

    hpcm_sandbox	Run hpcm_sandbox_x with the
    			`-core 0' option.
    hpcm_sandbox_x	Run a program in a sandbox.
    			Same as contestant/bin/hpcm_
			sandbox but with root set user
			ID, so the contestant's program
			is run with user ID `sandbox'.
    hpcm_clisp		Run a COMMONLISP program.  Uses
    			hpcm_clisp.lsp for helper func-
			tions.

    autoscore		Compute the score from the .out
    			and .test (or .fout and .ftest)
			files.
    scorediff		Compare the .out and .test (or
    			.fout and .ftest) files and re-
			port differences in a .score
			file.

    startcontest	Change the mode of ./contest/
    			problems and ./contest/help/pro-
			blems to make them readable by
			contestants.

    makescoreboard	Recompute the scoreboard files
    			at intervals.
    scoreboard		Compute a scoreboard given the
    			output of `scorefinder'.
    scorefinder		Look through all the submis-
    			sion directories for score
			files and output the information
			found.

    manualreply		Permit a human user (the judge)
    			to inspect the contents of a
			submission (or error log) dir-
			ectory and to specify manual
			scores and email replies.
    tracker		Identify submission director-
    			ies and error log directories
			for which `manualreply' should
			be run and permit a user to
			dispatch `manualreply' to these.
			Can also produce summary tables.
    trackfinder		Look through all the submis-
    			sion directories for information
			needed by `tracker' and output
			this information for `tracker'
			to use.
    lookat		Find submission directories
    			containing files with given
			names and contents, and dispatch
			`manualreply' to these director-
			ies.
    jprint		Print 80 column files to all
    			printers using `printer_broad-
			cast'.
    printer_broadcast	Sends the standard input to all
    			printers, and updates the
			printer_jobs file.
    lpq			Prints the last few lines of the
    			printer_jobs file.

Note that some of these programs are imported by the
hpcm/judge/bin/Makefile from other directories.  E.g.,
hpcm_sandbox_x is a compiled version of hpcm/secure/
src/hpcm_sandbox.c that is normally installed in /sbin.


Programs: Contest Making
--------- ------- ------

The following programs are used to make contests:

    hpcm/judge/bin/makejudgingdir
    	Make the contest definition files starting
	from parameters to this program (usually
	contained in a Makefile) and hpcm_judging.rc.

    hpcm/judge/bin/makeweb
    	Make a web page set containing problem state-
	ments and optionally problem solutions.
    	
    hpcm/judge/bin/fprint
    	Print 56 column line files, 2 file pages per
	print page.

    hpcm/judge/bin/hpcm_print_passwords
    	Print contestant account names and passwords
	each on a separate page with contest specific
	instructions.

    hpcm/judge/bin/hpcm_email_passwords
    	Email contestant account names and passwords
	to team coaches, each with extra information
	containing contest specific instructions.

    hpcm/contestant/bin/SETUP_PROTOTYPE
    	Setup the prototype account and the files needed
	by TRASH_ACCOUNT.

    hpcm/contestant/bin/TRASH_ACCOUNT
        Initialize (or reinitialize) the files and dir-
	ectories of a contestant account.

    hpcm/secure/bin/hpcm_make_accounts
	Create all the contestant accounts.

    hpcm/secure/bin/hpcm_set_passwords
	Set passwords for all the contestant accounts.

    hpcm/secure/bin/hpcm_TRASH_ACCOUNTS
	Run TRASH_ACCOUNT in each contestant account.


Programs: Maintenance
--------- -----------

The following programs in hpcm/judge/bin are used for
maintenance.

    overview		Print this document.
    installing_hpcm	Print the `Installing HPCM'
    			document.
    judging		Print the `HPCM Judging' docu-
    			ment on how to judge contests.
    makeMakefile	Make problem Makefiles from an-
    			other problem Makefile that acts
			as a template.
    testproblems	Test many problems at once.
    fcheck		Check that a file has 56 column
    			lines and 40 line pages.
    fcheckc		Check that a file has 56 column
    			lines (but unlimited length
			pages, for code).
    chkpage		Helper for fcheck{,c}.
    filtered_diff	Diff filtered files.
    file_list		Make lists of HPCM files from
    			logical expressions involving
			keywords.

In addition the following program in hpcm/contestant/bin
is used for maintenance.

    hpcm_extract_test_replies
    			Extract messages in a mailbox
			that have an X-HPCM-Test-Subject
			field beginning with a test
			name.


Programs: Common Functions
--------- ------ ---------

There are four packages of functions that can be import-
ed by HPCM TCL programs:

    hpcm/judge/lib/hpcm_judging.rc
    	Parameters and system/user interface functions.

    hpcm/judge/lib/judging_common.tcl
    	General functions.

    hpcm/judge/lib/display_common.tcl
    	Display functions.

    hpcm/judge/lib/scoring_common.tcl
    	Scoring functions.

    hpcm/judge/lib/scoreboard_common.tcl
    	Scoreboard functions.

Programs: System/User Interface Common Functions
--------  ----------- --------- ------ ---------

The file hpcm/judge/lib/hpcm_judging.rc contains func-
tions usable by any HPCM TCL program that are simple
interfaces to underlying operating systems programs or
extended TCL functions, or that are interfaces to basic
actions such as editing that users may wish to custom-
ize.  Changes of operating system, TCL extensions, or
user preferences can be made just by changing these
functions.  A brief summary of these functions is:

    proc submitter_compress { submitter }
        Compress the email address of a submitter to
	make a scoreboard contestant name.

    proc send_mail { message_file }
    proc send_message { message }
    	Send a file or variable value as email.

    proc compute_signature { value }
        Compute the MD5 signature of a value.

    proc create_file { filename }
    proc create_directory { dirname }
        Create a file or directory, unless the file or
	directory already exists, and return an indica-
	tion of whether a new file or directory was
	created.  Used for locking.

    proc link_file { source { target . } }
        Symbolically link source to target.

    proc copy_file { source target }
        Copy a file.

    proc grant_access { filename { allow rx } }
    	Add a+x, a+r, or a+w permissions to file or
	directory.

    proc get_access { filename }
        Discover `a' permissions of file.

    proc deny_access { filename }
        Deny all permissions for a file or directory
	except to owner.

    proc view_file { filename }
        Look at a file (e.g., with an editor).

    proc edit_file { filename }
        Edit a file with your favorite editor.

    proc make_file { name err_file }
        Make the `name' by using the `make' program on
	the Makefile in the current directory.

    proc diff_directories { directory1 directory2 }
        Diff two directories, as per UNIX `diff -r'.

    proc diff_files \\
             { file1 file2 output { options \"\" } }
	Diff two files as per UNIX `diff' and write a
	complete description of the result, including
	error messages, into an output file.

    proc call_shell {}
        Invoke your favorite shell for interactive use.

    proc exec_in_directory { directory command args }
        Execute a command in a particular directory.

    proc current_pid {}
        Return the current process' ID.

    proc display_process_tree { root_pid }
        Display the processes in the process tree rooted
	at a given process ID.

    proc process_found { display }
        Returns true iff root process existed when
	display_process_tree returned display.

    proc signal_process_tree { signal root_pid }
        Send a KILL or INT signal to all the processes
	in a process tree rooted at a given process ID.

    proc make_signals_errors {}
    proc make_signals_ignored {}
    proc make_signals_default {}
        Set all `likely' UNIX signals to cause a TCL
	error, be ignored, or cause their default
	action.

    proc disable_outputs {}
        Route stderr and stdout to /dev/null.

    proc account_name {}
    proc host_name {}
    	Return the account name or host network name.


Programs: General Common Functions
--------  ------- ------ ---------

The file hpcm/judge/lib/judging_common.tcl contains
functions usable by any HPCM TCL program.  A brief sum-
mary of these is:

    proc exit_cleanup {}
    	Called on every exit; can be redefined to per-
	form cleanup actions.

    proc dispatch_lock {}
    proc dispatch_unlock {}
    	Manage the submission directory\
		$dispatch_pid_file
	file.

    proc clock_to_filename_date { clock }
    proc filename_date_to_clock { date }
        Convert standard time data to/from the date
	format used in submission directory names and
	error log file names.

    proc is_checked { filename }
    proc make_checked { filename }
    proc make_unchecked { filename }
        Manages the `checked' flag in an error log file
	name.

    proc caught_error {}
        Catch an error occurring in an HPCM TCL program.

    proc log_error { error_output }
        Log an error to an error log file, to the stand-
	ard error output, or to an email.

    proc read_header { ch { first_line \"\" }
			  { omit_fields \"\" } }
	Read the header of received email.

    proc compute_message_reply_to {}
    proc compute_message_date {}
    proc compute_authentication {}
        Compute the effective Reply-To, Date, and
	X-HPCM-Signature-OK email header field values.

    proc header_is_authentic {}
        Test whether message is authentic.

    proc reply { args }
        Call compose_reply and then send_reply.

    proc compose_reply { args }
        Compose a reply in $reply_file+.

    proc send_reply { args }
        Send the reply stored in $reply_file+.

    proc blank_body { ch }
        Check if received email has a blank body.

    proc find_scoring_instructions {}
        Compute the effective scoring instructions.

    proc scrub_filename { filename }
        Remove noise like '/foo/../' from a filename.

    proc put_file { filename
		   { ch stdout }
		   { line_count 1000000000 } }
	Write an entire file of the first so many lines
	of a file to a channel.

    proc read_file { filename }
        Read and return the first line of a file.

    proc write_file { filename line }
        Write an entire file, usually a one line file.

    proc read_entire_file { filename }
        Read the entire file and return it as a string.

    proc set_flag { flagfilename }
    proc test_flag { flagfilename }
    proc clear_flag { flagfilename }
    	Manage flags in the flag directory.

    proc compile_logical_expression { expression
                                      abbreviations
				      atoms values }
	Compile a logical expression.

Programs: Display Common Functions
--------  ------- ------ ---------

The file hpcm/judge/lib/display_common.tcl contains
functions usable by any HPCM TCL program for menu driven
displays.  A brief summary of these is:

    proc display_window {}
    	Display current window.  The current window has
	`display', `info', `error', and `prompt' parts.

    proc set_window_display { display }
    proc set_window_info { info }
    	Set the `display' or `info' part of the current
	window.

    proc bar_with_text { text }
        Return a `===' bar ending with the text.

    proc yes? {}
        Read input and check it for `yes' or `no'.

    proc continue? {}
        Wait for ENTER or RETURN input.

    proc out_check { out }
    	If `out' not \"\", print it and call\
					`continue?'.

    proc get_lock {}
    	Get $dispatch_pid_file lock.

    proc clear_lock {}
    	Clear $dispatch_pid_file lock.

    proc get_listed_files { }
        Compute list of files to be put in file list.

    proc get_file_item { filename }
    	Get item from file list describing file.

    proc get_file_items { regexp }
        Get items from file list for files whose names
	match the regexp.

    proc refresh_file_list { }
        Compute the file list items (which describe
	file modification times, sizes, etc.) from the
	value of `get_listed_files'.

    proc get_file { id }
    	Given the id of a file list file, return the
	name of the file and error information for the
	current window.

    proc read_score { score_file }
    	Read a one line score file.

    proc make_diff { file }
        Make a .diff or .bdiff file if necessary.

    proc set_file_list_display {}
        Set the current window to display the current
	file list.

    proc set_file_display { filename }
    	Set the current window to display a file.

    proc read_file_array { filename xxx_array
                                    linenumber } 
	Read a file incrementally into an array.

    proc close_file_array { xxx_array }
    	Close a file input array.

    proc tab_expand { line }
        Return line with tabs expanded.

    proc compute_file_display { filename xxx_array
    				first_line_number
				last_line_number
				highlights }
	Return display of some lines of a file with
	some text in the file highlighted.

    proc send_query { header }
    	Create an email a query to the judge.


Programs: Scoring Common Functions
--------  ------- ------ ---------

The file hpcm/judge/lib/scoring_common.tcl contains
functions usable by any HPCM TCL program to compute
scores.  A brief summary of these is:

    proc compute_instruction_array { }
    	Compute scoring instructions array from the
	value of `find_scoring_instructions'.

    proc compute_score_and_proof_arrays \\
    	    { { score_file_name \"\" } }
	Compute score and proof arrays from .score file.

    proc compute_score_file \\
	    { outfile testfile scorefile }
    	Compute .score file from outfile and testfile.

    proc compute_score { }
    	Compute score form scoring instructions and
	score arrays.

    proc compose_response \\
	    { { compose_reply_options \"\" } }
    	Compose a reply indicating the score.

    proc send_response { commands }
    	Send any previously composed response.

    proc get_proof { args }
    	Set the current proof group and proof within
	this group.

    proc set_proof_display { }
    	Set current window display part to display the
	current proof.

    proc compute_proof_info { }
    	Set current window info part to display summary
	of proofs in proof array.



Programs: Scoreboard Common Functions
--------  ---------- ------ ---------

The file hpcm/judge/lib/scoreboard_common.tcl contains
functions usable by any HPCM TCL program to produce a
scoreboard.  A brief summary of these is:

    proc compute_scoreboard_array { input_ch }
    	Compute a scoreboard data base from the output
	of the scorefinder program.

    proc prune_scoreboard_array {}
        Prune and sort a scoreboard data base.

    proc compute_scoreboard_list {}
        Compute an internal scoreboard from a pruned
	scoreboard data base.

    proc format_problem_score \\
    		{ time incorrect modifier }
	Format a single problem score for printing.
"

exit 0

# Include common error catching code:
#
} caught_output
caught_error
