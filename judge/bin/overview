#!/bin/sh
#
# Make judge's overview document.
#
# File:		overview
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Mon Jan  8 16:53:55 EST 2001
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: hc3 $
#   $Date: 2001/01/09 17:07:32 $
#   $RCSfile: overview,v $
#   $Revision: 1.20 $
#
# The next line starts tcl \
exec tcl "$0" "$@"

# Use tcl rather than tclsh so that `signal' is defined.

# Include common code and parameters:
#
set lib_directory "[file dirname $argv0]/../lib"
source $lib_directory/judging_common.tcl
set log_mode none
catch {

puts "
		     HPCM Overview
		     ---- --------

	Features
	Requirements
	Installing HPCM
	Creating a Contest
	Data and Programs
	Library Data: Problems
	Library Data: Help Documentation
	Library Data: Example Contests
	Contest Definition Data: The Judging Directory
	Contest Definition Data: The Contest Directory
	Contest Definition Data: The Home Directory
	Contest Definition Data: Contestant Accounts
	Contest Definition Data: Auxilary Files
	Contest Definition Data: Security
	Contest Raw Data: Directories
	Contest Raw Data: Submissions
	Contest Raw Data: Get Requests
	Contest Raw Data: Queries
	Contest Raw Data: Data Flow
	Contest Derived Data: Status Files
	Contest Derived Data: Scoreboard Files

Features
--------

The Harvard Programming Contest Manager, HPCM, has the
following features:

    o Supports different kinds of programming contests:

    	email	    Contestants supply their own ac-
		    counts and communicate with the
		    judge by email to get problems and
		    submit solutions.  Contestants may
		    compete at any time.

	informal    Contestants are given accounts which
		    they can use locally or remotely at
		    any time to get problems and submit
		    solutions.

	formal	    Contestants are given accounts and
		    printouts of problems at a fixed
		    contest starting time.

    o Has an automatic judge, that can be used exclu-
      sively, or as an aid to a human judge.

    o Has a library of problems and supports easy semi-
      automated creation of new contests.

    o Keeps a complete log of everything that happens
      during contests in the form of files that can be
      easily analyzed for different purposes.

    o Is written modularly in TCL and Bourne Shell (sh)
      so that HPCM can easily be adapted and modified.


Requirements
------------

HPCM currently requires a UNIX system with Bourne shell
and TCL language interpreters.

A couple of programs require the `read -r' Bourne
shell command, and a Bourne shell `echo' command that
does not specially interpret the `\\' character.  If you
are using a UNIX system whose Bourne shell does not
support these features, the simplest fix is to import
the GNU Bourne shell, bash, and fix the programs con-
taining `read -r' to use it (these programs are current-
ly hpcm_extract and SET_PROTOTYPE).

TCL can be obtained at:	 	www.scriptics.com

Bash can be obtained at:

	www.gnu.org/software/bash/bash.html


Installing HPCM
---------- ----

There is a separate document, `Installing HPCM', that
describes how to obtain and install HPCM.  HPCM can be
obtained from

	www.deas.harvard.edu/~hc3/hpcm


Creating a Contest
-------- - -------

To create a contest, first read the help files

	hpcm/contestant/help/*/*

to get a good idea of what you are creating.  The file

	hpcm/contestant/help/index

explains what each of these files contains and suggests
an order in which these files may be read.

Then choose the type of contest you want to create
(email, informal, formal) and read the instructions in

	hpcm/examples/<contest-type>_contest/Makefile

This file also contains basic advice on how to judge
the contest.

You should also read

	hpcm/judge/lib/hpcm_judging.rc

and try to understand the parameters in that file as
best you can.

In order to better understand what you are doing, you
may wish to read the following overview, and then read
the individual program documentation for some of the
programs used to set up or judge contests.


Data and Programs
---- --- --------

HPCM handles different categories of data:

Library Data
    Problem descriptions, help documentation files,
    example contest parameter files.

Contest Definition Data
    Files that define a contest, including documentation
    for contestants, problem definition, solution defi-
    nition, and contest parameter definition.

Contest Raw Data
    Files that capture submissions and information gen-
    erated during judging, such as binary program files,
    output files, scores, and email replies.

Contest Derived Data
    Scoreboards and contest tracking summaries.


HPCM also contains several different categories of
programs:

Contestant Programs
    Programs run by contestants during a contest.

Judging Programs
    Programs run to judge a contest.

Contest Making Programs
    Programs run to make a contest.

Maintenance Programs
    Programs run to maintain the library, produce doc-
    umentation, or test the HPCM system.

Library Data: Problems
------- ----- --------

The problem library consists of the subdirectory tree
rooted at

	hpcm/problem_library

Each problem (and each demonstration problem) has its
own directory within the problem library.  The last
component of the name of this directory is the name of
the problem, and is also the basename of files describ-
ing the problem and solving the problem.

The library problem directories are placed within one of
three subdirectories of the hpcm/problem_library direc-
tory:

	demos	Demonstration problems.

	public	Problems that can be freely distributed
		to the public, without any restriction
		on verbatim copying, without any re-
		strictions on verbatim redistribution,
		and with no restriction on alteration
		unless otherwise indicated.

	private	Problems that cannot be redistributed
		to the public.  These have been taken
		off the web in most cases, and can be
		distributed to true friends and colla-
		borators or other members of your uni-
		versity, but cannot be placed on the web
		or be made available to strangers.

The problem directories are listed in the

	hpcm/problem_library/index

file, which can be input to the makejudgingdir program
to define which problems are to be used in a particular
contest, and to create an index of these problems.

Emails giving permission to make various problems public
are in the directory

	hpcm/problem_library/legal


If a problem has name `pppp', then the problem has a
problem directory named `pppp' within one of the
directories just mentioned, and the following files
within this problem directory describe the problem:

    pppp.txt	Problem description.

    Makefile	Gives instructions for compiling and
                running the problem solution.

These files are made available to the contestant, though
in a formal contest only a printout of the pppp.txt file
is made available.

In order to be able to score a problem, three more files
are placed in the problem directory within the program
library:

    pppp.in		    The judge's test input.
    pppp.test		    The judge's test output.
    Scoring_Instructions    Optional file containing
    			    parameters that control how
			    the automatic scoring is
			    done (e.g., what numeric
			    tolerances are permitted).
			    See the documentation of
			    the `autoscore' program.

A contest has a solutions directory that contains sym-
bolic links to the library problem directories for every
problem that can be judged during the contest.  The
files just mentioned become input to the judging.

In addition to the files already mentioned, the library
problem directory usually contains a judge's solution
written in one of the contest programming languages.
The solution is written as a file whose extension indi-
cates the programming language of the solution.  Typical
possibilities are:

    pppp.c	C language solution.
    pppp.cc	C++ language solution.
    pppp.java	JAVA language solution.
    pppp.p	PASCAL language solution.

The programming languages allowed may vary; but every
solution language must be explicitly supported by the
problem Makefile.

It is possible to compile and run the solution within
the library problem directory in the same manner as
a problem is compiled and run by contestants and by the
judge.  Doing this results in making temporary files
that can be removed by the `make clean' command in the
problem directory.

Compilation creates a temporary binary file named `pppp'
and may create other temporary files for some languages:

    pppp	    The executable program binary.
    pppp*.class	    JAVA class files.
    pppp.p2c	    C translation of PASCAL program.

The solution is written to take input from the standard
input (the terminal by default) and put output to the
standard output (also the terminal by default).  The
Makefile contrives to run the program with resource
limits and so that the standard input and output are
mapped to a .in file and a .out file.  Running the
solution using the Makefile reads or creates the
following temporary files:

    pppp.in	Solution input.
    pppp.out	Solution output.
    core	Dump of program if it crashes.

It is important to note that the solution code should
NOT open any files.

The `make' command in the problem directory makes the
binary program if that does not exist or it is older
than the solution source file, and then makes the
pppp.out file if that does not exist or it is older than
the binary file or the .in file.

If a problem directory symbolically linked into a con-
test solutions directory has a pppp.out file, this file
will be treated as the judge's output in PREFERENCE to
any pppp.test file.  Thus if a judge finds an error in
the judge's solution, the judge merely needs to fix
the judge's solution and run the `make' command in the
solution problem directory to fix the judge's output.
After the contest the judge can replace the pppp.test
file by a copy of the correct pppp.out file.

However, there is a difficulty with running JAVA
solutions in a library problem directory using `make'.
The judge's hpcm_sandbox program runs the binary as
a user named `sandbox' that cannot access the problem
directory using an absolute pathname.  Unfortunately,
existing JAVA systems have a bug that causes them to
convert relative pathnames of .class files into absolute
pathnames before they are used, so the .class files
cannot be found by the `sandbox' user.  The fix for this
currently is to run the progams manually by

	pppp <pppp.in >pppp.out

The `make clean' command in the problem directory de-
letes all temporary files, including `pppp', `pppp.out',
`core', and `.class' files.


Library Data: Help Documentation
------- ----- ---- -------------

The help documentation files reside in the subdirectory
tree rooted at

	hpcm/contestant/help

A help file index (in a format prescribed by the
`makejudingdir' program) is in

	hpcm/contestant/help/index

Each `help' file is a short ASCII text document on some
topic contestants may need to know about.  For example,
there is a `help' file on the mechanics of solving a
problem (what files to write, how to compile, etc.).

The help files have a 56 column times 40 line format
that permits them to be printed two file pages per
paper page using a reasonable size font.  The fprint
program prints these files: the fcheck program checks
that they have no line longer than 56 columns and no
page longer than 40 lines.

The subdirectories of `hpcm/contestant/help' are
as follows:

    common	Help files used for all kinds of con-
    		tests (email, informal, and formal).

    email	Help files used for email contests only.

    email/sh	Code written in the Bourne Shell (sh)
    		language that can be used by contestants
		of an email contest on their own com-
		puters.

    informal	Help files used for informal contests
    		only.

    formal	Help files used for formal contests
    		only.

The `email/sh' subdirectory contains actual code.  If
similar code is written in other languages, e.g. tcl,
other subdirectories, e.g. `email/tcl', would be
created.


Library Data: Example Contests
------- ----- ------- --------

Subdirectories of

	hpcm/examples

contain parameter files necessary to set up a specific
type of contest.  Some of these subdirectories are:

    email_contest	Example email contest.

    informal_contest	Example informal contest.

    formal_contest	Example formal contest.

    test_contest	A `test contest' that merely
    			tests the autojudge.

Each of these subdirectories contains a Makefile that
contains documentation on how to use the files in the
subdirectory.  Typically this documentation tells how
to create a contest by making a judging directory, copy-
ing the files in the `hpcm/examples' subdirectory into
the judging directory, editing these copies, etc.


Contest Definition Data: The Judging Directory
------- ---------- ----- --- ------- ---------

A contest is defined by a collection of directories and
files, and by a few lines in parameter files that are
shared among many contests (e.g., ~/.procmailrc).

The heart of the contest is the judging directory.  This
typically has a name of the form:

	~/judging_cccc_ppppppppppp

where cccc is the name of the contest and ppppppppppp is
a string of random numbers and letters that makes the
directory name hard to guess.  The reason for this is
that in order to run JAVA code in a sandbox, all the
directories on the path from the root directory to the
program directories have to have a+x permissions (this
is a security bug in JAVA, surely), so to prohibit out-
siders from getting into the judge's subdirectory tree
it is necessary that the judging directory name be un-
guessable.

Fortunately the judge really does not need to use the
full name of the judging directory except in vary rare
instances, as `~/judging_cccc_*' or the equivalent
suffices.  The judge's account has u+r permission on
directories, so the `*' works for the judge's account,
but there is NO read permission on the directories for
outside users.

The judging directory contains the hpcm_judging.rc file
that defines parameters for the contest.  Whenever most
HPCM programs in hpcm/judge/bin are executed, they
search the current directory and its ancestors for a
file named hpcm_judging.rc.  If a program finds one such
file, it uses that to define the contest parameters, and
uses the directory that file is in as the contest jud-
ging directory.  It is an error if the program finds two
such files.  Therefore, one judging directory cannot be
the ancestor of another judging directory.  However,
one judging account can have many judging directories,
each the root of a disjoint subtree of directories.
Therefore one judging account can judge many contests.

The judging directory contains several components that
define the contest, in addition to many components that
belong to the raw data of the contest, and are listed
elsewhere below.  Starting from a few contest defining
components, the other contest defining components can
be made automatically by the `makejudgingdir' program.

The contest defining components of the judging directory
are:

    hpcm_judging.rc
        The contest parameters file.  This is editted
	by hand to define the contest.

    solutions
        The solution directory for the contest.  Each
	component of the solution directory is a symbol-
	lic link to a problem directory.  Often these
	problem directories are in the problem library.

	But for formal contests problems are often used
	that have not yet been entered into the problem
	library, and the problem directories for these
	are usually in a special (and secure) directory
	that has an index file listing the problems.
	This index file is in a format suitable for the
	`makejudgingdir' program.

	The solutions directory and its contents are
	made automatically by `makejudgingdir'.

    info
        The info directory for the contest.  This only
	exists for email and informal contests, and it
	is the root of a subdirectory tree that holds
	the files that can be obtained by contestants
	using hpcm_get.  Thus the contents of the info
	directory proper are just three subdirectories:
	help, demos, and problems.  These in turn con-
	tain files and subdirectories.  The files
	proper are typically represented by symbolic
	links: see `makejudgingdir' documentation.

	The info directory and its contents are made
	automatically by `makejudgingdir'.

    contest
        The contest directory of the contest.  Actually,
	this is not a subdirectory proper of the judging
	directory, but `contest' in the judging direc-
	tory is symbolically linked to the contest
	directory.  This is because the contest direct-
	ory must be accessible by the contestants, who
	must not know the full name of the judging di-
	rectory.

	Only informal and formal contests have a contest
	directory.  Email contests do not.

	The contest directory itself and the symbolic
	link from the judging directory to the contest
	directory must be made by hand.

	The contents of the contest directory are made
	automatically by `makejudgingdir', with the
	exception of a few symbolic links to other
	directories and a few files (see `Contest Def-
	inition Data: The Contest Directory' below).

    help
        The help directory of the contest.  This is not
	used during the contest proper, but is merely a
	staging area for the `this_contest' help file.
	It contains the following files that are created
	by `makejudgingdir':

	    this_contest
	        The help file particular to the contest.

	    index
	        An index file to be input to `make-
		judgingdir' that lists all the index
		files output by that program and also
		lists the `this_contest' help file.

	The help directory and its contents are made
	automatically by `makejudgingdir', but then
	the person defining the contest must edit the
	`this_contest' file and re-run `makejudgingdir'.

    scoreboard.notes
        A file appended to the scoreboard by the `send-
	scoreboard' program that emails the scoreboard
	to other locations for display on the web.
	This is normally used only for email contests.

    TODO
    	When `makejudingdir' runs, it appends instruc-
	tions to its user to the end of this file.
	Typical instructions are `edit ./contest/secure/
	passwords' and `put the following lines in
	the judge's procmailrc file: ...'.

In addition to these files which are used by HPCM
programs, there is typically one other file that is not
used by HPCM programs themselves.  This is:

    Makefile
        The instructions to the UNIX `make' program so
	that running `make' in the judging directory
	will run `makejudgingdir' to build all the
	contest definition files.  The parameters to
	`makejudgingdir' are complex, and need to be
	kept in a file.  The Makefile may also do
	some of the things that this overview says
	must be done `by hand'.

	See hpcm/examples/*/Makefile for examples.


Contest Definition Data: The Contest Directory
------- ---------- ----- --- ------- ---------

Formal and informal contests have a contest directory
containing files that can be accessed by contestants.
Email contests do not have this directory.

Each contestant in a formal or informal contest has
an account in which `~/.hpcm_contest' is symbolically
linked to the contest directory.  The contest directory
itself has a+x permissions and contains the following
components that contestants can access.

    bin
    	A directory containing programs the contestants
	can execute.  The name `~/.hpcm_contest/bin' is
	part of the program search path for each contes-
	tant account.

	The name `bin' in the contest directory is
	usually symbolically linked to
	
	    ~/hpcm/contestant/bin

	in the judging directory.  Note that this means
	that ~/hpcm and ~/hpcm/contestant must have
	a+x permissions, ~/hpcm/contestant/bin must
	have a+rx permissions, and appropriate programs
	in the ~/hpcm/contestant/bin must have a+x or
	a+rx permissions.  Running `make' inside the
	~/hpcm directory, a part of the installation
	procedure of HPCM, sets these permissions.
	See `Installing HPCM' (hcpm/judge/doc/instal-
	ling_hpcm.doc).

	The `makejudgingdir' program symbolically links
	`bin' to `contestant/bin' in the contest direc-
	tory.  See `contestant' below.

    contestant
	The name `contestant' in the contest directory
	must be symbolically linked by hand to the
	hpcm/contestant directory, wherever that is
	located (usually ~/hpcm/contestant).

    demos
        This is a directory that contains demonstration
	problems.  It is strictly analogous to the
	`problems' directory, see below.

    help
    	This directory contains a+r copies of all the
	help files for the contestants.  These can be
	read by the contestant `help' program.

	This `help' directory and its contents are
	made automatically by `makejudgingdir'.

    home
    	This is a symbolic link to a directory that is
	informally called the `contest/home' directory
	and that contains files shared amoung all con-
	testant accounts.  For example, in a contestant
	account the `.cshrc' name is symbolically linked
	to `.hpcm_contest/home/.cshrc', and thence to
	the `.cshrc' file in the contest/home directory.
	Therefore editing the `.cshrc' file within the
	contest/home directory changes that file in ALL
	contestant accounts.

	The contest/home directory is set up by the
	SETUP_PROTOTYPE program: see `Contest Definition
	Data: The Home Directory' below for more
	details.

    printer
    	This file contains nothing but the name of the
	printer to be used by the contestants.  This
	name should be suitable for use with the -P
	option to various UNIX print commands.  If the
	file is missing, these commands use the value
	of the PRINTER environment variable at the time
	the commands execute.

	This file is made by `makejudgingdir' and may
	be edited or removed by hand.

    printer_jobs
        If this file exists and is a+w, each use of the
	printer by one of the print commands in the
	contest bin directory causes a line to be
	written into this file.  The line gives the
	time and the location of the contestant.  This
	location is taken from the who_where file (see
	below) `WHERE' field, if available, and is
	otherwise the contestant account name.

	This file can be used by the contestant `lpq'
	program to print out printer status, and by the
	judges to monitor printer activity.

	This file is made by `makejudgingdir' and can
	be removed or made o-w by hand.

    problems
    	This directory contains problem directories for
	each of the contest problems.  The strictly
	analogous `demos' directory (see above) contains
	demonstration problems.

	Each non-demonstration problem directory in the
	contest directory is a subdirectory of this
	`problems' directory and has as its name the
	name of the problem.  Thus a problem named
	`pppp' would have `problems/pppp' as the name of
	its problem directory within the contest direc-
	tory.  Demonstration problems are similar but
	are in the `demos' directory instead of the
	`problems' directory.

	Within the problem directory there is a a+r copy
	of the `Makefile' of the problem.  It is also
	possible to put a a+r copy of the `.txt' file
	describing the problem, but this is NOT usually
	done for formal contests.  For demonstration
	problems (in `demos') many a+r file copies may
	be in the problem directory, as judge's input
	and output and solutions in different program-
	ming languages are often provided.

	The `problems' directory exists only for formal
	contests.  For informal or email contests, simi-
	lar information is placed in the `info/problems'
	(and `info/demos' for demonstration problems)
	subdirectories of the judging directory.  For a
	formal contest, the contestant's hpcm_get pro-
	gram creates a problem directory in the contes-
	tant's account and symbolically links into that
	directory all files in the problem directory
	within the .hpcm/contest/problems directory,
	i.e., the contest directory in the judge's
	account.  For an informal contest hpcm_get ob-
	tains the same information from the `info/
	problems' directory by email and makes a copy of
	the files in the contestant account.

	This `problems' directory and its contents are
	made automatically by `makejudgingdir'.

    scoreboard.1head
    scoreboard.2
    scoreboard.3
    scoreboard.4
        The scoreboard, which can be read by the contes-
	tant `scoreboard' program, can have up to four
	pages, which are stored in the a+r files
	scoreboard.1 through scoreboard.4.  The first of
	these files is made automatically by the `make-
	scoreboard' program, which concatenates the
	scoreboard.1head file to the computed scoreboard.
	The scoreboard.1head, scoreboard.2, scoreboard.3,
	and scoreboard.4 files must be edited by hand.
	See the documentation of `makescoreboard' and
	`scoreboard' for details.

    secure
    	This directory contains files that cannot be
	accessed by contestants, but can be accessed by
	the judging account, and can be accessed by the
	hpcm_sendmail program which can be run by
	contestants but sets its user id (by the UNIX
	setuid mechanism) to the judging account.
	
	This directory, if it does not already exist,
	will be made by the `makejudgingdir' program,
	as will some of the files in the directory.

	The files in the directory are:

	    hpcm_sendmail.rc
	        This file contains parameters for hpcm_
		sendmail.  Specifically, the email
		address to send mail to in order to
		contact the judge (this email address
		typically contains a password), and the
		key-name and key to use in signing the
		email (or more specifically, the HPCM
		return email address and date fields of
		the email).  An example hpcm_sendmail.rc
		file is:

		    To: 13cc299bd7<walton@walton1>
		    Key: 55071403c7
		    Key-Name: judging_informal

		This file is made by the makejudgingdir
		program, which creates random passwords
		for the email address and key.

	    passwords
	    	This file lists the contestant accounts,
		and is used to create these accounts.
		Each line of this file has the format:

		    account:password:who:C:T:comment

	        where C is the coach's email address and
		and T is the team's email address.  The
		first field is the contestant account
		name.  The `who' field is the team name
		in description form.

		The password field can be generated by
		the makejudgingdir program.  The rest
		of the file must be made by hand.

		Only the account and password fields are
		needed by HPCM to run a contest.

		Note that in making up a list of contes-
		tant accounts, you should include one
		test account, which you can use to see
		if everything is working.

	    passwords_header
	        This is a file used by hpcm_print_pass-
		words.  This program prints each account
		name and password on a separate page
		with the contents of this file at the
		beginning of the page.  It is used only
		when account names and passwords are to
		be handed to contestants: typically this
		is only in an informal contest.

    who_where
        This file is a copy of the secure/passwords file
	but with the password field value replaced by
	a `WHERE' value, that tells where the team is
	physically located.  This file is used by the
	print programs: the where field labels the pages
	of print output and the line output to any
	print_jobs file.  If the who_where file is
	missing, not a+r, or the `WHERE' field has not
	been filled in by hand, the print programs use
	the contestant account name instead.

	The who_where file is made automatically from
	the secure/passwords file by makejudgingdir,
	and will be updated automatically by that
	program when the secure/passwords file changes.
	However, the `WHERE' field in the who_where
	file must then be filled in by hand.

    trashable
        This file lists all contestant accounts that
	can be `trashed'.  To `trash' an account is
	to remove all its files and then reload its
	files from ./hpcm_contest/home/setup.tar, which
	is just the files in the prototype contestant
	account.  See the documentation of the SETUP_
	PROTOTYPE program and see `Contest Definition
	Data: The Home Directory' below.

	The `trashable' file is made from secure/
	passwords by the `makejudgingdir -trashable'
	command.  It should only be made just before
	trashing the contestant accounts, and should
	be removed immediately after trashing these
	accounts.  There is a program runnable by a
	contestant account, TRASH_ACCOUNT, that will
	trash the contestant account, but only if the
	name of that account is listed in an a+r
	.hpcm_contest/trashable file.


Contest Definition Data: The Home Directory
------- ---------- ----- --- ---- ---------

Each contestant account must be initialized identically
before the start of a contest.  This is done with the
help of some maintainence programs using a special di-
rectory which is called, informally, the `contest/home'
directory.

To initialize a contestant account, a program called
TRASH_ACCOUNT is run.  This first removes all files
and directories from the account.  It then loads a
completely new set of files and directories from the
`setup.tar' file in the `contest/home' directory.

However, what if something needs changing during the
contest?  As an aid to making this easier, each con-
testant account is set up so that most of the files and
directories in the account's home directory are symbol-
ic links to a real file or directory within the
`contest/home' directory.  Then changing the real file
or directory changes the file or directory for all the
contestant accounts at once.  Of course the real file
or directory must have a+r and maybe a+x permissions,
and cannot be writable by its users.

There are a few files and directories which, for
security reasons, cannot be shared among contestants,
because the programs that use them insist they be
owned by the account running the program.  Examples
are the `.procmailrc' file which is used to automa-
tically extract files from the responses to hpcm_
get in an informal contest, and the `.ssh' directory
which can optionally be used to make it easy for
the judge to log into any contestant account.

The `contest/home' directory is set up and maintained
by the SETUP_PROTOTYPE program.  To use SETUP_PROTOTYPE,
a prototype account must be created, and it is the files
and symbolic links in this account that are saved and
then restored in all the contestant accounts.

There are several special files in the `contest/home'
directory.

    setup.tar
        The tar file that contains all the files
	and symbolic links which are to be in a
	contestant account after TRASH_ACCOUNT is
	run (except for .hpcm_contest: see below).
	It is made by SETUP_PROTOTYPE by tar'ing
	all the files and symbolic links in the
	prototype account.

    setup.ls
        The output of `ls -aR' run just after files
	have been restored from setup.tar.  Used to
	check for a valid restoration.

    empty.ls
       The output of `ls -a' run just after all files
       have been deleted by TRASH_ACCOUNT, and before
       restoring files from setup.tar.  Used to check
       for valid file removal.

There is one symbolic link that TRASH_ACCOUNT does not
set using setup.tar.  This is the .hpcm_contest symbolic
link to the contest directory.  As a consequence, the
.hpcm_contest of a contestant account may not the same
as the .hpcm_contest of the prototype account, and
therefore one `contest/home' directory may be used by
many different contests, each of which symbolically
link their `home' subdirectory to the same `contest/
home' directory.

The `contest/home' directory is made and maintained by
the SETUP_PROTOTYPE program: see the documentation of
that program for details.  Also see the documentation
of the TRASH_ACCOUNT program.


Contest Definition Data: Contestant Accounts
------- ---------- ----- ---------- --------

After making the following:

    ~JJJ			The judging account.

    ~JJJ/contest_cccc		A contest directory.

    ~JJJ/prototype_home		The `contest/home'
    				directory made by
				SETUP_PROTOTYPE.

    ~JJJ/contest_cccc/home	A symbolic link to
    				~JJJ/prototype_home.

    ~JJJ/contest_cccc/secure/passwords
    				The file listing all
				the contestant
				accounts and their
				passwords.

    ~JJJ/contest_cccc/secure/trashable
    				A list of the accounts
				for which TRASH_
				ACCOUNT will work:
				see above.

it is possible to make all the contestant accounts
very easily by logging in as root and running:

 	cd ~JJJ/hpcm/secure/bin
 	./hpcm_make_accounts ~JJJ/contest_cccc
 	./hpcm_set_passwords ~JJJ/contest_cccc
 	./hpcm_TRASH_ACCOUNTS ~JJJ/contest_cccc

The first of three programs run here makes the accounts
listed in secure/passwords, the second sets the pass-
words of these accounts, and the third runs TRASH_
ACCOUNT in each of these accounts.  Note that only con-
testant accounts, and NOT the prototype account, should
be listed in secure/passwords.

Most of the files that are in a contestant account are
just those provided by the UNIX operating system to
every newly created account.  However the following
files need special attention:

    .cshrc (or other shell initialization file)
    	The `path' must be modified to include
	`.hpcm_contest/bin'.  If special compilers
	or interpreters are being used, the path
	should also include these.  It may be desirable
	to turn off autologout (unset this variable in
	.cshrc), especially in a formal contest in
	which the judge's log the contestants in.

    .procmailrc
        For an informal contest, this must include stuff
	to extract files from responses to hcpm_get.
	See hpcm/examples/informal/Makefile.

    .ssh/authorized_keys
        Creating this file correctly can enable the
	judge to log into each contestant account with-
	out using the account's password.


Contest Definition Data: Auxilary Files
------- ---------- ----- -------- -----

There is one file in the judging account that is shared
among all the contests supported by the account:

    ~/.procmailrc
    	When the makejudgingdir program creates the
	contest/secure/hpcm_sendmail.rc file, it
	writes into the TODO file some line that must
	be copied by hand to the ~/.procmailrc file.
	These lines write email submissions sent to the
	contest to the correct judging directory.

	For example, if the hpcm_sendmail.rc file
	contains the line:

	    To: 13cc299bd7<JJJ@judge's-computer>

	then the .procmailrc file should contain

	    :0
	    * ^To:.*13cc299bd7
	    | receivemail judging_cccc_ppppppppppp | \
	      dispatchmail judging_cccc_ppppppppppp

	where ~/judging_cccc_ppppppppppp is the judg-
	ing directory for the contest in the judging
	account JJJ.


Contest Definition Data: Security
------- ---------- ----- --------

HPCM has the following security goals:

1. Prevent a foreign account from pretending to be
   a contestant account.

   This is done in a formal and informal contest by
   having the hpcm_sendmail program which is used by
   the contestants to send mail to the judge be a
   privileged program with access to information not
   available to contestants, and by having that
   program add information and a signature for that
   information to the email sent.

   Specifically, hpcm_sendmail is a UNIX set-user-id
   program that sets the ID of the judging account,
   so it can see the contest_directory/secure/hpcm_
   sendmail.rc file, even though the contestant
   accounts cannot.  This hpcm_sendmail.rc file
   contains a key name and key.  The hpcm_sendmail
   program adds three header fields to the mail it
   sends:

   	X-HPCM-Reply-To
	    The email address HPCM uses as the
	    identity of the account sending the
	    email, and therefore as the identity
	    of the contestant.
	X-HPCM-Date
	    The time the email is sent, which HPCM
	    uses as the time of submission.
	X-HPCM-Signature
	    A signature of the two fields just given,
	    made using the key name and value.

    Upon receipt the signature is verified by the
    judging software, and unverifyable email is
    rejected.

    More specifically, HPCM programs do the following.
    First, they use X-HPCM-Data and X-HPCM-Reply-To
    in preference to the normal mail Date and Reply-To
    header fields.  Second, when the email is first
    processed by `receivemail', any X-HPCM-Signature-OK
    header field in the received mail is stripped from
    the incoming message, and this field is recomputed
    from the two header fields just mentioned and the
    X-HPCM-Signature header field.  The recomputed
    X-HPCM-Signature-OK field is stored in the message
    $received_file file for use by subsequent process-
    ing.  Recomputation and use of X-HPCM-Signature_OK
    may be surpressed by setting the `use-authentica-
    tion' global variable to false.

2. Prevent code written by contestants from corrupting
   the files of the judge.

   This is done by running the programs submitted by
   the contestant in a `sandbox'.

   The sandbox consists of changing the user and group
   (both real and effective) of the process executing
   the contestant program to `sandbox'.  This user
   should not be able to access any files or directories
   except those publicaly available.

   The sandbox is implemented by the judge's hpcm_
   sandbox program, which must be installed in the UNIX
   /usr/sbin directory (or equivalent), and is set to
   do a root set-user-id.  The contestant's hpcm_sandbox
   program is the same binary, but in the hpcm/
   contestant/bin directory, and without any set-user-id
   capability.

   However, current JAVA implementations seem to have
   the following security flaw: they convert relative
   .class file names to absolute names before using
   them.  As a consequence, all the directories in
   the path from the root to the directory in which a
   contestant's JAVA submission is being run must have
   a+x permissions because the contestant's submission
   is run by the `sandbox' account.  The .class files
   themselves must have a+r permissions.

   This last difficulty does not permit contestant
   code to write any files or directories in the
   judging area.

3. Prevent code written by the contestants from
   exporting judges information, including solutions
   of the judge and other contestants, into the
   outside world.  This goal is met with some defects.

   It is not practical to make it impossible for
   contestant programs to write information to the
   outside world.  A contestant can merely open a
   file in the contestant's account's home directory,
   after leaving that directory a+w, for example.
   Or the contestant can exploit /tmp, or open a
   network connection.

   The `sandbox' previously described prevents
   contestant programs from being able to read most
   files and all directories in the judging account.
   However, because of the problem with JAVA mentioned
   above, a contestant's account can discover the names
   of components of a directory by guessing names and
   looking at the error codes returned.  Given another
   contestant, and guessing submission times, one
   contestant's program can read another contestant's
   .class files.

   A contestant program can always read the judge's
   input, since that is provided to the program
   during judging.

   However, any contestant program that sends informa-
   tion to the outside world will itself be captured
   and held in the judging account, serving as damning
   evidence if it is discovered.  Thus any contestant
   who wrote such a program would be risking for a very
   long time, up until the judge's decide to discard
   information collected during the contest.



Contest Raw Data: Directories
------- --- ----- -----------

The raw data of the contest consists of submissions and
requests and the results of processing these.  Each
submission or request is an email message that is placed
in a separate directory by itself.  The system then
works in that directory to develop information, such
as the binary program created by compiling a submission,
the output of running this program on the judge's input
data, and score automatically assigned to the submis-
sion, and any score later manually assigned to the sub-
mission.  All of this information is considered to be
`raw data'.

In general, contest raw data is only created and never
destroyed.  Thus it provides both information about the
state of the contest and an audit trail telling what
happened during the contest.

Raw data is stored in the following directories:

    mail_directory
        Normally the `mail' subdirectory of the judging
	directory.

	The mail_directory contains a separate subdirec-
	tory for each piece of email sent to the judge.

	The mail_directory is created by `makejudging-
	dir' and must exist before judge's email is
	received.

    mail_directory/dddd-<<ssssss>>-submission
        This is a directory holding an email sent to the
	judge by the submitter ssssss at a time indica-
	ted by the date dddd.  A specific example of the
	last name component of the directory is:

	2000-12-10-06:30:49-<<hpcm-t@method>>-submission

	The submitter is normally the return email
	address of the email message sent to the judge,
	but may be editted to remove spaces and alter
	some special characters.  It is not used per se
	as an email address by HPCM.  The part before
	any `@' may be used as a contestant name by
	the scoreboard software.

	Note that the date gives a time in seconds, and
	is organized so that submissions with later
	times sort alphanumerically later.

	Because the date is in seconds, there cannot be
	more than one submission per second from the
	same submitter.  Any submission but the first
	will find that the directory it is supposed to
	create already exists, and therefore all submis-
	sions but the first with the same date will be
	ignored.

	As a consequence, programs like hpcm_get that
	send email to the judge pause for at least a
	second after sending each separate piece of
	email.

	The following are files that can exist in this
	directory regardless of the kind of email that
	created the directory.


	    $received_file
		This is a read-only file that holds the
		piece of email sent to the judge which
		caused this directory to be created.

	    $reply_file
	        This is the final reply email sent by
		the judge concerning this directory.
		Thus the presence of this file indicates
		that the judge is done with this direc-
		tory.

		The judge can also send none-final email
		replies, which are not stored in this
		file.

	    $no_reply_file
	    	This file is created by the judge to in-
		dicate the judge is done with this di-
		rectory, but does not intend to create
		a $reply_file file.  Typically this is
		just a one line file containing a
		reason why the judge feels no email
		reply is needed.   The `lookat' program
		can revisit directories containing a
		$no_reply_file file whose contents match
		some given regular expression; so the
		contents of this file can serve as a
		marker to find this directory later.

		When the judge is done with this
		directory, either the $reply_file file
		or $no_reply_file file must exist.

	    $reply_history_file
	        This file is a log of ALL email replies
		sent by the judge for this directory.

	    dddd-rrrr-<<ppppp>>-unchecked-error
	    	This `error log' file describes a system
		error that occurred processing this di-
		rectory.  Of course, system errors are
		not supposed to happen, but if they do,
		this file containing all the available
		information about the error is created.

		dddd is the date in seconds, rrrr is a
		random number to make the file unique
		even if several system errors happen in
		the same second, ppppp is the name of
		the program that sufferred the system
		error.

	    dddd-rrrr-<<ppppp>>-checked-error
	        This is an `unchecked-error' file (see
		just above) which has been read and
		`checked' by the judge.  An error file
		is `checked' by changing the `unchecked'
		in its name to `checked'.

		The `tracker' program searches for un-
		checked error log files and calls the
		judge's attention to them.  Checked
		error log files are ignored by `track-
		er'.

	    dddd-rrrr-<<ppppp>>-unchecked-error.mail
	    dddd-rrrr-<<ppppp>>-checked-error.mail
	        An error log file may be emailed to a
		`log_manager' when it is created.  If
		this is done, a companion .mail file is
		created containing the email message.
		This file is `checked' when its assoc-
		iated error log file is `checked'.

	There are three kinds of email that may be sent
	to the judge: solution submissions, get re-
	quests, and queries (i.e., email that is not one
	of the first two kinds).  Information specific
	to each of these kinds of email is described
	below.

    log_directory
        Normally the `log' subdirectory of the judging
	directory.

        Errors that are not particular to one submission
	or request are placed here, each in their own
	file with the same name structure (including
	`checking') as errors put in submission direc-
	tories.

	The log_directory is created automatically when
	it is first needed.

    ~/HPCM_Error_Log
        This is an emergency error log directory for
	use only if the log_directory cannot be found,
	cannot be created, or is not writable.

	This directory is created automatically when it
	is first needed.


Contest Raw Data: Submissions
------- --- ----- -----------

Any email sent to the judge may be called a `submis-
sion', but more particularly a `submission' is an email
with a subject of the form `submit ffff', where ffff is
a file name, and with a body containing the named file.
Such an email is interpreted as submission of a single
file that contains the solution of a problem.

The file being submitted may appear in the body of the
email in either of two ways.  It may be `formatted' or
`unformatted'.  If formatted, it appears as:

	HPCM_BEGIN ffff
	.. first line of file
	.. next line of file
	.. rest of file, each line preceded by ..
	HPCM_END ffff

If unformatted the file is just the body of the email
message, verbatim.

Only formatted submissions are usually allowed in
informal and formal contests.  Unformatted submissions
are typically allowed in email contests so that
contestants who do not have program support (hpcm_
submit) can submit easily.

TBW

Contest Raw Data: Get Requests
------- --- ----- --- --------


Contest Raw Data: Queries
------- --- ----- -------


Contest Raw Data: Data Flow
------- --- ----- ---- ----

The flow of raw data through the HPCM system is as
follows:

		email to judge
		     |
		     | receivemail (called
		     | from ~/.procmailrc)
		     |
		     v
	mail_directory/dddd-<<sssss>>-submission
	    $received_file
		     |
		     | dispatchmail (called
		     | from ~/.procmailrc)
		     | autodispatch (called
		     | by dispatchmail)
		     |
		     v Test `Subject:'
+-----+-----+---------
|     |     | Subject: not `submit ...' or `get ...'
|     |     |
|     |     +---> flag_directory/$needs_reply_flag_file,
|     |           if reply_mode is not `auto';
|     |           or $reply_file if reply_mode is `auto'
|     |
|     | Subject: `get ...'
|     | autoinfo (called from autodispatch)
|     |
|     +----> $reply_file, $gotten_file
|
| Subject: `submit: pppp.eee'
| autojudge (called from autodispatch)
+--------------+
	       | extractmail (called from autojudge)
	       |                 |
	       | \[no error]      | \[error]
	       v                 v
	    pppp.eee        $reply_file
	       |
	       | autojudge
	       | (importing from ../solutions/pppp)
	       |
	       v
	    $make_file
	    pppp.test 
	    $scoring_instructions_file (if any)
	       |
	       | make pppp (called from autojudge)
	       |
	       v
	    pppp (if no error)
	    pppp.cerr (compiler standard error output)
	       |		 |
	       | \[pppp exists]   | \[pppp does not exist]
	       |		 |
	       |                 | autojudge
	       |                 v
	       |            $auto_score_file
	       |		= `Syntax Error'
	       |            $reply_file unless scoring
	       |		is `manual'
	       |
	       | make pppp.out (called from autojudge)
	       |
	       v
	    pppp.out (standard output)
	    pppp.err (standard error output)
	       |                 |
	       | \[empty .err]    | \[non-empty .err]
	       |                 |
	       |                 | autojudge
	       |                 v
	       |            $auto_score_file
	       |            $reply_file unless scoring
	       |		is `manual'
	       |
	       | autoscore (called by autojudge)
	       |     scorediff (called by autoscore)
	       v
       $auto_score_file
       $reply_file unless scoring
	   is `manual'

Contest Derived Data: Status Files
------- ------- ----- ------ -----

    flag
        The flag directory of the contest.  Flag files
	in this directory are created when certain
	events happen that may demand attention from
	background activities, such as scoreboard com-
	putation, and manual review of submissions.

	Specifically, the following are files in the
	flag directory:

	    $score_flag_file
	        Created when any $auto_score_file or
		$manual_score_file file is written;  the
		`makescoreboard' program sees this flag
		and recomputes the scoreboard.

	    $needs_reply_flag_file
	        Created when any action that will re-
		quire a person to use the `manualreply'
		program happens.  The `tracker' program
		sees this flag and then looks throughout
		the contest directories and files to see
		where `manualreply' should be run.

    Scoreboard_PID
        A file containing the process ID of any `make-
	scoreboard' program that is running in back-
	ground.  This file is maintained by the `make-
	scoreboard' program with its `-start' and
	`-stop' options.


Contest Derived Data: Scoreboard Files
------- ------- ----- ---------- -----






"

exit 0

# Include common error catching code:
#
} caught_output
caught_error
