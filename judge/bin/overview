#!/bin/sh
#
# Make judge's overview document.
#
# File:		overview
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Tue Sep  5 07:42:32 EDT 2006
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: walton $
#   $Date: 2006/09/05 11:49:00 $
#   $RCSfile: overview,v $
#   $Revision: 1.131 $
#
# The next line starts tcl \
exec tcl "$0" "$@"

# Use tcl rather than tclsh so that `signal' is defined.

# Include common code and parameters:
#
set lib_directory "[file dirname $argv0]/../lib"
source $lib_directory/judging_common.tcl
set log_mode none
catch {

puts "
		     HPCM Overview
		     ---- --------

	Features
	Requirements
	Installing HPCM
	Creating a Contest
	Data and Programs
	Library Data: Problems
	Library Data: Problems:
		      Basic Problem Description
	Library Data: Problems:
		      Judge's Parameters and Filters
	Library Data: Problems:
		      Complex Problems
	Library Data: Help Documentation
	Library Data: Example Contests and Tests
	Library Data: System Maintenance
	Contest Definition Data: The Judging Directory
	Contest Definition Data: The Contest Directory
	Contest Definition Data: Web Pages
	Contest Definition Data: Home Directories
	Contest Definition Data: Auxiliary Files
	Contest Definition Data: Security
	Contest Raw Data: Directories
	Contest Raw Data: Submissions
	Contest Raw Data: Solution Submissions
	Contest Raw Data: Get Requests
	Contest Raw Data: Queries
	Contest Raw Data: Data Flow
	Contest Derived Data: Processing Status Files
	Contest Derived Data: Scoreboard Files

	Programs: Contestant
	Programs: Judging
	Programs: Contest Making
	Programs: Maintenance
	Common Functions
	Common Functions: System/User Interface
	Common Functions: General
	Common Functions: Display
	Common Functions: Scoring
	Common Functions: Scoreboard

Features
--------

HPCM has the following features:

    o Supports different kinds of programming contests:

	formal	    Contestants are given accounts and
		    are given problem descriptions all
		    at once on paper.  Problems are
		    timed from when descriptions are
		    given out to when solutions are
		    submitted, and timing counts in the
		    scoring.

	informal    Contestants are given accounts and
		    may get problem descriptions one at
		    a time using the accounts.  Problems
		    are timed from when a particular
		    problem's description is gotten to
		    when that problem's solution is sub-
		    mitted, and timing counts in the
		    scoring.

    	untimed	    Contestants may supply their own ac-
		    counts and communicate with the
		    autojudge by email, or contestants
		    may be given an account.  Problem
		    descriptions may be put on the web,
		    passed out on paper, or made avail-
		    able through the accounts.  Problems
		    are NOT timed, but feedback may be
		    given for incorrect submissions, and
		    the number of incorrect submissions
		    and quantity of feedback may count
		    in the scoring.

    o Supports different kinds of scoring:

    	timed	    The time between when the problem
		    description is given and when the
		    first correct submission is made
		    is used in scoring.

	feedback    The number and feedback types (see
		    below) of incorrect submissions made
		    before the first correct submission
		    of a problem are used to score the
		    problem.  Time is not used.

	unranked    Only the number of correct problems
		    is used to score contestants.

    o Can provide different types of automated feedback
      from the judge to the contestant:

         in	    The judge's input for the first
	 	    failed test case is returned for
		    each incorrect submission.

         inout	    The judge's input and output for the
	 	    first failed test case is returned
		    for each incorrect submission.

         solution   The judge's solution is returned for
	            each CORRECT submission.

    o Has an automatic judge, that can be used exclu-
      sively, or as an aid to a human judge.

    o Has a library of problems and supports easy
      creation of new contests.

    o Supports complex multi-file problems, such as
      those found in advanced Computer Science courses.

    o Supports running long term contests and multiple
      simultaneous contests.

    o Keeps a complete log of everything that happens
      during contests in the form of files that can be
      easily analyzed for different purposes.

    o Is written modularly in TCL and Bourne Again Shell
      (bash) so that HPCM can easily be adapted and
      modified.



Requirements
------------

HPCM currently requires a UNIX system with the Bourne
Again (bash) shell and TCL language interpreters.  If
JAVA or COMMONLISP are to be usable by contestants,
appropriate versions of JAVA or COMMONLISP are also
required.

A couple of programs require the `read -r' Bourne shell
command, a Bourne shell `echo' command that does not
specially interpret the `\\' character, or a `test -e'
command.  If you are using a UNIX system whose Bourne
shell does not support these features (which is likely
if you are not using a Linux), the simplest fix is to
import the GNU Bourne shell, bash, and fix your path
to contain this shell under the name `bash', so that
`which bash' can find it.  The HPCM programs that have
shell difficulties like those just mentioned test
whether they are running bash and, if not, use `which
bash' to find bash if they can, and run it instead of sh
if they find it.

Programs that are run only by the judge in the judging
account are mostly written in TCL, whereas programs that
may be run sometimes outside the judging account are
written in BASH.  This is intended to make it easier to
convert HPCM to an operating system that supports some
form of Bourne shell, but does not support TCL system-
wide.

TCL can be obtained at:	 	www.scriptics.com

You may need TCL version 8.0 or later.  You will need
a version of TCL that includes Extended TCL.

Bash can be obtained at:

	www.gnu.org/software/bash/bash.html

A suitable JAVA can be obtained from

	www.javasoft.com

by selecting the jdk platform and downloading jdk
version 1.3.0 or later.

C++ Standard Templates Library (STL) documentation,
which is needed to make the stlhelp command work for
contestants, is available from Silicon Graphics at:

	http://www.sgi.com/tech/stl/

If you want to use COMMONLISP as a programming langu-
age, HPCM is currently set up to use CLISP, a version
of COMMONLISP obtainable at

	clisp.cons.org


Installing HPCM
---------- ----

There is a separate document, `Installing HPCM' (hpcm/
judge/bin/installing_hpcm), that describes how to obtain
and install HPCM.  HPCM can be obtained from

	www.deas.harvard.edu/hc3/hpcm

or
	www.deas.harvard.edu/~walton/hpcm


Creating a Contest
-------- - -------

To create a contest, first read the help files in

    hpcm/contestant/help/common/

to get a good idea of what you are creating.  The file

    hpcm/contestant/help/index

explains what each of these files contains and suggests
an order in which these files may be read.

Then choose the type of contest you want to create
(untimed, informal, formal) and read

    hpcm/contestant/help/contest/<contest-type>_contest
    hpcm/examples/<contest-type>/Makefile
    hpcm/examples/<contest-type>/hpcm_judging.rc

You may also want to try skimming

    hpcm/judge/lib/hpcm_judging.rc

and try to understand the parameters in that file as
best you can.  You need not read this last file very
carefully.

In order to better understand what you are doing, you
may wish to read the following overview, and then read
the individual program documentation for some of the
programs used to set up or judge contests.  Each prog-
ram produces its own documentation when it is executed
with the `-doc' option.  After installing HPCM and run-
ing `make' in the hpcm directory, all these program
documents will also be collected within the hpcm/judge/
doc directory.

If you want to create complex problems, such as multi-
file problems that occur in a more advanced Computer
Science course, you should read the section `Library
Data: Problems: Complex Problems' below.


Data and Programs
---- --- --------

HPCM uses different categories of data:

Library Data
    Problem descriptions, help documentation files,
    example contest parameter files, system maintenance
    files, and system test files.

Contest Definition Data
    Files that define particular contests, including
    documentation for contestants, problem definitions,
    solution definitions, and contest parameter defini-
    tions.

Contest Raw Data
    Files that capture submissions and information gen-
    erated during judging, such as binary program files,
    output files, scores, and email replies.

Contest Derived Data
    Scoreboards and contest tracking summaries.


HPCM also contains several different categories of
programs:

Contestant Programs
    Programs run by contestants during a contest.

Judging Programs
    Programs run to judge a contest.

Contest Making Programs
    Programs run to make a contest.

Maintenance Programs
    Programs run to maintain the library and test and
    distribute the HPCM system.

Common Functions
    Functions usable by HPCM TCL programs.  These come
    in several different packages, including one general
    package for all programs, and several other more
    specialized packages.


Library Data: Problems
------- ----- --------

The problem library consists of the subdirectory tree
rooted at

	hpcm/problem_library

Each problem (and each demonstration problem) has its
own directory within the problem library.  The last
component of the name of this directory is the name of
the problem, and is also the basename of files describ-
ing the problem and solving the problem.

The library problem directories are placed within one of
following subdirectories of the hpcm/problem_library
directory:

	demos	Demonstration problems.

	public	Problems that can be freely distributed
		to the public, without any restriction
		on verbatim copying, without any re-
		strictions on verbatim redistribution,
		and with no restriction on alteration
		unless otherwise indicated.

	private	Problems that cannot be redistributed
		to the public.  These have been taken
		off the web in most cases, and can be
		distributed to true friends and colla-
		borators or other members of your uni-
		versity, but cannot be placed on the web
		or be made available to strangers.

		Often public problems will contain an
		html file linking to a problem descrip-
		tion on the web, and there will be a
		corresponding private directory for the
		same problem containing the postscript
		file describing the problem.  For such
		problems the problem description cannot
		be redistributed to the public, but the
		problem test data and solutions are
		usually redistributable.

The problem directories are listed in the

	hpcm/problem_library/index

file, which can be input to the makecontest program to
define which problems are to be used in a particular
contest, and to create an index of these problems.

Emails giving permission to make various problems public
are in the directory

	hpcm/problem_library/legal

Descriptions of problems not yet in the library, most of
which have been taken from the web, are in

	hpcm/problem_library/working

Neither of these last two directories is part of any
public distribution.

Library Data: Problems: Basic Problem Description
------- ----- --------- ----- ------- -----------

If a problem has name `pppp', then the problem has a
problem directory named `pppp' within one of the
directories just mentioned, and the following files
within this problem directory:

    pppp.txt, pppp.html, pppp.htm, pppp.ps, pppp.pdf,
    	      etc.
    		Problem description file in ASCII (txt),
		HTML (html or htm), POSTSCRIPT (ps),
		PDF (pdf), etc.

    Makefile	Gives instructions for compiling and
                running the problem solution.

These files are made available to the contestant, though
in a formal contest only Makefiles are made available
electronically, and problem description files are only
made available as a printout (to prevent contestants
from emailing an electronic version to cohorts for
advice).

In order to be able to score a problem, two more files
are placed in the problem directory within the program
library:

    pppp.in    The judge's test input.
    pppp.test  The judge's test output.

Actually, there may be multiple pairs of such files,
with any names ending in .in and .test:

    xxxx.in    The judge's test input.
    xxxx.test  The judge's test output.

The problem directory may contain .jin files from which
the .in files can be computed, and may contain .ftest,
.jtest, or .jftest files that are computed from the
.test files.  There may also be a pppp.rc file contain-
ing judge's parameters.  See `Judge's Parameters and
Filters' below for a description of all these files.

A contest has a solutions directory that contains sym-
bolic links to the library problem directories for every
problem that can be judged during the contest.  The
files just mentioned become input to the judging.

In addition to the files already mentioned, the library
problem directory usually contains a judge's solution
written in one of the contest programming languages.
The solution is written as a file whose extension indi-
cates the programming language of the solution.  Typical
possibilities are:

    pppp.c	C language solution.
    pppp.cc	C++ language solution.
    pppp.java	JAVA language solution.
    pppp.lsp	COMMONLISP language solution.

The programming languages allowed may vary; but every
solution language allowed in a contest must be expli-
citly supported by the problem Makefile.

It is possible to compile and run the solution within
the library problem directory in the same manner as
a problem is compiled and run by contestants and by the
judge.  Doing this results in making temporary files
that can be removed by the `make clean' command in the
problem directory.  If you do very much of this, look at
the `testproblems' program which automates testing pro-
blems.

Compilation creates a temporary binary file named `pppp'
and may create other temporary files for some languages:

    pppp	    The executable program binary.
    pppp*.class	    JAVA compiled file.
    pppp*.fas	    COMMONLISP compiled file.
    pppp*.lib	    COMMONLISP compiled file.

If files other than the executable binary exist, the
executable binary is typically just a shell script that
invokes the other files.

The solution is written to take input from the standard
input (the terminal by default) and put output to the
standard output (also the terminal by default).  The
Makefile contrives to run the program with resource
limits and so that the standard input and output are
mapped to the pppp.in file and the pppp.out file, re-
spectively.  Running the solution program using the
Makefile reads or creates the following temporary files:

    pppp.in	Solution input.
    pppp.out	Solution output.
    core	Dump of program if it crashes.

It is important to note that the solution code should
NOT open any files.  Also, the standard error output is
sent to the terminal, and NOT to a file.

The `make' command in the problem directory makes the
binary program if that does not exist or it is older
than the solution source file, and then makes the
pppp.out file if that does not exist or it is older than
the binary file or the .in file.

Normally `pppp' is invoked with no arguments.  By con-
vention, if `pppp' is invoked with one or more arguments
it may produce debugging output.  The `make debug' com-
mand in the problem directory is like `make' except
that it executes `pppp debug', with the single argument
`debug', to make the file:

    pppp.debug	Solution output with extra debugging
    		information included.

If a problem directory symbolically linked into a con-
test solutions directory has a pppp.out file, this file
will be treated as the judge's output in PREFERENCE to
any pppp.test file.  Thus if a judge finds an error in
the judge's solution, the judge merely needs to fix
the judge's solution and run the `make' command in the
solution problem directory to fix the judge's output.
After the contest the judge can replace the pppp.test
file by a copy of the correct pppp.out file.

However, there is a difficulty with running JAVA
solutions in a library problem directory using `make'.
The judge's hpcm_sandbox program runs the binary as
a user named `sandbox' that cannot access the problem
directory using an absolute pathname.  Unfortunately,
existing JAVA systems have a bug that causes them to
convert relative pathnames of .class files into absolute
pathnames before they are used, so the .class files
cannot be found by the `sandbox' user.  One fix for this
currently is to run the programs manually by

	pppp <pppp.in >pppp.out

Another fix is to do a

	chmod a+x .. ../.. ../../.. ../../../..

in the library problem directory; but this has the dis-
advantage that contestants will then be able to read any
*.class files in this and maybe other library problem
directories: see `Contest Definition Data: Security'
below.

Lastly, the `make clean' command in the problem direc-
tory deletes all temporary files, including `pppp',
`*.out', `*.fout', `*.jout', `*.jfout', `*.debug',
`core', `core.\[0-9\]*', `*.class', `*.fas', and `*.lib'
files.



Library Data: Problems: Judge's Parameters and Filters
------- ----- --------- ------- ---------- --- -------

In some cases the autojudge needs no parameters or
filters.  But in many cases at least one parameter, the
scoring_instructions parameter, needs to be set, and
sometimes the submitted and judge's output cannot be
compared directly, and must be filtered before they
can be compared.  In addition, the features that permit
the judge's input and output for the first failed test
case to be returned to the submitter require that input
and output files be separated into test cases, and this
uses parameters located in *.jin files.

The following files in the problem directory contain
parameters, filters, and filtered test output.  All
these files are optional.

    pppp.rc    A file containing parameters that control
    	       how the automatic scoring is done (e.g.,
	       what numeric tolerances are permitted),
	       which files are delivered electronically
	       to contestants, which files are printed
	       for contestants, which files contestants
	       must or can submit, which files in the
	       solution directory are needed for judg-
	       ing, how to make such files in the solu-
	       tion directory if they do not already
	       exist, the order that input files are
	       used in testing, and which files are part
	       of the solution that might be given to
	       contestants after the contest.

	       This file contains parameters that over-
	       ride those set in hpcm_judging.rc, or
	       that override defaults computed when
	       hpcm_judging.rc parameters are left
	       unset.  This file is `sourced' after
	       hpcm_judging.rc by programs that process
	       a problem submission (e.g., autojudge)
	       or make a contest (e.g, makecontest).

	       See the `Problem .rc Files' section of
	       hpcm/judge/lib/hpcm_judging.rc for more
	       detailed documentation.

    Scoring_Filter
    	       This executable program file filters .out
	       and .test files to produce .fout and
	       .ftest files which are compared by the
	       autojudge in place of .out and .test
	       files.  It is called by

	       Scoring_Filter xxxx.in \\
	                      <xxxx.out >xxxx.fout
	       Scoring_Filter xxxx.in \\
	                      <xxxx.test >xxxx.ftest

    xxxx.jin   This file is input to the jfilter program
               to automatically make the xxxx.in file.
	       The xxxx.jin file also contains scoring
	       instructions that might otherwise be in
	       the pppp.rc file, but can be tailored to
	       particular input files, if there are
	       several, by putting them instead in the
	       .jin file.  This file also contains
	       parameters that permit both the .in and
	       .out (or .fout) files to be broken up
	       into test cases, so feedback can be given
	       to contestants consisting of the judge's
	       input and optionally output for just the
	       first test case for which a submission
	       fails.  To aid this the .jin file is
	       input to the jfilter program in order to
	       convert .out files to .jout files, .fout
	       files to .jfout files, .test files to
	       .jtest files, and .ftest files to .jftest
	       files.  See the jfilter program for more
	       detailed documentation.

    xxxx.ftest  Made from .test by Scoring_Filter.

    xxxx.jtest  Made from .test and .jin by jfilter.

    xxxx.jftest Made from .ftest and .jin by jfilter.

An example use of pppp.rc is the following.  Normally
the scoring_instructions global variable in hpcm_
judging.rc is set to the list { column space } which
means that differences in amount of space and item
end columns in the output of a submission do NOT
matter.  If you want them to matter, you make a pppp.rc
file containing

	    set scoring_instructions { }

If you do not care about spacing, but want items to end
in the correct columns, and want numbers to be accurate
to + or - 0.002, you make a pppp.rc file containing

	    set scoring_instructions {
		space float 0.002 3.0 }

(Here the 3.0 means that relative accuracy does not
matter: see the `Scoring Parameters' section of hpcm_
judging.rc for details).

To give an example use of a Scoring_Filter program,
suppose a problem asks for a shortest path through a
graph whose nodes are labeled with upper case letters,
and xxxx.out might contain the lines

    Case 5: B -> D -> E -> F -> C
    Case 6: B -> F -> H -> A -> K -> M

Then the command

	Scoring_Filter xxxx.in <xxxx.out >xxxx.fout

might produce the xxxx.fout file:

    Case 5: 4
    Case 6: not a legal path

where 4 is the length of the `Case 5' path.  Here the
Scoring_Filter program tests whether a path is legal,
and if yes, outputs the length of the path.  If 4 is the
length of the shortest path, xxxx.ftest would have the
same `Case 5' line, but of course it would not have the
same `Case 6' line.

As an example of a .jin file, consider the following
initial fragment of the demos/count/count.jin file:

    *CASE-HEAD* ^\[ \\t\]*paragraph
    *CASE*
    This is a good paragraph to start with.

    *CASE*
    And to continue in a bit more
    complicated
    vein,
    this is a good paragraph.

This is essentially an annotated copy of the correspond-
ing count.in file.  One set of annotations, the *CASE*
lines above, divide the .in file into cases, so if
desired the judge's input for the first test case on
which a submission fails can be returned to the submit-
ter.  The other annotation, the *CASE-HEAD* line, gives
a regular expression that matches the first line of a
case in the .out file.  The count.test file correspond-
ing to this input is

    Paragraph 1: 1 lines, 8 words, 39 characters.
    Paragraph 2: 4 lines, 14 words, 70 characters.

and from this file and the count.jin file the jfilter
program makes the following count.jtest file:

    -Paragraph 1: 1 lines, 8 words, 39 characters.
    -Paragraph 2: 4 lines, 14 words, 70 characters.

The first character of each line here indicates whether
the line begins a case (-) or continues a case (.) (but
there are no examples of case continuation line here).

During scoring the .out file will be similarly jfiltered
to produce the .jout file that will be compared to the
.jtest file, instead of comparing .out and .test.

If a Scoring_Filter is used to produce an .ftest file,
then it is this .ftest file that is jfilter'ed to pro-
duce a .jftest file, rather than jfilter'ing the .test
file to produce a .jtest file.  Similarly during scoring
.jfout is produced by jfilter'ing .fout.

Things can get somewhat more complex if cases are
grouped, as may be necessary if one case cannot test
properly unless previous cases in the same group have
executed.  See the jfilter documentation for details.


Library Data: Problems: Complex Problems
------- ----- --------- ------- --------

The standard problem format described in the last sec-
tion has many limitations.  Only one file, Makefile, is
provided to support the contestant.  Only one file, e.g.
PROBLEM.c, can be submitted, where PROBLEM is the name
of the problem.  At most one file, e.g.  PROBLEM.txt,
can be used to describe the problem.  There is no way to
supply a contestant with an initial version of a file
the contestant is supposed to submit.

All this can be changed by setting the values of certain
global variables in the PROBLEM.rc file of the problem
directory.  The following global variables determine
which files are delivered to the contestant:

    problem_description_files
        Determines which files are delivered to the
	contestant in order to describe the problem.

    problem_source_files
        Determines which files are delivered to the
	contestant as source files.

    problem_solution_files
        Determines which files are delivered to contes-
	tants as solution files after the contest is
	over.

    problem_excluded_files
        Determines which files listed in the above are
	to be excluded from delivery to the contestant.

All three these global variables have values that are
lists of regular expressions, with these regular expres-
sions being matched to the last component of the file
name.  The default settings work for many problems, for
example, by delivering *.txt files as description files,
Makefile as a source file, and by excluding *.rc files.
The `all' option in a problem index passed to the make-
contest program sets the second variable to the regular
expression .*, which delivers all files not excluded by
the last variable to the contestant.

The following global variable lists exact file names,
and not regular expressions

    problem_print_files
    	Determines which files are to be printed in
	order to describe the problem.

A problem submission consists of one or more files.
The global variables

    problem_required_files
    problem_optional_files

are lists of submittable files.  The first is a list of
files that must be submitted, and the second a list of
files that may be optionally submitted.  If the first
global variable is not set, it defaults to a list of
just the file `PROBLEM.EXTENSION', where the `Subject:'
of the submission email has the form

    Subject: submit PROBLEM.EXTENSION \[qualifier\]

provided the EXTENSION is present and is an allowed
extension (defined by the allowed_extensions global
variable in hpcm_judging.rc).  The list of optionally
submittable files defaults to the empty list.

When the autojudge judges a problem submission it needs
a list of names N such that N.in will be input to the
submission to produce N.out, which will be compared with
N.test (possibly after filtering with Scoring_Filter and
jfilter).  The names N, called `input names', can be
specified by giving a value to the global variable

	problem_input_names

which is just the ordered list of input names.  If no
value is given this variable, the input names are just
all N such that either N.in or N.jin exist in the pro-
blem directory, sorted in alphabetical order.  However,
PROBLEM.in is excluded unless that is the only thing in
the list, as when there are other things, PROBLEM.in
must be used as a link name, and linked to the other
things on the list, because the problem directory
Makefile always makes PROBLEM.out from PROBLEM.in, and
does not know about other .in files.

The order of input names on their list controls the
order of testing, which can be important in feedback
scoring.  Unless this order is important, the default
list should suffice.

When a problem submission is to be judged, some of the
files needed from the problem directory may be derived
from other files in that directory.  The derived files
may not exist if they have not been needed before in
the current installation of HPCM.  The global variable

	problem_make_files

is a list of instructions on how to make such files.
A typical instruction is

	{ Scoring_Filter
	  { g++ -o Scoring_Filter Scoring_Filter.cc }
	  Scoring_Filter.cc }

which says that the Scoring_Filter binary file is to be
made using the given g++ command if the Scoring_Filter
file does not exist or if it is older than the Scoring_
Filter.cc file, provide the later file exists.

By default there are always instructions such as

	{ N.in { jfilter N.jin N.in } N.jin }

for every input name N.  This ensures that N.in is made
from N.jin if that is necessary.

When a submission is to be autojudged, files from the
problem directory must be linked into the submission
directory.  The global variables

	problem_link_files
	problem_optional_link_files

contain instructions for doing this.  After executing
these instructions, the autojudge program executes some
similar instructions of its own which handle the default
cases.  Some of these will be

	{ N.test N.out N.test }

for each input name (see above) N.  This instruction
says that the file named `N.test' is to be a link in the
submission directory to the file named `N.out' in the
problem directory if that file exists, or to the file
named `N.test' in the problem directory if `N.out' does
not exist but `N.test' does.

In addition to the control over problem files given by
the global variables just mentioned, two other HPCM
features support complex problems.

First, if there is a source file named xxx.ISF, then
this is an initial value for a read-write submittable
file named xxx.  The hpcm_get and hpcm_extract programs
support this by automatically copying xxx.ISF to xxx if
the latter does not exist, and making xxx writable.
The default value of problem_source_files is such that
by default all .ISF files are source files.

Second, the `response_instructions' global variable con-
figures the autojudge so its responses can optionally
contain extra information about scores, including the
judge's input and optionally output for the first test
case that failed for an incorrect submission.  See the
documentation in hpcm_judging.rc for details.

The directory:		hpcm/examples/test

contains tests of the features described in this sec-
tion.


Library Data: Help Documentation
------- ----- ---- -------------

The help documentation files reside in the subdirectory
tree rooted at

	hpcm/contestant/help

A help file index (in a format prescribed by the
`makecontest' program) is in

	hpcm/contestant/help/index

Each `help' file is a short ASCII text document on some
topic contestants may need to know about.  For example,
there is a `help' file on the mechanics of solving a
problem (what files to write, how to compile, etc.).

The help files have a 56 column times 40 line format
that permits them to be printed two file pages per
paper page using a reasonable size font.  The fprint
program prints these files: the fcheck program checks
that they have no line longer than 56 columns and no
page longer than 40 lines.

The subdirectories of `hpcm/contestant/help' are
as follows:

    common	Help files used for all kinds of con-
    		tests (untimed, informal, and formal).

    contest	Help files used for only one kind of
    		contest.  E.g., contest/untimed_contest.

    email	Help files used by contestants that pro-
    		vide their own account and communicate
		with the autojudge by email.

    email/sh	Programs (e.g., hpcm_get, hpcm_extract,
    		hpcm_sandbox, hpcm_submit, hpcm_send-
		mail) written in the Bourne Shell (sh)
    		language that can be used by email con-
		testants on their own computers.  Actu-
		ally, only the GNU Bourne Again Shell
		(bash) will run some of these programs
		correctly.

    email/tclsh	Code written in the TCL Shell (tclsh)
    		language that can be used by email con-
		testants on their own computers, instead
		of the Bourne shell code just mentioned.
		Only programs whose Bourne Shell version
		requires the GNU bash shell are current-
		ly available in tclsh (e.g., hpcm_ex-
		tract).

    advanced	Help files that describe algorithms a
    		contestant should know or learn in
		order to be more competitive.

    private	Non-distributable documentation, such as
    		the STL_doc.tar.gz file of STL documenta-
		tion from SGI for the stlhelp program.


Other files in the hpcm/contestant/help directory are:

    Makefile	Implements commands that can make the
    		files described below.

    index.html	HTML file for the web directory below.


The following files and directories can be made, as in
`make web':

    help.ps	Postscript or pdf file containing all
    help.pdf	the help files.

    help+.ps	Ditto but begins with a file supplied by
    help+.pdf	the maker of help+.{ps,pdf}, usually a
    		this_contest file for a particular con-
		test.

    demos.ps	Postscript or pdf file containing all
    		the demonstration files from hpcm/pro-
		blem_library/demos.

    web		A directory that can be put on the web
		(it has an index.html file) and that
		contains all the help and demos files.
    (web.tar)	When the web directory is made, a tar of
    		this directory, web.tar, is also made.

The following files are made when making help*.{ps,pdf}
and demos.{ps,pdf} for incorporation as indices into
these:

    help_index	Index for help*.{ps,pdf} contents.

    demos_index	Index for demos.{ps,pdf} contents.

Library Data: Example Contests and Tests
------- ----- ------- -------- --- -----

Subdirectories of

	hpcm/examples

contain parameter files necessary to set up a specific
type of contest.  Some of these subdirectories are:

    email_contest	Example email contest.

    informal_contest	Example informal contest.

    formal_contest	Example formal contest.

    test_submissions	Files that can be submitted with
    			hpcm_sendmail to test various
			features of a contest and HPCM.
			See the X-HPCM-Test-Subject
			fields of these messages for a
			description of each message, and
			the Makefiles in the contest
			directories above for examples
			using these files.  Subdirector-
			ies of this directory contain
			files that are replies to these
			submissions: see Programs: Main-
			tenance below).

    test		A directory for testing Complex
    			Problem submission features
			by making submissions without
			using hpcm_sendmail and checking
			the results in the judge's sub-
			mission directories.

Each of these subdirectories contains a Makefile that
contains documentation on how to use the files in the
subdirectory.  For the

	hpcm/examples/<contest-type>_contest

directories this documentation tells how to create a
contest by making a judging directory, copying the files
in the `hpcm/examples' subdirectory into the new judging
directory, editing these copies, etc.



Library Data: System Maintenance
------- ----- ------ -----------

There are a few files in the system root directory
(hpcm) that are used for system maintenance.

    Makefile	Typing `make' in the system root (hpcm)
    		directory invokes Makefiles in various
		subdirectories to perform HPCM instal-
		lation functions, such as setting file
		permissions on contestant executable
		programs.  This system root Makefile
		also makes distributions: see documen-
		tation within the Makefile.

    TODO	This file lists known deficiencies of
    		HPCM.

    STATUS	Status of the last distributed system,
    		including a list of changes from the
		previous distribution.

    File_List	This file lists all the files that can
    		be distributed.

    signatures_header
    hpcm_VVV_VV_cvs.tgz		(gzipped tar file)
    web_index.html
    web_solutions_index.html
    		Files used to make a distribution and
		put it on the web.  See documentation in
		`Makefile'.  VVV_VV is the current HPCM
		version and hpcm_VVV_VV_cvs.tgz is a
		tar of the current cvs hpcm repository
		(that is used to make a signatures file
		for the repositiory).

One of the subdirectories that typing `make' in the
system root (hpcm) directory effects is

	hpcm/judge/doc

in which `make' stores copies of all per-program docu-
mentation.

When a distribution is made, the following files and
directories made in the system root directory (hpcm):

    cvsroot	A directory containing the files in
    		hpcm_VV_VVV_cvs.tgz.

    HPCM_VVV_VV_CVS_MD5_Signatures
    		A copyrighted file containing the MD5
		signatures of all files in cvsroot.

    hpcm_VVV_VV.files
    		A list of all files other than the
		HPCM*_Signatures files that are included
		in the non-solution part of the public
		distribution.

    hpcm_VVV_VV_solutions.files
    		List of all files included in the solu-
		tions public distribution.

    hpcm_VVV_VV_non_distributable.files
    		List of all files that are not included
		in any part of the distribution.

    HPCM_VVV_VV_MD5_Signatures
    		A copyrighted file containing the MD5
		signatures of all distributed and non-
		distributed files.

    hpcm_VVV_VV.tgz
    		A gzipped tar file that is the non-solu-
		tion public distribution.

    hpcm_VVV_VV_solutions.tgz
    		A gzipped tar file that is the solutions
		public distribution.

    web		A directory containing a web page (an
    		index.html file) and related files
		(including hpcm_VVV_VV.tgz), designed to
		be put on the web.  If solutions are
		included, there is a solutions subpage
		that is protected by a URL (subdirectory
		name) containing a password.

    hpcm_VVV_VV_web.tgz
    		Gzipped tar file of the web directory.

Some other files that can be made in the system root
(hpcm) directory are:

    file_list.files
    		Sorted list of all the files listed in
		File_List, which is the list of files
		whose signatures are in HPCM_VVV_VV_MD5_
		Signatures.

    cvs.files
    		Sorted list of all files currently in
		the cvs repository, made by `cvs log',
		(NOT the same as files in hpcm_VV_VVV_
		cvs.tgz or the cvsroot directory),
		formatted for direct diff'ing with
		file_list.files to determine differences
		between the list of files in File_List
		and the files in the repository.

    source.slocs
    solution.slocs
    		Files that contain the SLOC (Source
		Lines Of Code) counts for distributable
		source files and for distributable
		solution files, respectively.

    hpcm_VVV_VV_non_distributable.tgz
    		Gzipped tar file of all non-distributa-
		ble files.

Contest Definition Data: The Judging Directory
------- ---------- ----- --- ------- ---------

A contest is defined by a collection of directories and
files, and by a few lines in parameter files that are
shared among many contests (e.g., ~/.procmailrc).

The heart of the contest is the judging directory.  This
typically has a name of the form:

	~/judging_cccc_ppppppppppp

where cccc is the name of the contest and ppppppppppp is
a string of random numbers and letters that makes the
directory name hard to guess.  The reason for this is
that in order to run JAVA code in a sandbox, all the
directories on the path from the root directory to the
program directories have to have a+x permissions (this
is a security bug in JAVA, surely), so to prohibit out-
siders from getting into the judge's subdirectory tree
it is necessary that the judging directory name be un-
guessable.

Fortunately the judge really does not need to use the
full name of the judging directory except in very rare
instances, as `~/judging_cccc_*' or the equivalent
suffices.  The judge's account has u+r permission on
directories, so the `*' works for the judge's account,
but there is NO read permission on the directories for
outside users.

The judging directory contains the hpcm_judging.rc file
that defines parameters for the contest.  Whenever most
HPCM programs in hpcm/judge/bin are executed, they
search the current directory and its ancestors for a
file named hpcm_judging.rc.  If a program finds one such
file, it uses that to define the contest parameters, and
uses the directory that file is in as the contest jud-
ging directory.  It is an error if the program finds two
such files.  Therefore, one judging directory cannot be
the ancestor of another judging directory.  However,
one judging account can have many judging directories,
each the root of a disjoint subtree of directories.
Therefore one judging account can judge many contests.

An HPCM program run by the judge can therefore execute
anywhere in the directory tree rooted at a judging dir-
ectory, and the program will find the judging directory
and its hpcm_judging.rc file.

The judging directory contains several components that
define the contest, in addition to many components that
belong to the raw or derived data of the contest, and
are listed elsewhere below.  The following are the
initial components of the judging directory, from which
all other components are made by `makecontest'.

Starting from the hpcm_judging.rc file, the other con-
test defining components are made automatically by the
`makecontest' program.

    hpcm_judging.rc
        The contest parameters file.  This is edited
	by hand to define the contest.  It begins
	by sourcing `hpcm/judge/lib/hpcm_judging.rc'
	and then redefines some of the parameters in
	that file.

    Makefile
	Contains documentation on how to set up and run
	the contest.  Also contains instructions to the
	UNIX `make' program so that running `make' in
	the judging directory will run `makecontest' to
	build all the contest definition files.  Also
	implements `make web' to make a web page and
	`make problems.pdf', `make this_contest.pdf',
	etc. to make documentation.

    scoreboard.1head
        Initial value of the ./contest/scoreboard.1head
	file for formal or informal contests.  See
	`Contest Definition Data: The Contest Direc-
	tory' below.  The `makecontest -scoreboard'
	command moves this file into the ./contest
	directory if it has not previously been moved.
	After the contest starts the file in the
	./contest directory is typically edited by hand.

    scoreboard.notes
        A file standardly appended to the scoreboard by
	the `makescoreboard' program for an email
	contest.  This file has an initial value, and
	may be edited by hand as the contest progresses.

The contest defining components of the judging directory
that are created by `makecontest' are:

    solutions
        The solutions directory for the contest.  Each
	component of the solutions directory is a sym-
	bolic link to a problem directory.  Often these
	problem directories are in the problem library.

	The solutions directory and its contents (i.e.,
	the symbolic links) are made automatically by
	`makecontest -solutions'.

	For formal contests problems are often used that
	have not yet been entered into the problem lib-
	rary, and the problem directories for these are
	usually in a special (and secure) directory that
	has an index file listing the problems.  This
	index file is in a format suitable for the
	`makecontest' program.

    info
        The info directory for the contest.  This only
	exists for email and informal contests, and it
	is the root of a subdirectory tree that holds
	the files that can be obtained by contestants
	via email (the contestants often use hpcm_get
	which for email and informal contests uses email
	under the hood).  Thus the contents of the info
	directory proper are just three subdirectories:
	help, demos, and problems.  These in turn con-
	tain files and subdirectories.  The files
	proper are typically represented by symbolic
	links to files in problem solution directories:
	see `makecontest' documentation.

	The info directory and its contents are made
	automatically by `makecontest -info'.

    contest
        The contest directory of the contest.  Actually,
	this is not a subdirectory proper of the judging
	directory, but `contest' in the judging direc-
	tory is symbolically linked to the contest
	directory.  This is because the contest direct-
	ory must be accessible by the contestants, who
	must not know the full name of the judging di-
	rectory.

	Only informal and formal contests have a contest
	directory.  Email contests do not.

	The contest directory itself and the symbolic
	link from the judging directory to the contest
	directory can be made automatically by `make-
	contest -contest', or they can be made by hand.

	The contents of the contest directory are made
	automatically by `makecontest', though some of
	these contents can alternatively be made by
	hand.  These contents are described in `Contest
	Definition Data: The Contest Directory' below.

    help
        The help directory within the judging directory.
	This is not used during the contest proper, but
	is merely a staging area for the `this_contest'
	help file.  It contains the following files that
	are created by `makecontest -this_contest':

	    this_contest
	        The help file particular to the contest.
		The initial version of this file equals
		the `this_contest' global variable
		value with a header line prepended.
		After this file is created, it can be
		edited by hand, or it can be changed by
		changing the value of the `this_contest'
		global variable and rerunning `make-
		contest -this_contest'.

	    index
	        An index file to be input to `make-
		contest' that lists all the index
		files output by that program and also
		lists the `this_contest' help file.

	    this_contest_parameters
	    	A header line followed by the value of
		the `this_contest' global variable when
		`makecontest -this_contest' was last
		run.  Equals the `this_contest' file
		unless the latter was edited by hand.

	    this_contest_original
	        The initial value of the `this_contest_
		parameters' file.  Kept for comparison
		purposes.

    help_print_files
    demos_print_files
    problems_print_files
        Lists of files to be printed.  The help, demos,
	and problem description files are given in sep-
	arate lists, each beginning with an index file,
	except that the help file list begins with this_
	contest followed by an index file.  These list
	files are made by `makecontest -print_files'.

    mail
    	A directory made by `makecontest -mail' that
	holds submissions subdirectories.

    .ssh
    .ssh/authorized_keys
        These are made in the process of making the
	contest/extra_setup.tar file: see extra_
	setup.tar in `Contest Definition Data: The Con-
	test Directory' below.

    TODO
    	When `makecontest' runs, it appends instructions
	to its user to the end of this file.  Typical
	instructions are `edit ./contest/secure/
	passwords' or read and possibly edit `./help/
	this_contest'.  When the user decides she has
	satisfied an instruction, the user typically
	edits the instruction out of the TODO file.

There are a few other components of the judging direc-
tory that are made during the contest, but are not made
by `makecontest'.  These are listed below in the
`Contest Raw Data' and `Contest Derived Data' sections.

Contest Definition Data: The Contest Directory
------- ---------- ----- --- ------- ---------

Formal and informal contests have a contest directory
containing files that can be accessed by contestants.
Email contests do not have this directory.

Each contestant in a formal or informal contest has
an account in which `~/.hpcm_contest' is symbolically
linked to the contest directory.  The contest directory
itself has a+x permissions and contains the following
components that contestants can access (these components
are listed in alphabetical order).

    bin
    	A directory containing programs the contestants
	can execute.  The name `~/.hpcm_contest/bin' is
	part of the program search path for each contes-
	tant account.

	The name `bin' in the contest directory is
	linked symbolically by `makecontest -bin' to
	
	    \$hpcm_directory/contestant/bin

	where \$hpcm_directory is a global variable that
	defaults to `~/hpcm'.  Note that this means that
	~, ~/hpcm and ~/hpcm/contestant must have a+x
	permissions, ~/hpcm/contestant/bin must have
	a+rx permissions, and appropriate programs in
	the ~/hpcm/contestant/bin must have a+x or a+rx
	permissions.  Running `make' inside the ~/hpcm
	directory, a part of the installation procedure
	of HPCM, sets these permissions.  See `Instal-
	ling HPCM' (hpcm/judge/doc/installing_hpcm.txt).

    demos
        This is a directory that contains demonstration
	problems.  It is strictly analogous to the
	`problems' directory, see below, and is made by
	`makecontest -demos'.

    extra_setup.tar
    	This tar file contains files and symbolic links
	that are loaded into a contestant account when
	that account is `trashed' (i.e., initialized:
	see the `trashable' file below).  This file
	supplements the contest/home/setup.tar file,
	which also contains files and links loaded into
	contestant accounts.

	The `makecontest -ssh' command makes this file
	giving it as contents an `.ssh/authorized_keys'
	file that permits the judge to log into a con-
	testant's account using ssh without a password.

    help
    	This directory contains a+r copies of all the
	help files for the contestants.  These can be
	read by the contestant `help' program.

	This `help' directory and its contents are
	made automatically by `makecontest -help'.  It
	is an exact copy of info/help for informal
	contests, which are the only contests for which
	both directories exist.

	The following are some special help files
	of note:

	    this_contest
	    	Information specific to the current
		contest.

	    index
	    	Index of all help files.

	    demos
	    	Index of demonstration problems.

	    problems
	    	Index of contest problems.

	One file, ./contest/help/problems, does not
	have a+r permissions when it is made, so that
	contestants in a formal contest cannot find
	out about the problems before the contest
	starts.  The `startcontest' program sets the
	permissions on this file to a+r.

    help1
    help2
    help3
    help4
    	The hpcm/contestant/bin/help program which dis-
	plays help files for contestants searches for
	a topic tttt sequentially in the files help1/
	tttt, help2/tttt, help3/tttt, and help4/tttt,
	and uses the first file found.  The `makecontest
	-help' command symbolically links help2 to the
	`help' directory.  By creating a help1/tttt file
	any help2/tttt file can be hidden.  This permits
	an altered version of a help file to be readily
	used for a single contest.

    home
	This directory is called the `contest home'
	directory.  It is symbolically linked to a di-
	rectory called the `prototype home' directory
	that contains files shared among all contestant
	accounts.  The `contest home' and `prototype
	home' directories are described below in `Con-
	test Definition Data: Home Directories'.

	The prototype home directory is the ~PPP/home
	directory in the `prototype account', PPP, which
	is set up by the SETUP_PROTOTYPE program: see
	`Contest Definition Data: Home Directories'
	below for more details.

	The link from ./contest/home to ~PPP/home can be
	be made automatically by `makecontest -home'.
	By default this locates the prototype account by
	searching all accounts named `*\[-_\]proto' for
	one with a ~/home subdirectory containing suit-
	able files.  Alternatively the prototype account
	used by a contest can be defined by setting the
	`hpcm_prototype_account' global variable, or
	manually creating the symbolic link.

    javahelp
    	This file is made by `makecontest -javahelp'
	from the `javahelp' global variable.  The file
	maps the hpcm/contestant/bin/javahelp program
	that can be run by contestants onto a browser
	command that displays the JAVA API.

    mail
    	This directory is made by `makecontest -mail'.
	It holds submissions, one per subdirectory,
	that are made during the contest.  See `Contest
	Raw Data: Submissions' below.

    printer_map
        This file contains a map from contestant names,
	specified by regular expressions, to printer
	names.  See hpcm/contestant/printer_pipe for
	details.

	This file may be defined as the contents of the
	`printer_map' global variable, which is copied
	into the file by the `makecontest -printer_map'
	command.  The file may be disabled by manually
	changing its mode to a-rw.

    printer
    	This file contains nothing but the name of the
	printer to be used by the contestants.  This
	file is used only if printer_map is not readable
	by contestants.  See hpcm/contestant/printer_
	pipe for details.

	This file is made by `makecontest -printer' if
	it does not exist, and may be edited by hand.
	This file may be disabled by manually changing
	its mode to a-rw.

    printer_jobs
        If this file exists and is a+w, each use of the
	printer by one of the print commands in the
	contestant bin directory causes a line to be
	written into this file.  The line gives the
	time, printer, contestant account name and
	location, and filename for the print operation.
	The location is taken from the who_where file
	(see below) `WHERE' field, if available.

	This file is used by the contestant `printer'
	program if it is a+r to output printer status,
	and by the judges to monitor printer activity.

	This file is made by `makecontest -printer' and
	`makecontest -printer_map' if it does not exist,
	and can be made a-rw by hand.

    problems
    	This directory contains problem directories for
	each of the contest problems.  The strictly
	analogous `demos' directory (see above) contains
	demonstration problems.  These directories only
	exist for formal contests; for email and infor-
	mal contests, the same information (plus problem
	description files), see below) is put in info/
	problems and info/demos.

	Each non-demonstration problem directory in the
	contest directory is a subdirectory of this
	`problems' directory that has as its name the
	name of the problem.  Thus a problem named
	`pppp' would have `problems/pppp' as the name of
	its problem directory within the contest direc-
	tory.  Demonstration problems are similar but
	are in the `demos' directory instead of the
	`problems' directory.

	Within each problem directory there is standard-
	ly an a+r copy of the `Makefile' of the problem.
	It is also possible to include an a+r copy of a
	file describing the problem, but this is NOT
	done for timed formal contests, as for these
	only paper printouts of these files are normally
	given to the contestants.  For demonstration
	problems (in `demos') many a+r file copies may
	be in the problem directory, as judge's input
	and output and solutions in different program-
	ming languages are often provided.  For complex
	problems (see `Library Data: Problems: Complex
	Problems' above) a+r copies of some source files
	are included in addition to `Makefile'.  A+r
	copies of problem description files can be
	included if desired by adding the `-description'
	option to the makecontest arguments, as in
	`makecontest -problems -description'.

	For a formal contest, the contestant's hpcm_get
	program creates a problem directory ppp in the
	contestant's account, and symbolically links
	into that directory all files in the contest/
	problems/ppp directory in the judge's account,
	by using the fact that this directory can be
	accessed by the name .hpcm_contest/problems/ppp
	in the contestant account.  For an informal
	contest hpcm_get obtains the same information
	from the `info/problems' directory by email and
	makes read-only copies of the files in the con-
	testant account.  If a one of the files made
	available in a contestant's directory by hpcm_
	get has the name xxx.ISF, then hpcm_get makes a
	writable copy named xxx of that file.  Here ISF
	stands for `Initial Source File'.

	This `contest/problems' directory (unlike the
	`contest/demos' directory) does not have a+rx
	permissions when it is made, so that contestants
	in a formal contest cannot find out about the
	problems before the contest starts.  The `start-
	contest' program sets the permissions on this
	directory to a+rx.

	This `problems' directory and its contents are
	made automatically by `makecontest -problems'.
	This contest/problems directory is an exact copy
	for formal contests of what goes into info/
	problems for informal and email contests, except
	that contest/problems does not have problem de-
	scription (e.g., .txt) files (unless the make-
	contest -description option is used), and the
	files in contest/problems are copies, because
	they must be readable by contestants, while the
	files in info/problems are symbolic links, which
	are only readable by the judging account.

	The `demos' directory is similarly made and is
	an exact copy of what would go into info/demos.

    scoreboard.1head
    scoreboard.1
    scoreboard.2
    scoreboard.3
    scoreboard.4
        The scoreboard, which can be read by the contes-
	tant `scoreboard' program, standardly has up to
	four pages, which are stored in the a+r files
	scoreboard.1 through scoreboard.4.  The first of
	these files is standardly made automatically by
	the `makescoreboard' program, which normally
	concatenates the scoreboard.1head file to the
	computed scoreboard.  The scoreboard.1head,
	scoreboard.2, scoreboard.3, and scoreboard.4
	files are normally edited by hand.  If non-
	standard scoreboard instructions are included in
	hpcm_judging.rc, and if a scoreboard_map is
	provided, other files can be used for these
	purposes, multiple scoreboards may be implement-
	ed, and scoreboard layout may be changed.  See
	hpcm_judging.rc and the documentation of
	`makescoreboard' and `hpcm/contestant/bin/
	scoreboard' for details.

	The `makecontest -scoreboard' command will move
	./scoreboard.1head to ./contest/scoreboard.1head
	if the first file exists and the second does
	not.

    scoreboard_map
        This file can optionally be provided to map
	names of contestant accounts and contests onto
	scoreboard page files.  See `hpcm/contestant/
	bin/scoreboard' for details.  This file must be
	made by hand if it is to be used.

    secure
    	This directory contains files that cannot be
	accessed by contestants, but can be accessed by
	the judging account, and can be accessed by the
	hpcm_sendmail program which can be run by
	contestants but sets its user id (by the UNIX
	setuid mechanism) to the judging account.

	This directory, if it does not already exist,
	will be made by `makecontest -secure', as
	will some of the files in the directory.  The
	files in this directory are:

	    secure/hpcm_sendmail.rc
	        This file contains parameters for hpcm_
		sendmail.  Specifically, the email
		address to send mail to in order to
		contact the judge (this email address
		typically contains a password), and the
		key-name and key to use in signing parts
		of the email (more specifically, the
		HPCM return email address and date
		fields of the email).  An example
		hpcm_sendmail.rc file is:

		    To: 13cc299bd7<walton@walton1>
		    Key: 55071403c7
		    Key-Name: judging_informal

		Note that the password in the `To:' ad-
		dress is not secure from the contestant,
		as it appears in the contestant's CC
		copy of the email that the contestant
		sends to the judge.  It does prevent
		complete outsiders from `crashing the
		party', however.

		The key, however, is not visible to the
		contestant.

		This file is made by `makecontest
		-secure', which creates random passwords
		for the email address and key.

	    secure/passwords
	    	This file lists the contestant accounts,
		and is used to create these accounts.
		Each line of this file has the format:

		    account:password:who:C:T:comment

	        where C is the coach's email address and
		and T is the team's email address.  The
		first field is the contestant account
		name.  The `who' field is the team name
		in descriptive form.

		The password field, if empty, is gener-
		ated by `makecontest -secure'.  The rest
		of the file must be made by hand.

		Only the account and password fields are
		needed by HPCM to run a contest.  The
		coach's email address is used by the
		hpcm_email_passwords program to send
		passwords to coaches.

		Note that in making up a list of contes-
		tant accounts, you should include one
		test account, which you can use to see
		if everything is working.  However, you
		should NOT include the prototype account
		in which SETUP_PROTOTYPE is run.

		This file can contain comment lines
		whose first non-space non-tab character
		is `#'.  Blanks lines are also ignored.

	    secure/passwords_header
	        This is a file used by hpcm_print_pass-
		words or hpcm_email_passwords.  Hpcm_
		print_passwords prints each account
		name and password on a separate page
		with the contents of this file at the
		beginning of the page.  It is used only
		when account names and passwords are to
		be handed to contestants: typically this
		is only in an informal contest.  Hpcm_
		email_passwords is similar, but emails
		the results to the coaches instead of
		printing.

    who_where
        This file is a copy of the secure/passwords file
	but with the password field value replaced by
	a `WHERE' value, that tells where the team is
	physically located.  This file is used by the
	print programs: the where field labels the pages
	of print output and the line output to any
	print_jobs file.  If the who_where file is
	missing, not a+r, or the `WHERE' field has not
	been filled in by hand, the print programs use
	the contestant account name instead.

	The who_where file is made automatically from
	the secure/passwords file by `makecontest -who_
	where' and updated automatically by that command
	when the secure/passwords file changes.  How-
	ever, the `WHERE' field in the who_where file
	must then be filled in by hand.

    trashable
        This file lists all contestant accounts that
	can be `trashed'.  To `trash' an account is
	to remove all its files and then reload its
	files from ~/.hpcm_contest/home/setup.tar, which
	is just the files in the prototype contestant
	account.  Files from ~/.hpcm_contest/extra_
	setup.tar are also loaded into the account if
	that file exists.  See the documentation of the
	SETUP_PROTOTYPE program and see `Contest Defini-
	tion Data: Home Directories' below.

	The `trashable' file is made from `secure/pass-
	words' by the `makecontest -trashable' command.
	It is just the list of all accounts in secure/
	passwords that do not already exist.  When the
	`trashable' file becomes non-empty, the com-
	mands

	    su root
	    ~JJJ/hpcm/secure/bin/hpcm_setup_accounts \\
		~JJJ/contest_cccc
	    exit

	(where JJJ is the judge's account) can be run to
	make and initialize the new accounts listed in
	the `trashable' file, and then `makecontest
	-trashable' can be re-run to make delete the
	`trashable' file, as there will no longer be any
	non-existent accounts in secure/passwords.


Contest Definition Data: Web Pages
------- ---------- ----- --- -----

Two directories can be made that can become web page
sets if copied to an appropriate internet server.  These
are

    ~/hpcm/contestant/help/web
        Made by `make web' in the ~/hpcm/contestant/help
	directory, this web page set contains all the
	help and demo files and is independent of the
	contest or contest type.

    ~/judging_cccc_ppppppppppp/web
        Made by `makeweb' in the judging directory
	~/judging_cccc_ppppppppppp, this set of web
	pages contains the problem statements and
	optionally a problem solution subpage with
	a URL that acts like a password.  Web page
	parameters in hpcm_judging.rc control the
	content of these pages.

	For some contests this set of web pages is
	posted after the contest is over.

	The `make web' command in the judging directory
	invokes the makeweb program.

When one of the `web' directories is made, an associated
`web.tar' file is also made that contains the contents
of the `web' directory and makes it easy to move the
directory contents to another place.


Contest Definition Data: Home Directories
------- ---------- ----- ---- -----------

The home directory of each contestant account must be
set up appropriately.  This is done with the help of
a prototype account, a prototype home directory, and
a contest home directory.

To make a prototype account one creates an account with
a name of the form `*\[-_\]proto', edits some files in
that account (see below), and executes in that account

	~JJJ/hpcm/contestant/bin/SETUP_PROTOTYPE

where JJJ is the judge's account.  This makes the direc-
tory ~PPP/home, where PPP is the name of the prototype
account.  The ~PPP/home directory, which is called the
`prototype home' directory, contains files, like
`.cshrc', that should be in the home directory of a con-
testant account.  In addition ~PPP/home contains a
setup.tar file that is used to initialize a contestant
account.

After making a prototype home directory and running
`makecontest',

    ~JJJ/judging_cccc_ppppppppppp/contest

is symbolically linked to

    ~JJJ/contest_cccc        \[contest directory\]

and

    ~JJJ/contest_cccc/home   \[contest home directory\]

is symbolically linked to

   ~PPP/home		     \[prototype home\
   					 directory\]

Then you edit

    ~JJJ/contest_cccc/secure/passwords

to define the contestant accounts, run `makecontest
-secure' if necessary to define contestant passwords,
and run `makecontest -trashable' to make the ~JJJ/
contest_cccc/trashable file: see the `trashable' file in
Contest Definition Data: The Contest Directory' above).
You then execute:

	su root
	~JJJ/hpcm/secure/bin/hpcm_setup_accounts \\
	    ~JJJ/contest_cccc
	exit

to create the contestant accounts, set their passwords,
and initialize the contents of their home directories.

In each contestant account `~/.hpcm_contest' is symbol-
ically linked to the contest directory of the contest
(~JJJ/contest_cccc), and therefore `~/.hpcm_contest/
home' is linked to the contest home directory (~JJJ/
contest_cccc/home) and therefore to the prototype home
directory (~PPP/home).

Each contestant account must be initialized identically
before the start of a contest.  This is done by running
the TRASH_ACCOUNT program in each contestant account.
This program first removes all files and subdirectories
from the account home directory.  It then loads a com-
pletely new set of files and subdirectories from the
`setup.tar' file in the `contest home' directory and the
`extra_setup.tar' file in the contest directory.  TRASH_
ACCOUNT is run by hpcm_setup_accounts (see above) after
that program creates an account and sets its password.

However, what if something needs changing during the
contest?  As an aid to making this easier, each con-
testant account is set up so that most of the files and
subdirectories in the account's home directory are
symbolic links to a real file or subdirectory within the
`contest home', hence `prototype home', directory.  Then
changing the real file or subdirectory changes the file
or subdirectory for all the contestant accounts at once.
Of course the real file or subdirectory must have a+r
and maybe a+x permissions, and cannot be writable by its
users, the contestants.

For example, in a contestant account the `.cshrc' file
is symbolically linked to `.hpcm_contest/home/.cshrc',
and thence to the `.cshrc' file in the prototype home
directory.  Therefore editing the `.cshrc' file within
the prototype home directory changes that file in ALL
contestant accounts.

There are a few files and subdirectories which, for
security reasons, cannot be shared among contestants by
symbolic linking, because the programs that use them
insist they be owned by the account running the program.
Examples are the `.procmailrc' file which is used to
automatically extract files from the responses to
hpcm_get in an informal contest, and the `.ssh' subdi-
rectory which can optionally be used to make it easy for
the judge to log into any contestant account.  For these
files setup.tar does not contain symbolic links, but
instead the files themselves are put into setup.tar
(e.g., .procmailrc) or extra_setup.tar (e.g., .ssh).

SETUP_PROTOTYPE takes files and subdirectories that are
initially in the prototype account, ~PPP, when that ac-
count is created, and moves these files and directories
into the prototype home directory, ~PPP/home.  Most of
these files and directories are just those provided by
the UNIX operating system to every newly created ac-
count.  However the following files need special
attention before SETUP_PROTOTYPE is run.

    .cshrc and initialization files for other shells

        These files are in the prototype home directory,
	and because contestants symbolically link to
	them, may be modified after contestant accounts
	have been created and initialized, though they
	can also be edited before SETUP_PROTOTYPE is
	run.

    	The `path' must be modified to include
	`.hpcm_contest/bin'.  If special compilers or
	interpreters are being used, the path should
	also include these.  Other changes are likely to
	be useful: see SETUP_PROTOTYPE documentation for
	details.

    .procmailrc

        This file must be included in the prototype home
	directory setup.tar file as it cannot be symbol-
	ically linked due to security considerations.
	It must be included in the prototype account
	before SETUP_PROTOTYPE is run.

        For an informal contest, this must include stuff
	to extract files from responses to hpcm_get.
	Therefore, it is set up to do this for all
	contestant accounts, so the prototype account
	may be shared between informal and formal con-
	tests.  See SETUP_PROTOTYPE documentation for
	details.

The following files in the prototype home directory are
made automatically by SETUP_PROTOTYPE, but are not
linked into contestant accounts.

    setup.tar

        The tar file that contains most the files and
	symbolic links which are to be in a contestant
	account after TRASH_ACCOUNT is run (the excep-
	tions are .hpcm_contest and files and direc-
	tories in extra_setup.tar: see below).  This
	file is made by SETUP_PROTOTYPE by tar'ing
	files, directories, and symbolic links in the
	prototype account.

    setup.ls

        The output of `ls -aR' run just after files have
	been restored from setup.tar.  Used to check for
	a valid restoration.  This is made by SETUP_
	PROTOTYPE.

    empty.ls

       The output of `ls -a' run just after all files
       have been deleted by TRASH_ACCOUNT, and before
       restoring files from setup.tar.  Used to check
       for valid file removal.  This is made by SETUP_
       PROTOTYPE.

There is one symbolic link that TRASH_ACCOUNT does not
set using setup.tar or extra_setup.tar.  This is the
.hpcm_contest symbolic link to the contest directory.
As a consequence, the .hpcm_contest of a contestant
account may not the same as the .hpcm_contest of the
prototype account, and one prototype home directory may
be used by many different contests.

There may be some files that must be put in contestant
accounts that are contest specific.  In particular, any
`.ssh/authorized_keys' files.  Therefore TRASH_ACCOUNT,
after initializing the account using `setup.tar', loads
files from `extra_setup.tar' in the contest (NOT contest
home) directory, if this file exists.  Extra contest
specific files, such as `.ssh/authorized_keys', may be
put in `extra_setup.tar'.  The extra_setup.tar file is
made by `makecontest -ssh'; see `Contest Definition
Data: The Contest Directory' above.

See documentation of SETUP_PROTOTYPE and TRASH_ACCOUNT
for more details.

Contest Definition Data: Auxiliary Files
------- ---------- ----- --------- -----

There are two files in the judging account that are
shared among all the contests supported by the account:

    ~/.procmailrc
	The `makecontest -procmailrc' command adds to
	this file an entry with information matching
	that in the contest/secure/hpcm_sendmail.rc
	file, if that file exists and the entry does not
	already exist.  Ditto for elements of the
	`autojudge_addresses' global variable.  If other
	entries for the contest exist in ~/.procmailrc,
	the command writes a TODO suggesting they be
	deleted.
	
	For example, if the hpcm_sendmail.rc file
	contains the line:

	    To: 13cc299bd7<JJJ@judge's-computer>

	then the .procmailrc file entry will be

	    :0
	    * ^To:.*13cc299bd7
	    | receivemail judging_cccc_ppppppppppp | \\
	      dispatchmail judging_cccc_ppppppppppp

	where ~/judging_cccc_ppppppppppp is the judg-
	ing directory for the contest in the judging
	account JJJ.

	`makecontest -procmailrc' also ensures that
	the following entry is in ~/.procmailrc:

		:0 c:
		hpcm_mbox

	See ~/hpcm_mbox below.

    ~/hpcm_mbox
    	This file saves a copy of all email received by
	the judging account, using an entry in
	~/.procmailrc to accomplish this (see above).
	This file can be `played back' into the
	`receivemail' program if things go very wrong
	and some submissions have to be recreated.


Contest Definition Data: Security
------- ---------- ----- --------

HPCM has the following security goals:

1. Prevent a foreign account from pretending to be
   a contestant account.  This is only achievable
   for informal and formal contests (but not for
   email contests).

   This is done in a formal and informal contest by
   having the hpcm_sendmail program which is used by
   the contestants to send mail to the judge be a
   privileged program with access to information not
   available to contestants, and by having that
   program add information and a signature for that
   information to the email sent.

   Specifically, hpcm_sendmail is a UNIX set-user-id
   program that sets the ID to the judging account,
   so it can see the .hpcm_contest/secure/hpcm_
   sendmail.rc file, even though the contestant
   accounts cannot.  This hpcm_sendmail.rc file
   contains a key name and key.  The hpcm_sendmail
   program adds three header fields to the mail it
   sends:

   	X-HPCM-Reply-To
	    The email address HPCM uses as the
	    identity of the account sending the
	    email, and therefore as the identity
	    of the contestant.
	X-HPCM-Date
	    The time the email is sent, which HPCM
	    uses as the time of submission.
	X-HPCM-Signature
	    A signature of the two fields just given,
	    made using the key name and key.

    Upon receipt the signature is verified by the
    judging software, and unverifiable email is
    rejected.

    More specifically, HPCM programs do the following.
    First, they use X-HPCM-Data and X-HPCM-Reply-To
    in preference to the normal mail Date and Reply-To
    header fields.  Second, when the email is first
    processed by `receivemail', any X-HPCM-Signature-OK
    header field in the received mail is stripped from
    the incoming message, and this field is recomputed
    from the two header fields just mentioned and the
    X-HPCM-Signature header field.  The recomputed
    X-HPCM-Signature-OK field is stored in the message
    Received_Mail file for use by subsequent process-
    ing.  Recomputation and use of X-HPCM-Signature-OK
    may be suppressed by setting the `use_authentica-
    tion' global variable to false.

    The reason that only the X-HPCM-Data and X-HPCM-
    Reply-To fields need to be signed is that if there
    are two submissions with the same values of these
    fields, they will have the same submission directory
    name, and the second submission will therefore be
    ignored as the directory will already exist.  Thus
    a contestant cannot take a submission, change just
    the subject and body but not the X-HPCM fields, and
    resubmit.

2. Prevent code written by contestants from corrupting
   the files of the judge.

   This is done by running the programs submitted by
   the contestant in a `sandbox'.

   The sandbox consists of changing the user and group
   (both real and effective) of the process executing
   the contestant program to `sandbox'.  This must be
   a defined account name that should not be able to
   access any files or directories except those public-
   ally available.

   The sandbox is implemented by the judge's hpcm_sand-
   box program, which must be installed in the UNIX
   /sbin directory (or equivalent), and is set to do a
   root set-user-id.  The contestant's hpcm_sandbox pro-
   gram is the same binary, but in the hpcm/contestant/
   bin directory, and without any set-user-id capabili-
   ty.

   However, current JAVA implementations seem to have
   the following security flaw: they convert relative
   .class file names to absolute names before using
   them.  As a consequence, all the directories in
   the path from the root to the directory in which a
   contestant's JAVA submission is being run must have
   a+x permissions because the contestant's submission
   is run by the `sandbox' account.  The .class files
   themselves must have a+r permissions.

   However, this last difficulty does not allow contes-
   tant code to write any files or directories in the
   judging account.

3. Prevent code written by the contestants from
   exporting judge's information, including solutions
   of the judge and other contestants, into the
   outside world.  This goal is met with some defects.

   It is not practical to make it impossible for
   contestant programs to write information to the
   outside world.  A contestant can merely open a
   file in the contestant's account's home directory,
   after leaving that directory a+w, for example.
   Or the contestant can exploit /tmp, or open a
   network connection.

   The `sandbox' previously described prevents
   contestant programs from being able to read most
   files and all directories in the judging account.
   However, because of the problem with JAVA mentioned
   above, a contestant's account can discover the names
   of components of some directories by guessing names
   and looking at the error codes returned.  Given an-
   other contestant, and guessing submission times, one
   contestant's program can read another contestant's
   .class files.

   To reduce the chances of this working, the `auto-
   judge' program removes a+x permissions from a
   submission directory immediately after running a
   solution program in that directory.  This means that
   the time window for reading any .class files in that
   directory is small.

   A contestant program can always read the judge's
   input, since that is provided to the program during
   judging.

   However, the code of any contestant program that
   sends information to the outside world will itself be
   captured and held in the judging account, serving as
   damning evidence if the foul nature of the program is
   discovered.  Thus any contestant who wrote such a
   program would be risking discovery for a very long
   time, likely many months, up until the judges decide
   to discard information collected during the contest.

4. Prevent one contestant from executing another contes-
   tant's solution.  This goal is achieved with a
   defect.

   This may sound like a ridiculous goal, because any
   security system should achieve it without trying, but
   due to the problems with JAVA, this goal is only im-
   perfectly achieved.

   In order to execute a submitted program with hpcm_
   sandbox changing real and effective user and group
   IDs to those of the `sandbox' account, both the
   submission directory and the submitted program must
   be made a+x first.  If the mail directory were not
   also a+x, there would be no way for outsiders to get
   into the submission directory.  But because of the
   JAVA bug, the mail directory is also a+x.

   Thus one contestant's submission can guess the time
   of another contestant's submission and execute that
   other contestant's submission.  A relatively simple C
   program can do this, in effect replacing itself by
   the submission of another contestant.

   To reduce the probability of success, the `autojudge'
   program removes a+x permissions from any submission
   directory right after running a solution in that dir-
   ectory.  This means that the time window in which
   another contestant might be able to run this solution
   is small.

   As for 3 above, any contestant program that tries
   this stunt leaves its code behind as damning evidence
   for a very long time.

Contest Raw Data: Directories
------- --- ----- -----------

The raw data of the contest consists of submissions and
the results of processing these.  Each submission is an
email message containing a problem solution, a request
to get files, or a query.  This email is placed in a
separate directory by itself, called the `submission
directory'.  The system then works in the submission
directory to develop information, such as the binary
program created by compiling a solution submission, the
output of running this program on judge's input data,
the score automatically assigned to the submission, and
any score later manually assigned to the submission.
All of this information is considered to be `raw data'.

In general, contest raw data is only created and never
destroyed.  Thus it provides both information about the
state of the contest and an audit trail telling what
happened during the contest.

Raw data is stored in the following directories:

    <judging-directory>/mail

	The mail subdirectory of the judging directory
	contains a separate subdirectory for each piece
	of email sent to the judge.  The processing of
	that email occurs within this subdirectory,
	which is called the `submission directory' of
	the email.

	The mail directory is created by `makecontest
	-mail' and must exist before judge's email is
	received.

    <judging-directory>/mail/dddd-<<ssssss>>-submission

        This is a submission directory, which is a sub-
	directory of the mail directory created to pro-
	cess one email message sent to the judge by the
	submitter ssssss at a time indicated by the date
	dddd.  A specific example of the last component
	of the subdirectory name is:

	2000-12-10-06:30:49-<<hpcm-t@gigue>>-submission

	The submitter is normally the return email
	address of the email message sent to the judge,
	but may be edited to remove spaces and alter
	some special characters.  It is not used per se
	as an email address by HPCM.  The part before
	any `@', plus optionally a compressed version
	of the part after any `@' (see the submitter_
	compress function in hpcm_judging_rc), is used
	as a contestant name by the scoreboard software,
	and should therefore be unique to the submitter.

	Note that the date gives a time in seconds, and
	is organized so that submissions with later
	times sort alphanumerically later.

	Because the date is in seconds, there cannot be
	more than one submission per second from the
	same submitter.  Any submission but the first
	will find that the directory it is supposed to
	create already exists, and therefore all submis-
	sions but the first with the same date to the
	nearest second will be ignored.

	As a consequence, programs like hpcm_get that
	send email to the judge pause for at least a
	second after sending each separate piece of
	email.

	This directory is made automatically by the
	`receivemail' program when the email first
	arrives.

	More details about the files in this directory
	are given in following sections.

    <judging_directory>/log
        Errors that are not particular to one submission
	and therefore cannot be placed in a submission
	directory are placed here, in this `log direc-
	tory'.  Each error is described in a file with
	the same file name structure (including `check-
	ing') as errors put in submission directories
	(see below).

	The log directory is created automatically when
	it is first needed.

    ~/HPCM_Error_Log
        This is the `emergency error log directory' for
	use only if the log directory cannot be found,
	cannot be created, or is not writable.

	This directory is created automatically when it
	is first needed.


Contest Raw Data: Submissions
------- --- ----- -----------

Any email sent to the judge is called a `submission'.
There are three kinds of submission: email containing a
problem solution, which is called a `solution submis-
sion'; email requesting files to be returned to a
contestant, which is called a `get request', and email
asking a question, which is called a `query'.

Each email sent to the judge is placed in a separate
subdirectory of the mail directory.  This subdirectory
has a name of the form:

    <judging-directory>/mail/dddd-<<ssssss>>-submission

and is called the `submission directory' for the piece
of email stored in it.  See `Contest Raw Data: Director-
ies' above for details concerning dddd and ssssss.

Files in the email's submission directory that are
specific to each kind of email are described in separate
sections below.  Files that can exist in all kinds of
submission directories are as follows:

    Received_Mail
	This is a read-only file that holds the piece of
	email sent to the judge which caused this direc-
	tory to be created.

    Reply_Mail
	This is the FINAL reply email sent by the judge
	concerning this directory.  Thus the presence of
	this file indicates that the judge is done with
	this submission directory.

	The judge can also send non-final email replies,
	which are NOT stored in this file.

    Reply_Mail+
        Every reply is first composed in this file, and
	then emailed.  When emailed, this file is either
	deleted or renamed to Reply_Mail (if it is the
	final reply).  Thus strictly speaking this file
	is not a `raw data' file, as it is not part of
	the audit trail.

    No_Reply
	This file is created by the judge to indicate
	the judge is done with this submission direc-
	tory, but does not intend to send an email reply
	to the contestant.  Typically this No_Reply
	file is just a one line file containing a reason
	why the judge feels no email reply is needed.
	The `lookat' program can revisit directories
	containing a No_Reply file whose contents
	match some given regular expression; so the
	contents of this file can serve as a marker to
	find this directory later.

	When the judge is done with this directory,
	either the Reply_Mail file or No_Reply file
	must exist.

    Reply_Mail_History
	This file is a log of ALL email replies sent by
	the judge for this directory.  It has the for-
	mat of a UNIX mailbox file.

    dddd-rrrr-<<ppppp>>-unchecked-error
	This `error log' file describes a system error
	that occurred processing this directory.  Of
	course, system errors are not supposed to hap-
	pen, but if they do, this file containing all
	the available information about the error is
	created.

	dddd is the date in seconds, rrrr is a random
	number to make the file unique even if several
	system errors happen in the same second, ppppp
	is the name of the program that suffered the
	system error.

	If an error occurs in an HPCM program that is
	NOT processing a submission directory, this
	error log file is put in the log directory (see
	above), instead of in a submission directory.

    dddd-rrrr-<<ppppp>>-checked-error
	This is an `unchecked-error' file (see just
	above) which has been read and `checked' by the
	judge.  An error file is `checked' by changing
	the `unchecked' in its name to `checked'.

	The `tracker' program searches for unchecked
	error log files and calls the judge's attention
	to them.  Error log files may be `checked' by
	the `manualreply' program.  Checked error log
	files are ignored by `tracker'.

    dddd-rrrr-<<ppppp>>-unchecked-error.mail
    dddd-rrrr-<<ppppp>>-checked-error.mail
	An error log file may be emailed to a `log_
	manager' when it is created.  If this is done, a
	companion .mail file is created containing the
	email message.  This file is `checked' when its
	associated error log file is `checked'.

    autodispatch.log
    	This is the standard output from the autodis-
	patch program and the programs it runs, such as
	autoinfo and autojudge, to process the sub-
	mission.

The section `Contest Raw Data: Data Flow' below outlines
the creation of raw data files in a submission direc-
tory.



Contest Raw Data: Solution Submissions
------- --- ----- -------- -----------

A solution submission is an email with a subject of the
form `submit pppp.eee \[qqq\]', where pppp is the pro-
blem name, .eee is the extension that identifies the
programming language used in the submission, and qqq is
the optional qualifier (`in', `inout', etc.).  Standard-
ly pppp.eee is also the name of the single submitted
file that is contained in the body of the submission
email.  But is it possible, given a pppp.rc file in the
solution directory with the right global variable set-
tings, for .eee to be omitted, and/or for multiple
files of various names to be submitted in the body of
the submission email.

A file being submitted may appear in the body of the
email in either of two ways.  It may be `formatted' or
`unformatted'.  If formatted, it appears as:

	HPCM_BEGIN filename
	.. first line of file
	.. next line of file
	.. rest of file, each line preceded by ..
	HPCM_END filename

If unformatted the file is just the body of the email
message, verbatim.  If there are multiple unformatted
files in a message, each file must contain `File:
filename' in its first block of non-blank lines.

Only formatted submissions are usually allowed in in-
formal and formal contests.  Such submissions are gener-
ated by the hpcm_submit program, which performs the
required formatting.  Unformatted submissions are
typically allowed in email contests so that contestants
who do not have hpcm_submit can submit easily.

A solution submission directory is processed by the
`autojudge' program.  If a single file named pppp.eee
is being submitted, this program produces the following
files in order (see `Library Data: Problems' above for
more details about many of these files):

 * pppp.rc		Optional.  Problem specific
 			parameters.  TCL code sourced
			after hpcm_judging.rc.

   pppp.eee		The submitted file.

 * Scoring_Filter	Optional output filter program.

 * xxxx.jin		Judge's input plus parameters.
 			Optional.
 * xxxx.in		Judge's input or jfiltered .jin
 			file.

 * Makefile		Problem Makefile.

 * xxxx.test		Judge's output.
 * xxxx.ftest		Optional Scoring_Filtered .test
 			file.
 * xxxx.jtest		Optional jfiltered .test file.
 * xxxx.jftest		Optional jfiltered .ftest file.

   pppp			Binary program.
   pppp.cerr		Compiler error output.

   xxxx.out		Solution standard output.
   xxxx.err		Solution error output.
   core			Possible core dump.
   xxxx.fout		Optional Scoring_Filtered .out
   			file.
   xxxx.jout		Optional jfiltered .out file.
   xxxx.jfout		Optional jfiltered .fout file.

   xxxx.yyscore		Output of scorediff of .yyout
   			and .yytest for exactly one of:
			yy = { \"\", f, j, jf }
   Auto_Score		Autojudge score.

   Reply_Mail		Possible final reply.
   Reply_Mail_History	History of all replies.

Here xxxx is any name such that either a xxxx.jin or an
xxxx.in file exists in the problem solution directory
(the problem subdirectory in the solutions subdirectory
of the judging directory).  If a .jin file exists, the
.in file is made from it by the jfilter program.  All
the xxxx names are called `input names'.  If there is
only one, it generally equals pppp, the problem name.
See `Library Data: Problems: Judge's Parameters and
Filters' above for a description of the Scoring_Filter
and jfilter programs.

The files marked with a * are linked into the submission
directory from the problem solution directory.

Some of the files in the problem solution directory may
have to be made from other files in that directory.
This is done automatically as required.  In particular,
if xxxx.jin exists but xxxx.in does not, the jfilter
program is run automatically with xxxx.jin as input to
make xxxx.in in the solutions directory.

The above is the standard behavior when no `pppp.rc'
file is linked from the problem solution directory, or
when this file only contains scoring instructions.  But
if a `pppp.rc' file exists and has the right global var-
iables set, files different from pppp.eee can be sub-
mitted, and additional files can be made in and linked
from the problem solution directory, as indicated in the
section `Library Data: Problems: Complex Problems'
above.

If an error happens during the process of producing
these files, other than an error during the execution
of the submission program, the process stops.  An error
in extracting pppp.eee or an error in the name of the
file (pppp is not a problem in the solutions directory
or eee is not a legal extension) generates a Reply_Mail
file that is the final say in the error.  Compile errors
and errors during execution of the submission program
generate an Auto_Score file.  Any solution submission
without errors generates an Auto_Score file.

The nature of any automatically generated reply to the
submitter given that an Auto_Score file has been
generated is controlled by the `response_instructions'
global variable.  For the default, if the scoring mode
is `auto', a final reply containing the score is sent.
The same is done if the score is `Completely Correct',
regardless of the scoring mode.  Otherwise if the
scoring mode is `auto+manual', a reply containing the
score is sent to the contestant, but not as a final
score, and NO Reply_Mail file is generated.  If the
scoring mode is `manual', no reply is sent to the con-
testant, and no Reply_Mail file is generated.

Also for the default `response_instructions' any re-
sponse sent to the submitter is CC'ed to the email
address value of the `response_manager' global variable
if that value is not \"\".

The behavior of `autojudge' is similar to the behavior
of `make' in a contestant's problem directory (see help
files) or a problem library problem directory (see
above).  The main differences are that the `autojudge'
extracts the `pppp.eee' file, links files from the
problem solution directory, captures compiler errors
in `pppp.cerr', captures run errors in `xxxx.err', and
scores `xxxx.out' (or `xxxx.fout') generating a *.*score
file and Auto_Score and possibly reply email.  `auto-
judge' can also make files that are otherwise missing in
the problem solution directory.

If the `autojudge' does not produce a final reply, it
creates a Needs_Reply_Flag file in the flag subdir-
ectory of the judging directory to signal that this
submission directory needs the attentions of `manual-
reply'.  This flag tells the `tracker' program to
re-compute its list of submissions for which the
`manualreply' program must be run.

When the `manualreply' program assigns a manual score,
that is stored in a `Manual_Score' file.   Email
containing this score is sent to the contestant as a
final reply and is stored in the Reply_Mail file.

If the `autojudge' creates or modifies the `Auto_Score'
file or `manualreply' creates or modifies the `Manual_
Score' file, the Score_Flag file in the flag subdirec-
tory of the judging directory is created to tell the
`makescoreboard' program to recompute the scoreboard.

The section `Contest Raw Data: Data Flow' below gives
some more details for solution submission directories.


Contest Raw Data: Get Requests
------- --- ----- --- --------

A get request submission is an email with a subject of
the form `get filename ...'.  The filenames are relative
to the judging directory's `info' subdirectory, and name
files in that directory to be `gotten', i.e., returned
in reply mail to the contestant.  A subdirectory can
also be named, in which case all the files and the sub-
directories in the subdirectory will be gotten, recur-
sively.  See the documentation of the `autoinfo' pro-
gram, which processes get requests, for details.

The `autoinfo' program produces the following files in
the email's submission directory:

    Reply_Mail		Final reply.
    Reply_Mail_History	History of all replies.
    Gotten		List of files successfully
    			gotten.

The `autoinfo' program always produces a final reply
the therefore a Reply_Mail file.  It may produce two
email replies: one containing error messages and one
containing files successfully gotten.  These two kinds
of replies have different `Subject' header field formats
so they can be distinguished by automatic mail routers
such as `procmail', and replies containing files can be
sent to hpcm_extract which extracts the files and stores
them, while replies containing error messages can avoid
hpcm_extract.

Processing of get requests is completely automatic;
there is never any need for manual reply (barring a sys-
tem error, of course).


Contest Raw Data: Queries
------- --- ----- -------

A query submission is an email with a subject that does
not begin with either `submit' or `get'.  Such an email
is used to ask a question of the judge.

If the `reply_mode' is `auto', the `autodispatch' pro-
gram produces an email reply and a Reply_Mail file
automatically.  If the `reply_manager' is not \"\", this
email is CC'ed to the `reply_manager' who can respond
from an account other than the judge's, and the automa-
tically generated reply will suggest that this will be
done.  Otherwise the automatically generated reply will
apologize that there is no one to mind the store.

If the `reply_mode' is not `auto', the Needs_Reply_Flag
file is created in the flag directory to signal that
this directory needs the attentions of `manualreply'.
The `manualreply' program must then be run to generate
a Reply_Mail or a No_Reply file.


Contest Raw Data: Data Flow
------- --- ----- ---- ----

The flow of raw data through the HPCM system is as
follows (not all details of each step are given):

                email to judge
                     |
                     | receivemail (called
                     | from ~/.procmailrc)
                     v
      mail/dddd-<<sssss>>-submission
               Received_Mail
                     |
                     | dispatchmail (called
                     | from ~/.procmailrc)
                     |
                     | autodispatch (called
                     | by dispatchmail)
                     v
+-----+-----+--------+ \[Test `Subject:'\]
|     |     |
|     |     | \[Subject: not `submit ...' or `get ...'\]
|     |     |
|     |     +---> flag/Needs_Reply_Flag,
|     |               if reply_mode != `auto';
|     |           or Reply_Mail and Reply_Mail_History
|     |               if reply_mode == `auto'
|     |
|     | \[Subject: `get ...'\]
|     | autoinfo (called from autodispatch)
|     |
|     +----> Reply_Mail, Reply_Mail_History, Gotten
|
| \[Subject: `submit: pppp.eee \[qqq\]'\]
| autojudge (called from autodispatch)
+--------------+
               | autojudge (linking pppp.rc if present)
               v

               |
               v
            pppp.rc file (if any)
               |
               | extractmail (called from autojudge)
               v
               +-----------------+
               |                 |
    \[no error\] |                 | \[non-system\
                                           error\]
               |                 |
               |                 | autojudge
               v                 v
            pppp.eee        Reply_Mail
          and/or other      Reply_Mail_History
         submitted files
               |
               v
               |
               | \[does `pppp.rc' file define
               |  problem_make_files?\]
               |
               +------------+
               |            |
          \[no\] |            | \[yes\]
               |            |
               |            |  make filename ...
               |            |  (called in
               |            |   solutions_directory/pppp
               |            |   by autojudge)
               |            |
               |      files made in
               |  solutions_directory/ppp
               |            |
               |<-----------+
               |
               v

               |
               | autojudge
               | (linking files from
               |  solutions_directory/pppp)
               |
               v
            Makefile
            Scoring_Filter (if any)
            xxxx.test 
            xxxx.ftest (if any)
            xxxx.jtest (if any)
            xxxx.fjtest (if any)
            additional linked files (if `pppp.rc'
               |   defines problem_link_files
               |   or problem_optional_link_files)
               |
               | make pppp (called from autojudge)
               |
               v
            pppp (if no error)
            pppp.cerr (compiler standard error output)
               |
               +-------------+
               |             |
 \[pppp exists  |             | \[pppp does not exist
  and is       |             |  or is not executable\]
  executable\]  |             |
               |             | autojudge
               |             v
               |        Auto_Score = `Syntax Error'
               |        Reply_Mail_History
               |          if scoring_mode != `manual'
               |        Reply_Mail
               |          if scoring_mode == `auto'
               v

               |
               | run pppp to make xxxx.out
               | (called from autojudge)
               |
               v
            xxxx.out (standard output)
            xxxx.err (standard error output)
            core (if program crashes)
               |
               | \[is Scoring_Filter present?\]
               |
               +----------------+
               |                |
          \[no\] |                | \[yes\]
               |                |
               |                | Scoring_Filter
               |                | (called by autojudge)
               |                v
               |             xxxx.fout
               |                |
               |<---------------+
               |
               v
               | \[is xxxx.jin present?\]
               |
               +----------------+
               |                |
          \[no\] |                | \[yes\]
               |                |
               |                | jfilter
               |                | (called by autojudge)
               |                v
               |             xxxx.jout
               |                or
               |             xxxx.jfout
               |                |
               |<---------------+
               |
               v

               |
               | scorediff (called from autojudge)
               v
         Exactly One of:
            xxxx.score
            xxxx.fscore
            xxxx.jscore
            xxxx.jfscore
               |
               | \[is xxxx.err non-empty
               |  or xxxx.out empty?\]
               |
               +------------------------+
               |                        |
         \[no\]  |                        | \[yes\]
               |                        |
               | autojudge              | autojudge
               |                        |
               v                        |
           Auto_Score     Auto_Score = `Program Crashed'
               |                        |
               |<-----------------------+
               |
               v

               |
               | \[non-default response_instructions?\]
               |
               +--------------------+
               |                    |
          \[no\] |                    | \[yes\]
               |                    |
               |                    v
               |              Reply_Mail maybe
               |              Reply_Mail_History maybe
               |
               v

               |
               +--+------------+
                  |            |
  \[Auto_Score ==  |            | \[Auto_Score !=
   `Completely    |            |  `Completely  
    Correct'\]     |            |   Correct'\]
                  |            v
                  |     Reply_Mail_History
                  |       if scoring_mode != `manual'
                  |     Reply_Mail
                  |       if scoring_mode == `auto'
                  v
              Reply_Mail
          Reply_Mail_History


If a system error occurs at any point, which can only
happen if HPCM has a bug, then processing stops and
an unchecked error log file is created.  If processing
is within a submission directory, the log file is
created within this directory; otherwise the log file
is created within the log directory.


Contest Derived Data: Processing Status Files
------- ------- ----- ---------- ------ -----

During the processing of raw data and the updating of
the scoreboard, several files are used to keep track of
the status of data processing and program processes.
These files and one of their containing directories
are:

    <judging-directory>/flag
        Flag files in this directory are created just
	after information is written into other files
	that may need to be read by certain programs
	(makescoreboard or tracker).   The programs that
	read these other files, when they see that a
	flag file exists, delete the flag file first,
	and then read the other files to see what to do.

	Specifically, the following are flag files in
	the flag directory:

	    Score_Flag
	        Created when any Auto_Score or
		Manual_Score file is written;  the
		`makescoreboard' program sees this flag
		and recomputes the scoreboard.

	    Needs_Reply_Flag
	        Created when any action that will re-
		quire a person to use the `manualreply'
		program happens.  The `tracker' program
		sees this flag and then looks throughout
		the contest directories and files to see
		where `manualreply' should be run.

    <judging-directory>/Scoreboard_PID
        A file in the judging directory containing the
	process ID of any `makescoreboard' program that
	is running in background.  This file is main-
	tained by the `makescoreboard' program with its
	`start' and `stop' options.  The `status'
	option reads this file and displays the status
	of the process identified in the file.

    <judging-directory>/Startcontest_PID
        Ditto but for the `startcontest' program instead
	of the `makescoreboard' program.

    <judging-directory>mail/*-submission/Dispatch_PID
        This file is used as a lock to prevent more than
	one `autojudge' or `manualreply' program from
	running in a submission subdirectory at once.
	This file is a lock on the submission direc-
	tory.  The file contains the process ID of the
	program that has locked the directory.

	If `autojudge' tries to create this file and
	the file already exists, `autojudge' terminates
	without error, assuming some other process is
	processing the directory.  If `manualreply'
	tries to create this file and the file already
	exists, `manualreply' displays the status of the
	process identified by this file, and asks its
	user whether to quit or kill the identified
	process (if it is still running) and continue.

    <judging-directory>/solutions/pppp/Dispatch_PID
        This file is used as a lock to prevent more than
	one `autojudge' program from making files in the
	same problem solution directory at one time.
	See the problem_make_files global variable
	documentation in hpcm/judge/lib/hpcm_judging.rc
	and the `autojudge' documentation for details.


Contest Derived Data: Scoreboard Files
------- ------- ----- ---------- -----

The `makescoreboard' program can run in background and
recompute the scoreboard as necessary.  It always com-
putes the following file:

    <judging-directory>/Scorefinder_Output
    <judging-directory>/Scorefinder_Output+
        Output of the scorefinder program, for use as
	input to the scoretable program.  The + file
	is used by `makescoreboard update' and the non-+
	file by the background process started by
	`makescoreboard start'.

The other scoreboard files depend upon the scoreboard
instructions in hpcm_judging.rc.  The standard instruc-
tions for different types of contests compute the fol-
lowing files (non-standard instructions may compute
different files):

  For email contests:

    <judging-directory>/scoreboard.mail
        A copy of the scoreboard emailed to an address
	by `makescoreboard'.  Contains copies of the
	scoreboard.notes file and scoreboard table.

  For informal contests:

    <judging-directory>/contest/scoreboard.1
        The first of four scoreboard pages visible to
	the contestant `scoreboard' display program.
	Contains copies of the scoreboard.1head file
	and the scoreboard table.

  For formal contests:

    <judging-directory>/contest/scoreboard.public
        The scoreboard table containing submissions
	up until the freeze time.

    <judging-directory>/contest/scoreboard.freeze
        A special freeze announcement created at the
	freeze time.

    <judging-directory>/contest/scoreboard.1
        The first of four scoreboard pages visible to
	the contestant `scoreboard' display program.
	Concatenation of scoreboard.1head,
	scoreboard.freeze (if that exists), and
	scoreboard.public.

    <judging-directory>/contest/scoreboard.current
        The current scoreboard table, made after the
	freeze time and kept up do date.  Only readable
	by judges.

    <judging-directory>/contest/scoreboard.final
        The final scoreboard suitable for printing,
	and containing a copy of the who_where file.
	Only readable by judges.

See `makescoreboard' and the scoreboard parameters in
hpcm_judging.rc for details.


Programs: Contestant
--------- ----------

The programs runnable by the contestant are documented
in the help files: see `Library Data: Help Documenta-
tion'.  All these programs are in the hpcm/contestant/
bin directory, to which the contestant account's
~/.hpcm_contest/bin directory is linked.  This last is
in the PATH of the contestant account.

A brief summary of these programs follows:

    help		Display help files.
    scoreboard		Display a scoreboard.
    xcsh		Create new xterm windows.

    hpcm_sendmail	Send email from a contestant to
    			the judge.
    hpcm_get		Make `get file' requests using
    			hpcm_sendmail or link problem
			files into contestant account
			directories.
    hpcm_extract	Extract files returned in email
    			replies to `get file' requests.

    hpcm_sandbox	Run contestant submissions in a
    			`sandbox'.  For a contestant,
			this just applies resource
			limits.
    hpcm_submit		Submit problem solution files
    			using hpcm_sendmail.

    javahelp		Use a browser to display JAVA
    			API documentation.
    hpcm_clisp		Run COMMONLISP programs.  Uses
    			hpcm_clisp.lsp as helper code.

    fprint		Print 56 column files.
    print		Print 80 column files.
    print2		Print 80 column files 2 file
    			pages per print page.
    printer		Display printer status.

In addition, the following programs are designed to be
run in a contestant account, but are either to be run
by the judge while setting up accounts, are to be run
indirectly by the above programs:

    printer_pipe	Locates the printer, sends the
    			standard input to that printer,
			and updates the printer_jobs
			file.

    hpcm_helper		Program used to implement
    			javahelp and similar programs.
			Runs a program determined by a
			file in the contest directory,
			such as the javahelp file used
			for the javahelp program.

    SETUP_PROTOTYPE	Used in the prototype account to
    			to make the prototype home di-
			rectory.

    TRASH_ACCOUNT	Used in a contestant account to
    			reinitialize all the files and
			symbolic links in that account.

    hpcm_extract_test_replies
    			Reads an mbox file and extracts
			test reply mail into *.reply
			files, using the X-HPCM-Test-
			Subject field of the message 
			headers.

    email_diff		Diff two email files after re-
    			moving header and body lines
			selected by regular expressions.
			Used to check test email.

    filtered_diff	Diff two files after replacing
    			matches to given regular expres-
			sions by XXX.  Used to check
			test results.

In addition to the programs proper, there are a few
support files in hpcm/contestant/bin:

    hpcm_clisp.lsp	Support code for hpcm_clisp.

    procmailrc		A copy of the ~/.procmailrc
    			file that should be in each
			contestant account's home
			directory.

Programs: Judging
--------- -------

The judge's programs are in hpcm/judge/bin, which is
placed in the PATH of the judge's account.  A brief
summary of the programs used during a contest to run
the contest follows:

    help_help		Display help files.
    help		Ditto (symbolic link to
    			hpcm_help).
    scoreboard		Display the scoreboard.
    hpcm_sendmail	Send mail to the judge (from
    			himself or an auxiliary judge).

    receivemail		Process received email and store
    			it in a submission directory
			that this program creates.
    dispatchmail	Call autodispatch for each
    			submission directory.
    autodispatch	Call autoinfo or autojudge, or
    			process query, for a submis-
			sion directory.

    autoinfo		Process a get request submis-
    			sion directory.
    autojudge		Process a solution submit
    			submission directory, and
			compute the score from the .out,
    			.err, .cerr files.

    extractmail		Extract solution files from
    			received email.

    hpcm_sandbox	Run hpcm_sandbox_x with the
    			`-core 0' option.
    hpcm_sandbox_x	Run a program in a sandbox.
    			Same as hpcm/contestant/bin/
			hpcm_sandbox but with root set
			user ID, so the contestant's
			program is run with user ID
			`sandbox'.

    hpcm_clisp		Run a COMMONLISP program.  Uses
    			hpcm_clisp.lsp for helper func-
			tions.
    hpcm_clisp.lsp	Code for hpcm_clisp.

    scorediff		Compare the .yyout and .yytest
    			files (for yy = \"\", f, j, or
			jf) and report differences in a
			.yyscore file.

    startcontest	Change the mode of contest/pro-
    			blems and contest/help/problems
			to make them readable by con-
			testants.

    makescoreboard	Recompute the scoreboard files
    			at intervals.
    scoretable		Compute a scoreboard table given
    			the output of `scorefinder'.
    scorefinder		Look through all the submis-
    			sion directories for score
			files and output the information
			found.

    manualreply		Permit a human user (the judge)
    			to inspect the contents of a
			submission (or error log) dir-
			ectory and to specify manual
			scores and email replies.

    tracker		Identify submission director-
    			ies and error log directories
			for which `manualreply' should
			be run and permit a user to
			dispatch `manualreply' to these.
			Can also produce summary tables.
    trackfinder		Look through all the submis-
    			sion directories for information
			needed by `tracker' and output
			this information for `tracker'
			to use.
    lookat		Find submission directories
    			containing files with given
			names and contents, and dispatch
			`manualreply' to these director-
			ies.

    jprint		Print 80 column files to all
    			printers using `printer_broad-
			cast'.
    printer_broadcast	Sends the standard input to all
    			printers, and updates the
			printer_jobs file.
    printer		Prints the last few lines of the
    			printer_jobs file.

    javahelp		Browses the Java API.
    hpcm_helper		Aids the execution of programs
    			like javahelp.

Note that some of these programs are imported by the
hpcm/judge/bin/Makefile or by other means from other
directories.  When this is true, the programs have the
same named in hcpm/judge/bin and in these other direc-
tories.


Programs: Contest Making
--------- ------- ------

The following programs are used to make contests:

In hpcm/judge/bin:

    jfilter		Make .in files from .jin files,
    			.jout files from .out files,
			.jfout files from .fout files,
			and extract scoring_instructions
			from .jin files.

    makecontest		Make the contest definition
    			files starting from parameters
			hpcm_judging.rc (that can be
			overridden by giving parameters
			directly to the program).
    makeweb		Make a web page set containing
    			problem statements and optional-
			ly problem solutions, using
			parameters in hpcm_judging.rc.

    fprint		Print 56 column wide files,
    			2 file pages per print page.

    hpcm_print_passwords  Linked to hpcm/secure/bin/
    			  hpcm_print_passwords.  See
			  below.
    hpcm_email_passwords  Linked to hpcm/secure/bin/
    			  hpcm_email_passwords.  See
			  below.

In hpcm/contestant/bin:

    SETUP_PROTOTYPE	Setup the prototype account and
    			files needed by TRASH_ACCOUNT.
    TRASH_ACCOUNT	Initialize (or reinitialize) the
    			files and directories of a sin-
			gle contestant account.

In hpcm/secure/bin:

    hpcm_print_passwords  Print contestant account names
    			and passwords each on a separate
			page with contest specific in-
			structions.
    hpcm_email_passwords  Email contestant account names
    			and passwords to team coaches,
			each with extra information con-
			taining contest specific in-
			structions.

    hpcm_setup_accounts  Runs the equivalent of the
    			following 3 programs, without
			redoing what has already been
			done.
    hpcm_make_accounts	Create all contestant accounts.
    hpcm_set_passwords	Set passwords for all contest-
    			ant accounts.
    hpcm_TRASH_ACCOUNTS	Run TRASH_ACCOUNT in each con-
    			testant account.


Programs: Maintenance
--------- -----------

The following programs are used for maintenance.

In hpcm/judge/bin:

    overview		Print this document.
    installing_hpcm	Print the `Installing HPCM'
    			document.
    judging		Print the `HPCM Judging' docu-
    			ment on how to judge contests.

    remakeMakefile	Make or remake problem Makefiles
    			from another problem Makefile
			that acts as a template.
    testproblems	Test many problems at once.

    fcheck		Check that a file has 56 column
    			lines and 40 line pages.
    fcheckc		Check that a file has 56 column
    			lines (but unlimited length
			pages, for code).
    chkpage		Helper for fcheck{,c}.

    hpcm_extract_test_replies  Linked to hpcm/
    			contestant/bin/hpcm_extract_
			test_replies.  See below.
    filtered_diff	Linked to hpcm/contestant/bin/
    			filtered_diff.  See below.
    email_diff		Linked to hpcm/contestant/bin/
    			email_diff.  See below.

    file_list		Make lists of HPCM files from
    			logical expressions involving
			keywords.
    sloc_counts		Count SLOCs (source lines of
    			code in HPCM program files).

In hpcm/contestant/bin:

    hpcm_extract_test_replies
    			Extract messages in a mailbox
			(mbox file) that have an
			X-HPCM-Test-Subject field begin-
			ning with a test name.

    filtered_diff	Diff filtered files.
    email_diff		Diff filtered email files.


Common Functions
------ ---------

There are five packages of functions that can be import-
ed by HPCM TCL programs:

    hpcm/judge/lib/hpcm_judging.rc
    	System/user interface functions.  Also includes
	system parameters.  Always imported.

    hpcm/judge/lib/judging_common.tcl
    	General functions.  Always imported.

    hpcm/judge/lib/display_common.tcl
    	Display functions.

    hpcm/judge/lib/scoring_common.tcl
    	Scoring functions.

    hpcm/judge/lib/scoreboard_common.tcl
    	Scoreboard functions.

Common Functions: System/User Interface
------ ---------- ----------- ---------

The file hpcm/judge/lib/hpcm_judging.rc contains func-
tions usable by any HPCM TCL program that are simple
interfaces to underlying operating systems programs,
simple interfaces to extended TCL functions that might
not be present in all versions of TCL, or interfaces to
basic actions such as editing that users may wish to
customize.  Changes of operating system, TCL extensions,
or user preferences can be made just by changing these
functions.  A brief summary of these functions is:

    proc submitter_compress { submitter }
        Compress the email address of a submitter to
	make a scoreboard contestant name.

    proc send_mail { message_file }
    proc send_message { message }
    	Send a file or variable value as email.

    proc compute_signature { value }
        Compute the MD5 signature of a value.

    proc translate_base64 { text }
        Translate base64 MIME encoded text.

    proc truename { dirname }
        Return absolute name of a directory that would
	be given by `pwd' if the directory were current.

    proc create_file { filename }
        Create a file unless the file already exists,
	and return an indication of whether a new file
	was created.  Used for locking.

    proc create_directory { dirname }
        Create a directory unless the directory already
	exists.

    proc link_file { source { target . } }
        Symbolically link source to target.

    proc copy_file { source target }
        Copy a file preserving protection mode settings.

    proc grant_access { filename { allow rx } }
    	Add a+x, a+r, or a+w permissions to file or
	directory.

    proc get_access { filename }
        Discover `a' permissions of file.

    proc deny_access { filename }
        Deny all permissions for a file or directory ex-
	cept to owner or group, and deny write permis-
	sions to group.

    proc view_file { filename }
        Look at a file (e.g., with an editor).

    proc edit_file { filename }
        Edit a file with your favorite editor.

    proc make_file { name err_file }
        Make the `name' by using the `make' program on
	the Makefile in the current directory.

    proc diff_directories { directory1 directory2 }
        Diff two directories, as per UNIX `diff -r'.

    proc diff_files \\
             { file1 file2 output { options \"\" } }
	Diff two files as per UNIX `diff' and write a
	complete description of the result, including
	error messages, into an output file.

    proc call_shell {}
        Invoke your favorite shell for interactive use.

    proc exec_in_directory { directory command args }
        Execute a command in a particular directory.

    proc current_pid {}
        Return the current process' ID.

    proc display_process_tree { root_pid }
        Return a display of the processes in the process
	tree rooted at a given process ID.

    proc process_found { display }
        Returns true iff root process existed when
	display_process_tree returned display.

    proc signal_process_tree { signal root_pid }
        Send a KILL or INT signal to all the processes
	in a process tree rooted at a given process ID.

    proc make_signals_errors {}
    proc make_signals_ignored {}
    proc make_signals_default {}
        Set all `likely' UNIX signals to cause a TCL
	error, be ignored, or cause their default
	action.

    proc disable_outputs {}
        Route stderr and stdout to /dev/null.

    proc account_name {}
    proc host_name {}
    	Return the account name or host network name.

    proc account_home_directory { account }
        Return the home directory of an account.

    proc account_home_directories { glob }
        Return the home directories of all accounts
	whose names match the glob expression.

Common Functions: General
------ ---------- -------

The file hpcm/judge/lib/judging_common.tcl contains
functions usable by any HPCM TCL program.  A brief sum-
mary of these is:

    proc exit_cleanup {}
    	Called on every exit; can be redefined to per-
	form cleanup actions.

    include_if { condition textexpr }
	Evaluate condition and if true evaluate text-
	expr as if it were in \" quotes and return its
	value, else return \"\".

    indent_list { indent list { maxlen 56 } }
        Return the list as text for display with the
	given indent and maximum line length.

    proc dispatch_lock { { directory . } }
    proc dispatch_unlock { { directory . } }
	Lock/unlock a directory by creating a Dispatch_
	PID file in it.

    proc clock_to_filename_date { clock }
    proc filename_date_to_clock { date }
        Convert standard time data to/from the date
	format used in submission directory names and
	error log file names.

    proc is_checked { filename }
    proc make_checked { filename }
    proc make_unchecked { filename }
        Manages the `checked' flag in an error log file
	name.

    proc caught_error {}
        Process an error caught during an HPCM TCL
	program.

    proc log_error { error_output }
        Log an error to an error log file, to the stand-
	ard error output, or to an email.

    proc read_header { ch { first_line \"\" }
			  { omit_fields \"\" } }
	Read the header of received email.

    proc read_part_header { ch }
	Read the body part header of received email.

    proc read_part_line { ch end_of_file }
	Read the body part lines of received email.

    proc compute_message_reply_to {}
    proc compute_message_date {}
    proc compute_authentication {}
        Compute the effective Reply-To, Date, and
	X-HPCM-Signature-OK email header field values.

    proc header_is_authentic {}
        Test whether message is authentic.

    proc read_sendmail_rc {}
        Read the ./contest/secure/hpcm_sendmail.rc file
	and return the parameters it contains.

    proc reply { args }
        Call compose_reply and then send_reply.

    proc compose_reply { args }
        Compose a reply in Reply_Mail+.

    proc send_reply { args }
        Send the reply stored in Reply_Mail+.

    proc blank_body { ch }
        Check if received email has a blank body.

    proc put_file { filename
		   { ch stdout }
		   { line_count 1000000000 } }
	Write an entire file or the first so many lines
	of a file to a channel.

    proc read_file { filename }
        Read and return the first line of a file.

    proc write_file { filename line }
        Write an entire file, usually a one line file.

    proc read_entire_file { filename }
        Read the entire file and return it as a string.

    proc source_file {}
        Securely source a file if it exists.

    proc set_flag { flagfilename }
    proc test_flag { flagfilename }
    proc clear_flag { flagfilename }
    	Manage flags in the flag directory.

    proc compile_logical_expression { expression
                                      abbreviations
				      atoms values }
	Compile a logical expression.

    proc parse_block { block command_list_name
    			     globals { extras {} } }
	Parse a block and process if/elseif/else
	statements in it, returning the block with
	these removed.

Common Functions: Display
------ ---------- -------

The file hpcm/judge/lib/display_common.tcl contains
functions usable by any HPCM TCL program for menu driven
displays.  A brief summary of these is:

    proc display_window {}
    	Display current window.  The current window has
	`display', `info', `error', and `prompt' parts.

    proc set_window_display { display }
    proc set_window_info { info }
    	Set the `display' or `info' part of the current
	window.

    proc bar_with_text { text }
        Return a `===' bar ending with the text.

    proc yes? {}
        Read input and check it for `yes' or `no'.

    proc continue? {}
        Wait for ENTER or RETURN input.

    proc out_check { out }
    	If `out' not \"\", print it and call\
					`continue?'.

    proc get_lock {}
    	Lock the current directory with a Dispatch_PID
	file, but if it is already locked, negotiate
	with user to break the lock or exit.

    proc clear_lock {}
    	Clear current directory Dispatch_PID lock.

    proc get_listed_files { }
        Compute list of files to be put in file list.

    proc get_file_item { filename }
    	Get item from file list describing file.

    proc get_file_items { regexp }
        Get items from file list for files whose names
	match the regexp.

    proc refresh_file_list { }
        Compute the file list items (which describe
	file modification times, sizes, etc.) from the
	value of `get_listed_files'.

    proc get_file { id }
    	Given the id of a file list file, return the
	name of the file, or return a description of
	the error encountered trying to find the file.
	Return values are part of the current window
	state.

    proc read_score { score_file }
    	Read a one line score file.

    proc make_diff { file }
        Make a .diff or .bdiff file if necessary.

    proc set_file_list_display {}
        Set the current window to display the current
	file list.

    proc set_file_display { filename }
    	Set the current window to display a file.

    proc read_file_array { filename xxx_array
                                    linenumber } 
	Read a file incrementally into an array.

    proc close_file_array { xxx_array }
    	Close a file input array.

    proc tab_expand { line }
        Return line with tabs expanded.

    proc compute_file_display { filename xxx_array
    				first_line_number
				last_line_number
				highlights }
	Return display of some lines of a file with
	some text in the file highlighted.

    proc send_query { header }
    	Create and email a query to the judge.


Common Functions: Scoring
------ ---------- -------

The file hpcm/judge/lib/scoring_common.tcl contains
functions usable by any HPCM TCL program to compute
scores.  A brief summary of these is:

    proc compute_instruction_array \\
	    { instructions name }
    	Compute scoring instructions array from the
	value of `scoring_instructions'.

    proc compute_score_and_proof_arrays \\
    	    { score_file }
	Compute score, score marker, and proof arrays
	from .score file.

    proc compute_score_file \\
	    { outfile testfile scorefile
	      { options {} } }
    	Compute .score file from outfile and testfile.

    proc compute_score { }
    	Compute score from scoring instructions and
	score arrays.

    proc compose_response \\
	    { { compose_reply_options \"\" } }
    	Compose a reply indicating the score.

    proc send_response { commands }
    	Send any previously composed response.

    proc get_proof { args }
    	Set the current proof group and proof within
	this group.

    proc set_proof_display { }
    	Set current window display part to display the
	current proof.

    proc compute_proof_info { }
    	Set current window info part to display summary
	of proofs in proof array.



Common Functions: Scoreboard
------ ---------- ----------

The file hpcm/judge/lib/scoreboard_common.tcl contains
functions usable by any HPCM TCL program to produce a
scoreboard.  A brief summary of these is:

    proc compute_scoreboard_array { input_ch }
    	Compute a scoreboard data base from the output
	of the scorefinder program.

    proc prune_scoreboard_array {}
        Prune and sort a scoreboard data base.

    proc compute_scoreboard_list {}
        Compute an internal scoreboard from a pruned
	scoreboard data base.

    proc format_problem_score \\
    		{ time incorrect modifier }
	Format a single problem score for printing.
"

exit 0

# Include common error catching code:
#
} caught_output
caught_error
