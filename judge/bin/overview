#!/bin/sh
#
# Make judge's overview document.
#
# File:		makeoverview
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Mon Dec 11 06:45:09 EST 2000
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: hc3 $
#   $Date: 2000/12/11 12:37:57 $
#   $RCSfile: overview,v $
#   $Revision: 1.9 $
#
# The next line starts tcl \
exec tcl "$0" "$@"

# Use tcl rather than tclsh so that `signal' is defined.

# Include common code and parameters:
#
set lib_directory "[file dirname $argv0]/../lib"
source $lib_directory/judging_common.tcl
set log_mode none
catch {

puts "
		     HPCM Overview
		     ---- --------

	Features
	Creating a Contest
	Data and Programs
	Library Data: Problems
	Library Data: Help Documentation
	Library Data: Example Contests
	Contest Definition Data: The Judging Directory

Features
--------

The Harvard Programming Contest Manager, HPCM, has the
following features:

    o Supports different kinds of programming contests:

    	email	    Contestants supply their own ac-
		    counts and communicate with the
		    judge by email to get problems and
		    submit solutions.  Contestants may
		    compete at any time.

	informal    Contestants are given accounts which
		    they can use locally or remotely at
		    any time to get problems and submit
		    solutions.

	formal	    Contestants are given accounts and
		    printouts of problems at a fixed
		    contest starting time.

    o Has an automatic judge, that can be used exclu-
      sively, or as an aid to a human judge.

    o Has a library of problems and supports easy semi-
      automated creation of new contests.

    o Keeps a complete log of everything that happens
      during contests in the form of files that can be
      easily analyzed for different purposes.

    o Is written modularly in TCL and Bourne Shell (sh)
      so that HPCM can easily be adapted and modified.


Creating a Contest
-------- - -------

To create a contest, first read the help files


	hpcm/contestant/help/*/*

to get a good idea of what you are creating.  Choose
the type of contest you want to create (email, informal,
formal) and then read the instructions in

	hpcm/examples/<contest-type>_contest/Makefile

This file also contains basic advice on how to judge
the contest.

You should also read

	hpcm/judge/lib/hpcm_judging.rc

and try to understand the parameters in that file as
best you can.

In order to better understand what you are doing, you
should read the following overview and then read the
individual program documentation for some of the pro-
grams used to set up or judge contests.


Data and Programs
---- --- --------

HPCM handles different categories of data:

Library Data
    Problem descriptions, help documentation files,
    example contest parameter files.

Contest Definition Data
    Files that define a contest, including documentation
    for contestants, problem definition, solution defi-
    nition, and contest parameter definition.

Contest Raw Data
    Files that capture submissions and information gen-
    erated during judging, such as binary program files,
    output files, scores, and email replies.

Contest Derived Data
    Scoreboards and contest tracking summaries.


HPCM also contains several different categories of
programs:

Contestant Programs
    Programs run by contestants during a contest.

Judging Programs
    Programs run to judge a contest.

Contest Making Programs
    Programs run to make a contest.

Maintenance Programs
    Programs run to maintain the library or test the
    HPCM system.

Library Data: Problems
------- ----- --------

The problem library consists of the subdirectory tree
rooted at

	hpcm/problem_library

Each problem (and each demonstration problem) has its
own directory within the problem library.  The last
component of the name of this directory is the name of
the problem, and is also the basename of files describ-
int the problem and solving the problem.

If a problem has name `pppp', then the following files
in the `pppp' directory describe the problem:

    pppp.txt	Problem description.

    Makefile	Gives instructions for compiling and
                running the problem solution.

These files are made available to the contestant, though
in a formal contest only a printout of the pppp.txt file
is made available.

In order to be able to score a problem, three more files
are placed in the problem directory within the program
library:

    pppp.in		    The judges test input.
    pppp.test		    The judges test output.
    Scoring_Instructions    Optional file containing
    			    parameters that control how
			    the automatic scoring is
			    done (e.g., what numeric
			    tolerances are permitted).

A contest has a solutions directory that contains sym-
bolic links to the library problem directories for every
problem that can be judged during the contest.  The
files just mentioned become input to the judging.

In addition to the files already mentioned, the library
problem directory usually contains a judges solution
written in one of the contest programming languages.
The solution is written as a file whose extension indi-
cates the programming language of the solution.  Typical
possibilities are:

    pppp.c	C language solution.
    pppp.cc	C++ language solution.
    pppp.java	JAVA language solution.
    pppp.p	PASCAL language solution.

The programming languages allowed may vary; but every
solution language must be explicitly supported by the
problem Makefile.

It is possible to compile and run the solution within
the library problem directory in the same manner as
a problem is compiled and run by contestants and by the
judge.  Doing this results in making temporary files
that can be removed by the `make clean' command in the
problem directory.

Compilation creates a binary file named `pppp' and may
create other files for some languages:

    pppp	    The executable program binary.
    pppp*.class	    JAVA class files.
    pppp.p2c	    C translation of PASCAL program.

The solution is written to take input from the standard
input (the terminal by default) and put output to the
standard output (also the terminal by default).  The
Makefile contrives to run the program with resource
limits so the standard input and output are mapped to
a .in file and a .out file.  Running the solution using
the Makefile reads or creates the following files:

    pppp.in	Test input.
    pppp.out	Test output.
    core	Dump of program if it crashes.

Its important to note that the solution code should NOT
open any files.

The `make' command in the problem directory makes the
binary program if that does not exist or it is older
than the solution source file, and then makes the
pppp.out file if that does not exist or it is older than
the binary file or the .in file.

If a problem directory symbolically linked into a con-
test solutions directory has pppp.out file, this file
will be treated as the judge's output in PREFERENCE to
any pppp.test file.  Thus if a judge finds an error in
the judge's solution, the judge merely needs to fix
the solution file and run the `make' command in the
problem directory to fix the judge's output.  After the
contest the judge can replace the pppp.test file by
a copy of the correct pppp.out file.

However, there is a difficulty with running JAVA
solutions in a library problem directory using `make'.
The judge's hpcm_sandbox program runs the binary as
a user named `sandbox' that cannot access the problem
directory using an absolute pathname.  Unfortunately,
existing JAVA systems have a bug that causes them to
convert relative pathnames of .class files into absolute
pathnames before they are used, so the .class files
cannot be found by the `sandbox' user.  The fix for this
currently is to run the progams manually by

	pppp <pppp.in >pppp.out

The `make clean' command in the problem directory de-
letes all temporary files, including `pppp', `pppp.out',
`core', and `.class' files.

The library problem directories are placed within one of
three subdirectories of the hpcm/problem_library direc-
tory:

	demos	Demonstration problems.

	public	Problems that can be freely distributed
		to the public, without any restriction
		on verbatim copying, and with no re-
		striction on alteration and redistribu-
		tion unless otherwise indicated.

	private	Problems that cannot be redistributed
		to the public.  These have been taken
		off the web in most cases, and can be
		distributed to true friends and colla-
		borators or other members of your uni-
		versity, but cannot be placed on the web
		or be made available to strangers.

The problem directories are listed in the

	hpcm/problem_library/index

file, which can be input to the makejudgingdir program
to define which problems are to be used in a particular
contest, and to create an index of these problems.

Emails giving permission to make various problems public
are in the directory

	hpcm/problem_library/legal



Library Data: Help Documentation
------- ----- ---- -------------

The help documentation files reside in the subdirectory
tree rooted at

	hpcm/contestant/help

Each `help' file is a short ASCII text document on some
topic contestants may need to know about.  For example,
there is a `help' file on the mechanics of solving a
problem (what files to write, how to compile, etc.).

The help files have a 56 column times 40 line format
that permits them to be printed two file pages per
paper page using a reasonable size font.  The fprint
program prints these files: the fcheck program checks
that they have no line longer than 56 columns and no
page longer than 40 lines.

The subdirectories of `hpcm/contestant/help' are
as follows:

    common	Help files used for all kinds of con-
    		tests (email, informal, and formal).

    email	Help files used for email contests only.

    email/sh	Code written in the Bourne Shell (sh)
    		language that can be used by contestants
		of an email contest on their own com-
		puters.

    informal	Help files used for informal contests
    		only.

    formal	Help files used for formal contests
    		only.

The `email/sh' subdirectories contains actual code.  If
similar code is written in other languages, e.g. tcl,
other subdirectories, e.g. `email/tcl', would be
created.


Library Data: Example Contests
------- ----- ------- --------

Subdirectories of

	hpcm/examples

contain parameter files necessary to set up a specific
type of contest.  Some of these subdirectories are:

    email_contest	Example email contest.

    informal_contest	Example informal contest.

    formal_contest	Example formal contest.

    test_contest	A `test contest' that merely
    			tests the autojudge.

Each of these subdirectories contains a Makefile that
contains documentation on how to use the files in the
subdirectory.  Typically this documentation tells how
to create a contest by making a judging directory, copy-
ing the files in the `hpcm/examples' subdirectory into
the judging directory, editing these copies, etc.


Contest Definition Data: The Judging Directory
------- ---------- ----- --- ------- ---------

A contest is defined by a collection of directories and
files, and by a few lines in parameter files that are
shared among many contests (e.g., ~/.procmailrc).

The heart of the contest is the judging directory.  This
typically has a name of the form:

	~/judging_cccc_ppppppppppp

where cccc is the name of the contest and ppppppppppp is
a string of random numbers and letters that makes the
directory name hard to guess.  The reason for this is
that in order to run JAVA code in a sandbox, all the
directories on the path from the root directory to the
program directories have to have a+x permissions (this
is a security bug in JAVA, surely), so to prohibit out-
siders from getting into the judge's subdirectory tree
it is necessary that the judging directory name be un-
guessable.

Fortunately the judge really does not need to use the
full name of the judging directory except in vary rare
instances, as `~/judging_cccc_*' or the equivalent
suffices.  The judge's account has u+r permission on
directories, so the `*' works for the judge's account,
but there is NO read permission on the directories for
outside users.

The judging directory contains the hpcm_judging.rc file
that defines parameters for the contest.  Whenever most
HPCM programs in hpcm/judge/bin are executed, they
search the current directory and its ancestors for a
file named hpcm_judging.rc.  If a program finds one such
file, it uses that to define the contest parameters, and
uses the directory that file is in as the contest jud-
ging directory.  It is an error if the program finds two
such files.  Therefore, one judging directory cannot be
the ancestor of another judging directory.  However,
one judging account can have many judging directories,
each the root of a disjoint subtree of directories.
Therefore one judging account can judge many contests.

The judging directory contains several components that
define the contest, in addition to many components that
belong to the raw data of the contest, and are listed
elsewhere below.  THe components that define the con-
test are:

    hpcm_judging.rc
        The contest parameters file.

    solutions
        The solution directory for the contest.  Each
	component of the solution directory is a symbol-
	lic link to a problem directory.  Usually these
	problem directories are in the problem library.

	The solutions directory and its contents are
	made automatically by `makejudgingdir'.

    info
        The info directory for the contest.  This only
	exists for email and informal contests, and it
	is the root of a subdirectory tree that holds
	the files that can be obtained by contestants
	using hpcm_get.  Thus the contents of the info
	directory proper are just three subdirectories:
	help, demos, and problems.  These in turn con-
	tain files and subdirectories.  The files
	proper are typically represented by symbolic
	links: see `makejudgingdir' documentation.

	The info directory and its contents are made
	automatically by `makejudgingdir'.

    contest
        The contest directory of the contest.  Actually,
	this is not a subdirectory proper of the judging
	directory, but in the judging directory
	`contest' is symbolically linked to the contest
	directory.  This is because the contest direct-
	ory must be accessible by the contestants, who
	must not be able to access other components of
	the judging directory.

	Only informal and formal contests have a contest
	directory.  Email contests do not.

	The contents of the contest directory are made
	automatically by `makejudgingdir', with the
	exception of a few symbolic links to other
	directories.

    help
        The help directory of the contest.  This is not
	used during the contest proper, but is merely a
	staging error for the `this_contest' help file.
	It contains the following files that are created
	by `makejudgingdir':

	    this_contest
	        The help file particular to the contest.

	    index
	        An index file to be input to `make-
		judgingdir' that lists all the index
		files output by that program and also
		lists the `this_contest' help file.

	The help directory and its contents are made
	automatically by `makejudgingdir', but then
	the person defining the contest must edit the
	`this_contest' file and rerun `makejudgingdir'.

    scoreboard.notes
        A file appended to the scoreboard by the `send-
	scoreboard' program that emails the scoreboard
	to other locations for display on the web.
	This is used only for email contests normally.

In addition to these files which are used by HPCM
programs, there are typically a few other files that
are not used by HPCM directory.  These are:

    Makefile
        The instructions to the UNIX make program so
	that running `make' in the judging directory
	will run `makejudgingdir' to build all the
	contest definition files.  The parameters to
	`makejudgingdir' are complex, and need to be
	kept in a file.

    crontab
        The UNIX crontab file for the judging account,
	or the part thereof that concerns this contest.
	This is used by contests that use `sendscore-
	board' to periodically email the scoreboard to
	another place (where it is typically displayed
	on the web).  Usually only email contests do
	this.
	


Contest Raw Data: The Judging Directory
------- --- ----- --- ------- ---------

The contents of the judging directory are:

    mail
        The mail directory for the contest.  This con-
	tains submissions and requests, each in its own
	subdirectory, with the names of these subdirec-
	tories including the time of the submission or
	request and email address of the submitter or
	requester.

    log
        The log directory of the contest.  Errors that
	are not particular to one submission or request
	are placed here, each in their own file.

    flag
        The flag directory of the contest.  Flag files
	in this directory are created when certain
	events happen that may demand attention from
	background activities, such as scoreboard com-
	putation, and manual review of submissions.

	Specifically, the following are files in the
	flag directory:

	    $score_flag_file
	        Created when any $auto_score_file or
		$manual_score_file file is written;  the
		`makescoreboard' program sees this flag
		and recomputes the scoreboard.

	    $needs_reply_flag_file
	        Created when any action that will re-
		quire a person to use the `manualreply'
		program happens.  The `tracker' program
		sees this flag and then looks throughout
		the contest directories and files to see
		where `manualreply' should be run.

    Scoreboard_PID
        A file containing the process ID of any `make-
	scoreboard' program that is running in back-
	ground.  This file is maintained by the `make-
	scoreboard' program with its `-start' and
	`-stop' options.

	    




"

exit 0

# Include common error catching code:
#
} caught_output
caught_error
