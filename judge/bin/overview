#!/bin/sh
#
# Make judge's overview document.
#
# File:		makeoverview
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Tue Dec  5 06:58:40 EST 2000
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: hc3 $
#   $Date: 2000/12/05 12:43:08 $
#   $RCSfile: overview,v $
#   $Revision: 1.4 $
#
# The next line starts tcl \
exec tcl "$0" "$@"

# Use tcl rather than tclsh so that `signal' is defined.

# Include common code and parameters:
#
set lib_directory "[file dirname $argv0]/../lib"
source $lib_directory/judging_common.tcl
set log_mode none
catch {

puts "
		     HPCM Overview
		     ---- --------

	Features
	Creating a Contest
	Data and Programs
	Library Data

Features
--------

The Harvard Programming Contest Manager, HPCM, has the
following features:

    o Supports different kinds of programming contests:

    	email	    Contestants supply their own ac-
		    counts and communicate with the
		    judge by email to get problems and
		    submit solutions.  Contestants may
		    compete at any time.

	informal    Contestants are given accounts which
		    they can use locally or remotely at
		    any time to get problems and submit
		    solutions.

	formal	    Contestants are given accounts and
		    printouts of problems at a fixed
		    contest starting time.

    o Has an automatic judge, that can be used exclu-
      sively, or as an aid to a human judge.

    o Has a library of problems and supports easy semi-
      automated creation of new contests.

    o Keeps a complete log of everything that happens
      during contests in the form of files that can be
      easily analyzed for different purposes.

    o Is written modularly in TCL and Bourne Shell (sh)
      so that HPCM can easily be adapted and modified.


Creating a Contest
-------- - -------

To create a contest, first read the help files


	hpcm/contestant/help/*/*

to get a good idea of what you are creating.  Choose
the type of contest you want to create (email, informal,
formal) and then read the instructions in

	hpcm/examples/<contest-type>_contest/Makefile

This file also contains basic advice on how to judge
the contest.

You should also read

	hpcm/judge/lib/hpcm_judging.rc

and try to understand the parameters in that file as
best you can.

In order to better understand what you are doing, you
should read the following overview and then read the
individual program documentation for some of the pro-
grams used to set up or judge contests.


Data and Programs
---- --- --------

HPCM handles different categories of data:

Library Data
    Problem descriptions, help documentation files,
    example contest parameter files.

Contest Definition Data
    Files that define a contest, including documentation
    for contestants, problem definition, solution defi-
    nition, and contest parameter definition.

Contest Raw Data
    Files that capture submissions and information gen-
    erated during judging, such as binary program files,
    output files, scores, and email replies.

Contest Derived Data
    Scoreboards and contest tracking summaries.


HPCM also contains several different categories of
programs:

Contestant Programs
    Programs run by contestants during a contest.

Judging Programs
    Programs run to judge a contest.

Contest Making Programs
    Programs run to make a contest.

Maintenance Programs
    Programs run to maintain the library or test the
    HPCM system.

Library Data
------- ----

Each problem (and each demonstration problem) has its
own directory within the problem library.  The last
component of the name of this directory is the name of
the problem, and is also the basename of files describ-
int the problem and solving the problem.

If a problem has name `pppp', then the following files
in the `pppp' directory describe the problem:

    pppp.txt	Problem description.

    Makefile	Gives instructions for compiling and
                running the problem solution.

These files are made available to the contestant, though
in a formal contest only a printout of the pppp.txt file
is made available.

The solution to the problem is written in a file whose
extension indicates the programming language of the
solution.  Typical possibilities are:

    pppp.c	C language solution.
    pppp.cc	C++ language solution.
    pppp.java	JAVA language solution.
    pppp.p	PASCAL language solution.

Different contests may support different languages, so
you need to know what extensions are supported by a
contest.  The Makefile should tell you this.

Compilation creates a binary file named `pppp' and may
create other files for some languages:

    pppp	    The executable program binary.
    pppp*.class	    JAVA class files.
    pppp.p2c	    C translation of PASCAL program.

The solution is written to take input from the standard
input (the terminal by default) and put output to the
standard output (also the terminal by default).  The
Makefile contrives to run the program with resource
limits so the standard input and output are mapped to
a .in file and a .out file.  Running the solution using
the Makefile reads or creates the following files:

    pppp.in	Test input.
    pppp.out	Test output.
    core	Dump of program if it crashes.

Its important to note that the solutions do NOT open any
files.

When a solution is judged it is given a directory by
itself, but there are additional files in this directory
(e.g., a Scoring_Instructions and Auto_Score file), and
the last component of this judging directory's name is
NOT `pppp'.



"

exit 0

# Include common error catching code:
#
} caught_output
caught_error

