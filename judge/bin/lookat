#!/bin/sh
#
# Looks at all the subdirectories of the mail directory
# that have files containing lines matching regular
# expressions.
#
# File:		lookat
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Mon Apr 29 10:48:01 EDT 2002
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: hc3 $
#   $Date: 2002/04/29 14:46:34 $
#   $RCSfile: lookat,v $
#   $Revision: 1.21 $
#
# The next line starts tcl \
exec tcl "$0" "$@"

# Use tcl rather than tclsh so that `signal' is defined.

# Include common code and parameters:
#
set lib_directory "[file dirname $argv0]/../lib"
source $lib_directory/judging_common.tcl
source $lib_directory/display_common.tcl
# (Need display_common.tcl for continue? function.)
set log_mode none
catch {

# Maximum number of bytes in a file that will be read.
#
set size_limit 100000

# Abbreviations for atoms.
#
set gf $gotten_file
set asf $auto_score_file
array set abbreviations "
    SUBJECT	{^$received_file\$::^Subject:}
    AUTO	{^$auto_score_file\$::.}
    MANUAL	{^$manual_score_file\$::.}
    GOTTEN	{^$gf\$::\\.(txt|html|htm|ps)\$}
    NOREPLY	{^$no_reply_file\$::.}
    IO		{^$asf\$::Incorrect Output}
    CC		{^$asf\$::Completely Correct}
    FE		{^$asf\$::Formatting Error}
    IC		{^$asf\$::Incomplete Output}
    SE		{^$asf\$::Syntax Error}
    TE		{^$asf\$::Cpu Time Limit Exceeded}
    PC		{^$asf\$::Program Crashed}
    OE		{^$asf\$::Output Size Limit Exceeded}
"

# Make a list of abbreviations for documentation.
#
proc abbreviations_doc { } {

    global abbreviations

    set result ""
    foreach abbrev [lsort [array names abbreviations]] {
        set result "$result       \
	    $abbrev	$abbreviations($abbrev)\n"
    }
    return $result
}

set document "
lookat 'logical-expression'

    This program executes `manualreply' on each subdi-
    rectory of the mail directory that matches the log-
    ical-expression.  Each atom of the logical expres-
    sion has the form

    	filename-regexp::line-regexp

    and is `true' iff the subdirectory contains a file
    whose filename matches the filename-regexp and whose
    contents contain a line that matches the line-
    regexp.  As special cases, if filename-regexp is
    empty (in which case the `::' can be optionally
    omitted), the line-regexp is matched against the
    submitter's name; and if filename-regexp is `DATE',
    the line-regexp is matched against the submission
    date (formatted as it appears in the subdirectory
    name).

    The atoms `0' and `1' are also specially treated:
    they represent `false' and `true'.

    The allowed operators of the logical-expression are
    `!', `&', `^', and `|' in highest precedence first
    order, denoting `not', `and', `exclusive-or', and
    `inclusive-or'.  Parentheses can be used in the
    logical expression.  Operators and parentheses MUST
    be surrounded by whitespace.

    The regexp's are TCL regular expressions and NOT
    glob expressions.  They may match any part of
    a file name or file line.  A `^' matches the
    beginning of the name or line, and a `\$' matches
    the end of the name or line.

    The logical-expression argument is parsed into a TCL
    list before parts of its atoms are interpreted as
    regular expressions.  This means that in order to
    get a `\\', `\"', `{', or `}' into a regular
    expression, you must put `\\\\', `\\\"', `\\{',
    or `\\}' into the logical-expression argument.
    However, if atoms contain whitespace, they can be
    quoted with \"'s or {}'s.

    There are some abbreviations of atoms that are re-
    cognized, namely the following:

[abbreviations_doc]
    If a file is larger than $size_limit bytes, at most
    the first $size_limit bytes of the file are read.

    After the list of subdirectories is computed, the
    list is displayed.  For each subdirectory and each
    logical expression atom that matches within the
    subdirectory, the first filename and line matched
    for the atom is displayed.  The user of this program
    can execute `manualreply' on a subdirectory by typ-
    ing its number within the list of the subdirector-
    ies.  Upon return from manualreply, the list is re-
    displayed, but it is NOT recomputed.

    Unlike most HPCM judging programs, errors made by
    this program are not written to log files, but are
    written to the standard error output.

    This program is interactive.  A summary of its
    commands is:

        #	Call manualreply on subdirectory # of
		the subdirectory list, where # is
		a strictly positive integer.

	e logical-expression
		Recompute the subdirectory list using
		the new logical expression.

	u	Move up in the subdirectory list.
	p	Ditto (move to previous).

	d	Move down in the subdirectory list.
	n	Ditto (move to next).

	x	Exit.

	control-D
		Exit.

	?	Print help documentation.

	a	Print abbreviations.

    Some examples:

    	lookat '^foo@fee'
	    Lists submissions of `foo@fee...'.

	lookat 'Auto::. & Received::^Subject:'
	    Lists autoscored submissions and for each
	    its Auto_Score file and Received_Mail
	    `Subject:' line.

	lookat 'AUTO & RECEIVED'
	    Ditto in effect, usually, though in this
	    form the file names are more carefully
	    specific.

	lookat '! Auto::. & Received::^Subject:'
	    Lists non-autoscored submissions and for
	    each its Received_Mail `Subject:' line.

	lookat '! Auto::. & ( 1 | Gotten::\\\\.txt\$ )'
	    Lists non-autoscored submissions and for
	    each any Gotten file line for a .txt file.
	    Note '\\\\' becomes `\\' in the regular
	    expression.

	lookat '! AUTO & ( 1 | GOTTEN )'
	    Ditto but file names are more specific and
	    .html, .htm, and .ps Gotten file lines are
	    also listed."

set help "
# = call manualreply on mail subdirectory number # in\
	the subdirectory list

e logical-expression = change the logical expression to\
	a new value.  List
  all the mail subdirectories satisfying the new\
   	expression.  For each
  expression atom that matches a file line, display\
   	the first line matched.

  Note: if you get an empty list, or file lines you\
   	expected are not listed,
  there is a good chance you mistyped the expression.

u = move up in the subdirectory list      \
	p = ditto (previous)
d = move down in the subdirectory list    \
	n = ditto (next)

x = exit      control-D = exit     \
	a = print abbreviations      ? = help
"


# If wrong number of arguments or first argument
# begins with `-doc', print documentation and exit.
#
if { $argc != 1 || [regexp {^-doc} [lindex $argv 0]] } {
    puts $document
    exit 1
}

# Compile logical expression.  For each atom(i),
# filename_regexp(i) and line_regexp(i) are the parts of
# the atom.
#
proc set_expression { expression } {

    global logical_expression compiled_expression \
    	   abbreviations atom value filename_regexp \
	   line_regexp

    set logical_expression $expression

    if { [array exists atom] } { unset atom }
    if { [array exists value] } { unset value }
    if { [array exists filename_regexp] } {
    	unset filename_regexp
    }
    if { [array exists line_regexp] } {
    	unset line_regexp
    }

    set compiled_expression \
	[compile_logical_expression \
	    $expression abbreviations atom value]
    foreach i [array names atom] {

	# Extract f(ilename-)regexp and
	# l(ine-)regexp.
	#
	if { [regexp {^(.*)::(.*)$} $atom($i) \
		     forget fregexp lregexp] } {
	    if {    [regexp {:(:|$)} $fregexp] \
		 || [regexp {(^|:):} $lregexp] } {
		error "Ambiguous atom: `$atom($i)'."
	    }
	} else {
	    set fregexp ""
	    set lregexp $atom($i)
	}

	set filename_regexp($i) $fregexp
	set line_regexp($i) $lregexp
    }
}


# List of directories matched and length of list.
# Manualcount is the number of entries in manualdirs.
# Manuallast is the index+1 of the last directory in
# manualdirs visited by manualreply, or is 0 if there
# is no such.  For each matched directory, there is an
# entry in the manualdirs list of the form
#
#   directoryname {filename line} ...
#
# giving the directory name and for each matched atom,
# the first filename and line that matches for that
# atom.
#
set manualcount 0
set manuallast 0
set manualdirs ""

# Compute list of directories, using compiled
# logical expression.
#
proc compute_directory_list {} {

    global mail_directory atom value filename_regexp \
           line_regexp manualcount manualdirs \
	   manuallast size_limit compiled_expression

    set manualcount 0
    set manuallast 0
    set manualdirs ""

    # Loop through the subdirectory names.
    #
    foreach dir \
	    [lsort \
	       [glob -nocomplain $mail_directory/*]] {

	# Be sure its a submission directory and find
	# submitter and date.

	if { ! [file isdirectory $dir] } continue

	set subdir [file tail $dir]

	if { [regexp {^([^<>]*)-<<(.*)>>-submission$} \
		       $subdir forget date submitter] \
	   } {

	    set submitter [string trim $submitter]
	    if { $submitter == "" } {
		set submitter UNKNOWN
	    }
	} else continue

	# Initialize the atom values.
	#
	foreach i [array names atom] {
	    set value($i) 0
	    set not_file($i) yes

	    if { $filename_regexp($i) == "" } {
		set value($i) \
		    [regexp -- $line_regexp($i) \
		               $submitter]
	    } elseif { $filename_regexp($i) == "DATE" \
	             } { \
		set value($i) \
		    [regexp -- $line_regexp($i) $date]
	    } else {
		set not_file($i) no
	    }
	}

	# Loop through the files.  
	#
	set entry [list $dir]
	foreach file [glob -nocomplain $dir/*] {

	    set filename [file tail $file]
	    set read_yet no

	    # Loop through the atoms.
	    #
	    foreach i [array names atom] {

		if { $value($i) || $not_file($i) } \
		    continue

		if { ! [regexp -- $filename_regexp($i) \
				  $filename] } continue

		if { $read_yet == "no" } {
		    set ch [open $file r]
		    set contents [read $ch $size_limit]
		    set contents [split $contents "\n"]
		    close $ch
		    set read_yet yes
		}

		# Loop through the lines of the file.
		#
		foreach line $contents {
		    if { [regexp -- $line_regexp($i) \
				    $line] } {
			set value($i) 1
			lappend entry \
			        [list $filename $line]
			break
		    }
		}
	    }
	}

	# If logical expression is true, add filename to
	# list.
	#
	if { [expr $compiled_expression] } {
	    incr manualcount
	    lappend manualdirs $entry
	}
    }
}

# List directories and their matching files and lines.
# Output at most `lines'.  Start with the start'th
# directory (1 is first) and return the index (1 is
# first) of the directory after the last listed.
#
# Only complete entries with all matches are listed,
# unless the first entry is too long for the number
# of lines, in which case only some of the matches
# are listed for that entry.  `lines' should be
# at least 3.
#
proc display_directories { lines start } {

    global manualdirs manualcount manuallast

    incr start -1
    set done_some no
    
    while { $start < $manualcount } {

        set entry [lindex $manualdirs $start]
	set dir [file tail [lindex $entry 0]]
	set matches [lrange $entry 1 end]

	set omitted_matches 0
	set lines \
	    [expr { $lines - 2 - [llength $matches] }]
	if { $lines < 0 } {
	    if { $done_some } break

	    set l [llength $matches]
	    incr l -2
	    incr l $lines
	    set matches [lrange $matches 0 $l]
	    set omitted_matches [expr { 1 - $lines }]
	}
	set done_some yes

	incr start
	if { $start == $manuallast } {
	    puts "$start.* $dir"
	} else {
	    puts "$start.  $dir"
	}
	foreach match $matches {
	    set line \
	        "    [lindex $match 0]:\
		     [lindex $match 1]"
	    if { [string length $line] > 80 } {
	        set line \
		    "[string range $line 0 76] ..."
	    }
	    puts $line
	}
	if { $omitted_matches } {
	    puts "    . . . . there are\
	          $omitted_matches more matches . . . ."
	}
	puts ""
    }
    while { $lines > 0 } {
        puts ""
	incr lines -1
    }
    incr start
    return $start
}

# Execute manual reply on the i'th directory.
#
proc exec_manualreply { i } {
    global manualdirs manuallast

    set manuallast $i

    incr i -1
    set entry [lindex $manualdirs $i]
    set dir [lindex $entry 0]

    if { [catch { exec manualreply $dir >&@ stdout }] \
       } {
    	continue?
    }
}


# Set up the interactive loop.
#
set_expression [lindex $argv 0]
compute_directory_list
set directory_height [expr { $window_height - 5 }]
set error_line ""
set start 1

# Run the interactive loop.
#
while { "yes" } {

    puts "\n\n\n\n\n"
    set next \
	[display_directories $directory_height $start]
    puts "#=display directory number #\
          in directory list"
    puts "e new-logical-expression  a=print abbrevs  \
	  u=up  d=down  ?=more help  x=exit"
    puts ""
    if { $error_line == "" \
	 && $manualcount == 0 } {
	set error_line \
	    "There are NO matching directories.  Use\
	     the `e' command."
    }
    puts $error_line
    puts -nonewline "> "

    flush stdout
    set answer [gets stdin]
    if { [eof stdin] } { puts ""; break }
    set answer [string trim $answer]

    set error_line ""
    switch -regexp -- $answer {
	{^[0-9]+$} {
	    if { $answer < 1 || \
		 $answer > $manualcount } {
		set error_line \
		    "ERROR: $answer out of range."
	    } else {
		exec_manualreply $answer

		set step [expr { $next - $start }]
		set start $answer
		if { $step <= 2 } {
		} elseif { $step <= 4 } {
		    incr start -1
		} elseif { $step <= 8 } {
		    incr start -2
		} else {
		    incr start -3
		}

		if { $start < 1 } {
		    set start 1
		}
	    }
	}
	{^p$} -
	{^u$} {
	    set step [expr { $next - $start }]
	    set start [expr { $start - $step }]
	    if { $start < 1 } {
		set start 1
	    }
	}
	{^n$} -
	{^d$} {
	    if { $next <= $manualcount } {
		set start $next
	    }
	}
	"^e[ \t]" {
	    set old_logical_expression \
		$logical_expression
	    if { [catch {
		     set_expression \
			 [lrange $answer 1 end]
		     compute_directory_list
			} \
		    out] } {
		puts $out
		continue?
		set_expression $old_logical_expression
		compute_directory_list
	    }
	    set start 1
	}
	{^a$} {
	    puts ""
	    puts [abbreviations_doc]
	    puts ""
	    continue?
	}
	{^\?} {
	    puts $help
	    puts ""
	    puts "Currently $manualcount\
		  subdirectories are listed and\
		  the logical expression is:"
	    puts ""
	    puts "     $logical_expression"
	    continue?
	}
	{^x$} break
	default {
	    set error_line \
		"ERROR: cannot understand `$answer'."
	}
    }
}

exit 0

# Include common error catching code:
#
} caught_output
caught_error
