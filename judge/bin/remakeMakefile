#!/bin/sh
#
# Remake a problem Makefile made from prototypes.
#
# File:		remakeMakefile
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Thu May 18 05:07:50 EDT 2017
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
#   vi:filetype=tcl
#
# The next lines start tclsh \
trap "echo remakeMakefile: Terminated by Signal" \
    HUP INT QUIT; \
tclsh "$0" "$@"; exit $status

set document "
remakeMakefile \[-keep\] sourcedir\[/DERIVEDFROM\] \\
               problemdir ...

    For each problemdir, this program compiles data
    taken from problemdir/Makefile as follows:

    1.  The HEADER of the Makefile.  These are the
        comment lines at the beginning of the Makefile
	that have something in them other than #'s and
	whitespace.

    2.  The DERIVEDFROM file of Makefile.  This may be
        given as a sourcedir/DERIVEDFROM argument to
	remakeMakefile, or by a problemdir/Makefile line
	of the format:

	    ##*<ws>Derived From:<ws>DERIVEDFROM<ws>

	If given in both ways, the argument value is
	used.

    3.  The VALUE of every variable name <v> for which
        there is a line of the format:

	    <ws><v><ws>=VALUE

    4.  The RCSVALUE of every RCS variable name <r> for
        which there is a line of the format

	    ##*<ws>\$<r>:RCSVALUE\$<ws>

    Here <ws> denotes optional whitespace, i.e., any
    sequence of space and tab characters.  The variable
    names <v> and <r> are any sequences of letters,
    digits, and underbars(_) not beginning with a digit.

    Then this program finds the files

    	sourcedir/DERIVEDFROM		Check File
	sourcedir/DERIVEDFROM.new	Source File

    and modifies them by replacing any HEADER, VALUE,
    and RCSVALUE it finds in them by the corresponding
    data from problemdir/Makefile.   The check file
    must exist but the source file need not exist.

    Then this program compares the modified check file
    with problemdir/Makefile.  If the files exactly
    match and a source file exists and the modified
    source file does not itself exactly match problem-
    dir/Makefile, this program replaces problemdir/
    Makefile with the modified source file.  In any
    case this program reports its results/actions for
    problemdir on a single line.
    
    If problemdir is not actually a directory, or does
    not contain a Makefile, this is merely noted with a
    single output line.

    The -keep option causes the modified check file to
    be written to problemdir/Makefile.check and the
    modified source file, if it exists, to be written
    to problemdir/Makefile.source.  The file problem-
    dir/Makefile is NOT written in this case.

    Unlike most HPCM judging programs, this program does
    not read any hpcm_judging.rc file and errors made by
    this program are not written to log files.
"

# Handle -keep argument.
#
set keep 0
if { [lindex $argv 0] == "-keep" } {
    set keep 1
    set argv [lrange $argv 1 end]
}

# If too few arguments or first argument begins with
# `-', print documentation and exit with error.
#
if { $argc < 2 || [regexp {^-} [lindex $argv 0]] } {
    exec << $document less -F >&@ stdout
    exit 1
}


# Constants
#
set WS "\[\ \t\]*"
set NWS "\[^\ \t\]*"
set HEADERLINE "^\[\ \t\]*#.*\[^#\ \t\]"
set VAR "\[_A-Za-z\]\[_A-Za-z0-9\]*"
set DERIVEDFROMLINE \
    "^##*${WS}Derived From:${WS}(${NWS})${WS}\$"
set VARLINE "^(${WS})(${VAR})(${WS})=(.*)\$"
set RCSVARLINE "^(##*${WS}\\\$)(${VAR}):(.*)(\\\$$WS)\$"

# Sourcedir and DERIVEDFROM arguments.
#
set sourcedir [lindex $argv 0]
if { [file isdirectory $sourcedir] } {
    set DERIVEDFROM ""
} elseif { [file isfile $sourcedir] } {
    set DERIVEDFROM [file tail $sourcedir]
    set sourcedir [file dirname $sourcedir]
} else {
    puts "$sourcedir is not directory or file"
    exit 1
}

# Files, stored in `caches' as lists of lines.
# The headers of these files are omitted!
#
#   Makefile	problemdir/Makefile
#   source      Original (unmodified) Source File
set sourcefile	""
#		Name of Original Source File
#   check       Original (unmodified) Check File
set checkfile   ""
#		Name of Original Check File

# The header of problemdir/Makefile
set header	""

# The value database is stored in the `value' array.
#
# value($v) is the value of variable $v.
# value(RCS.$r) is the value of RCS variable $r.
# value(.DERIVEDFROM.) is the value of DERIVEDFROM;
#    it is copied from the DERIVEDFROM global variable
#    if that is not "".

# Function that takes a line, extracts any data in
# the line, and adds the data to the database.  If
# the database already has the datum, an error
# message is returned.  Otherwise "" is returned.
#
# This function should NOT be applied to header lines.
#
proc extract_line { line } {

    global value DERIVEDFROMLINE VARLINE RCSVARLINE

    if { [regexp $DERIVEDFROMLINE $line forget \
                 filename] } {
	if { [info exists value(.DERIVEDFROM.)] } {
	    return "#... Derived From: ... multiply\
	            defined"
	} else {
	    set value(.DERIVEDFROM.) $filename
	    return ""
	}
    } elseif { [regexp $VARLINE $line forget \
                       ws1 var ws2 val] } {
	if { [info exists value($var)] } {
	    return "$var = ... multiply defined"
	} else {
	    set value($var) $val
	    return ""
	}
    } elseif { [regexp $RCSVARLINE $line forget \
                       prefix var val postfix] } {
	if { [info exists value(RCS.$var)] } {
	    return "#...\$$var:...\$ multiply\
	            defined"
	} else {
	    set value(RCS.$var) $val
	    return ""
	}
    } else {
        return ""
    }
}

# Function that takes a line and returns the line
# modified as appropriate according to the value
# database.  Note that the #...Derived From: line is NOT
# modified (its only for information).  Also note that
# this function should NOT be applied to header lines.
#
proc mod_line { line } {

    global value VARLINE RCSVARLINE

    if { [regexp $VARLINE $line forget \
                 ws1 var ws2 val] } {
	if { [info exists value($var)] } {
	    return "$ws1$var$ws2=$value($var)"
	} else {
	    return $line
	}
    } elseif { [regexp $RCSVARLINE $line forget \
                       prefix var val postfix] } {
	if { [info exists value(RCS.$var)] } {
	    return \
	        "$prefix$var:$value(RCS.$var)$postfix"
	} else {
	    return $line
	}
    } else {
        return $line
    }
}

# Function that reads problemdir/Makefile (which must
# exist), stores it in the global `Makefile' cache,
# stores its header in `header', and sets up the `value'
# database.  Returns an error message or "" if no error.
#
proc read_Makefile { problemdir } {

    global value Makefile header HEADERLINE DERIVEDFROM

    if { [array exists value] } {
	unset value
    }
    set Makefile ""
    set header ""

    set ch [open $problemdir/Makefile r]
    set line [gets $ch]

    # Read header.
    #
    while {    ! [eof $ch] \
            && [regexp $HEADERLINE $line] } {
	lappend header $line
	set line [gets $ch]
    }

    if { $header == "" } {
        close $ch
	return "HEADER is missing from Makefile"
    }

    # Read body of Makefile
    #
    while { ! [eof $ch] } {
	set message [extract_line $line] 
	if { $message != "" } {
	    close $ch
	    return $message
	}
	lappend Makefile $line
        set line [gets $ch]
    }

    # Override Makefile DERIVEDFROM.
    #
    if { $DERIVEDFROM != "" } {
        set value(.DERIVEDFROM.) $DERIVEDFROM
    }

    close $ch
    return ""
}

# Function that reads filename and stores it in the
# cache.  The file must exist and be readable.
# If the named file is already in the cache nothing
# is done.  The header lines of the file are omitted.
#
proc read_file { filename cache } {

    global HEADERLINE

    upvar $cache list
    upvar ${cache}file file

    if { $filename == $file } return

    set list ""

    set ch [open $filename r]
    set line [gets $ch]

    # Skip header
    #
    while {    ! [eof $ch] \
	    && [regexp $HEADERLINE $line] } {
	set line [gets $ch]
    }

    while { ! [eof $ch] } {
	lappend list $line
        set line [gets $ch]
    }

    close $ch
}

# Function that compares `Makefile' with the modified
# cached file and returns 1 if match and 0 if not.
# Header lines are omitted from the comparison.
#
proc compare_file { cache } {

    global Makefile
    upvar $cache file

    set length [llength $Makefile]
    if { [llength $file] != $length } {
        return 0
    }
    set i 0
    while { $i < $length } {
        set Mline [lindex $Makefile $i]
	set fline [mod_line [lindex $file $i]]
	incr i
	if { $Mline != $fline } {
	    return 0
	}
    }
    return 1
}

# Function that writes modified file stored in a cache
# into file.  The header lines are prepended to the
# modified lines from the cache.
#
proc write_file { filename cache } {

    global header
    upvar $cache file


    file delete -force $filename
    set ch [open $filename w]

    foreach line $header { puts $ch $line }
    foreach line $file { puts $ch [mod_line $line] }

    close $ch
}

# Process a single problemdir.  Return a one-line
# message giving disposition.
#
proc process_problemdir { problemdir } {

    global keep value sourcedir \
           source check sourcefile checkfile

    if { ! [file isdirectory $problemdir] } {
        return "$problemdir is not a directory"
    }

    if { ! [file exists $problemdir/Makefile] } {
        return "$problemdir/Makefile does not exist"
    }
    if { ! [file readable $problemdir/Makefile] } {
        return "$problemdir/Makefile is not readable"
    }
    set message [read_Makefile $problemdir]
    if { $message != "" } {
        return "$problemdir/Makefile: $message"
    }

    if { ! [info exists value(.DERIVEDFROM.)] } {
        return "$problemdir/Makefile has\
	        no #...Derived From: ... line"
    }

    set derivedfrom $value(.DERIVEDFROM.)
    if { ! [file readable $sourcedir/$derivedfrom] } {
        return "$problemdir: $sourcedir/$derivedfrom is\
	        not readable"
    }
    read_file $sourcedir/$derivedfrom check

    if { $keep } {
        write_file $problemdir/Makefile.check check
    }

    if { ! [compare_file check] } {
        return "$problemdir/Makefile\
	        does not match modified\
		$sourcedir/$derivedfrom"
    }
    if { ! [file readable $sourcedir/${derivedfrom}.new]
       } {
        return "$problemdir/Makefile matches modified\
	        $sourcedir/$derivedfrom"
    }
    read_file $sourcedir/${derivedfrom}.new source

    if { $keep } {
        write_file $problemdir/Makefile.check check
    }

    if { [compare_file source] } {
        return "$problemdir/Makefile matches modified\
	        $sourcedir/${derivedfrom}.new"
    }

    if { ! $keep } {
	write_file $problemdir/Makefile source
	return "$problemdir/Makefile written from\
	        modified $sourcedir/${derivedfrom}.new"
    } else {
	return "$problemdir/Makefile WOULD HAVE BEEN\
	        written from modified\
		$sourcedir/${derivedfrom}.new but for\
		-keep option"
    }
}

foreach problemdir [lrange $argv 1 end] {

    if { [catch { puts [process_problemdir \
                          $problemdir] }] } {
        puts "SYSTEM ERROR processing $problemdir:"
	puts $errorInfo
    }
}

exit 0
