#! /bin/sh
#
# Make index and list of files
#
# File:		makeindex
# Author:	Bob Walton <walton@deas.harvard.edu>
# Date:		Wed Feb 25 23:20:26 EST 2015
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# The next lines start tclsh \
trap "echo makeindex: Terminated by Signal" \
    HUP INT QUIT; \
tclsh "$0" "$@"; exit $status

set document "
makeindex new_index index web option ...

    Read the index and make the files:

        new_index	   Index
	new_index.html	   WWW index
	new_index.files    List of files to print.
	web/...		   Copies of files in web page
			   directory.

    Lines beginning with `#' in index are deleted,
    as they are comments.

    Otherwise the index is treated as a sequence of
    paragraphs composed of non-blank lines, with blank
    lines separating the paragraphs with one exception.
    Paragraphs are classified as `indented' if their
    first character is a whitespace, `item header'
    (see below), and `non-indented' otherwise.  Non-
    indented paragraphs can be optionally ignored or
    can be special title paragraphs.

    The file syntax is

    	file ::= item-group

	item-group ::= non-indented-paragraph*
	               item
		       item*

	item ::= item-header
	             indented-paragraph*

    Blank lines separate paragraphs except that blank
    lines between an item-header and the first following
    indented-paragraph may be omitted.

    An item-header consists of a single line of the
    format

    	*** FILENAME option ...

    (with possible whitespace before the ***).  Item
    headers are `selected' if any of their options or
    their FILENAME is listed as a makeindex command
    option.  When an item header is selected, the
    following are output to both new_index and
    new_index.html in order:

	All non-ignored, non-title, non-indented para-
	graphs since the previous item header, if any.

	The item header if FILENAME does not name a
	directory.

	All indented paragraphs after the item header
	and before the next item header or non-indented
	paragraph.

    An indented paragraph is a `file list' if it is
    preceded by an item header and possible intervening
    indented paragraphs, if the FILENAME in the item
    header names a directory, and if each line of the
    indented paragraph begins with a whitespace sur-
    rounded NAME that contains no whitespace and which,
    when viewed as a relative filename, names a file in
    the directory specified by the item header FILENAME.

    This program writes a file named new_index.files
    that is just a list of file names.  The name of
    the new_index file is written first.  Then when an
    item header whose FILENAME does NOT name a directory
    is selected, FILENAME is written.  And when a
    `file list' is recognized, the names of the files
    listed are written.

    Files that are listed in new_index.files are also
    copied to the web directory, if it is not \"\",
    except that new_index.html is also copied (in
    addition to copying new_index).  These copies are
    made read-only to everyone.
    
    The directory names in the FILENAMEs given in item
    headers and the file names given in file lists
    are the names of the subdirectories in `web' in
    which the copied file will appear, and are not the
    names of the directories in which the original of
    the file appears.  In new_index.files these `web'
    directory names are replaced by the names of the
    directories in which the original file appears.

    When an item header is output, the options are
    deleted and the `***'s are converted to 3 spaces.

    A paragraph that begins with

        *TITLE* option ...

    is a title paragraph that is `selected' if any of
    its options is listed as as a makeindex command
    option, and ignored otherwise.  If selected the
    paragraph (without the *TITLE* first line) is output
    to new_index (under the presumption that this is the
    first thing output to new_index).  The first line
    of the title paragraph has the right adjusted date
    prepended, while the other title paragraph lines are
    output as is.

    Title paragraphs that are selected should appear
    before any other paragraph that is selected.  But
    as a special case, non-indented paragraphs that
    are immediately before a selected title paragraph
    are ignored.

    A non-indented paragraph that begins with

        *OPTIONAL* option ...

    is `selected' if any of its options is listed as
    as a makeindex command option, and ignored other-
    wise.  Selected non-indented paragraphs are treated
    as other non-title, non-indented paragraphs except
    the `*OPTIONAL* ...' line is not output.

    All non-item header paragraphs are output as is to
    the new_index, unless they are ignored or title
    non-indented paragraphs.  Non-indented paragraphs
    ending in a line containing just `-'s are preceded
    by two blank lines, and other paragraphs are
    preceded by one blank line, except that the blank
    line between an output (non-directory) item header
    and an indented paragraph immediately following the
    item header is suppressed in the output if it does
    not appear in the input.

    Output to new_index.html is as follows:

        If a non-indented paragraph ends in a line con-
	taining just `-'s, then all lines containing
	just `-'s are deleted from the paragraph, and
	the paragraph is surrounded by <H3>...</H3>.
	Otherwise the paragraph is surrounded by
	<P>...</P>.

	If an indented paragraph is a file list, it is
	output as an indented table with the file names
	as links.  Otherwise the paragraph is surrounded
	by <P>...</P>.

	<BLOCKQUOTE>...</BLOCKQUOTE> is used to indent
	item headers and indented paragraphs appearing
	between non-indented paragraphs, and to indent
	indented paragraphs appearing between item
	headers.

	Titles are not output to new_index.html.  The
	new_index.html file is designed to be appended
	to another file not made by makeindex.

    Unlike most HPCM judging programs, this program does
    not read any hpcm_judging.rc file and errors made by
    this program are not written to log files.
"

set WS "\[\ \t\]"
set NWS "\[^\ \t\]"

# Given a directory name `dir' and a paragraph `p',
# check if each line of the paragraph has the form
#
#   ${WS}*${NAME}${WS}+${REST}${WS}*
#
# where NAME contains no whitespace and REST does not
# begin or end with whitespace (and may be empty), and
# where $dir/$NAME names an existing ordinary file (or
# symbolic link to such).  If NO, return the empty list.
# Otherwise return a list with one element per line
# consisting of
#
#	{ NAME REST }
#
proc is_file_list { p dir } {
    global WS NWS
    set result {}
    foreach line $p {
        if { ! [regexp "^$WS*($NWS+)(|$WS.*)\$" \
	               $line forget \
		       name rest] } {
	    return {}
	}
	if { ! [file isfile $dir/$name] } {
	    return {}
	}
	lappend result \
	        [list $name [string trim $rest]]
    }
    return $result
}

# Copy a file's name to fch and the file itself to web
# if the latter is not "".  The file is located
# at src and is to be copied to web/dst.
#
proc print_and_copy_file { fch web src dst } {
    puts $fch $src
    if { $web != "" } {
	file mkdir [file dirname $web/$dst]
	file copy -force $src $web/$dst
	file attributes $web/$dst -permissions r--r--r--
    }
}

# Given the result r of is_file_list above, output
# to wch the html for the file list.  Here dirname is
# the item header FILENAME.
#
proc file_list_to_html { wch r dirname } {
    puts $wch "<TABLE>"
    foreach line $r {
        set name [lindex $line 0]
	set rest [lindex $line 1]
        puts $wch "<TR><TD WIDTH=\"20\"></TD>"
        puts $wch "    <TD><A HREF=\"$dirname/$name\">"
        puts $wch "        $name</TD>"
        puts $wch "    <TD WIDTH=\"20\"></TD>"
        puts $wch "    <TD>$rest</TD>"
        puts $wch "</TR>"
    }
    puts $wch "</TABLE>"
}

# Output non-indented paragaph to html.  If there is
# any line containing just `-'s and spaces, delete all
# such lines and use <H3>...</H3>.  Otherwise delete no
# lines and output <P>...</P>.
#
# Return 1 if some line contained just `-'s, and 0
# otherwise.
#
proc p_to_html { wch p } {
    global WS
    set use_h 0
    foreach line $p {
        if { [regexp "^$WS*\-\[ \t-\]*\$" $line] } {
	    set use_h 1
	}
    }
    if { $use_h } {
        puts $wch "<H3>"
	foreach line $p {
	    if { ! [regexp "^$WS*\-\[ \t-\]*\$" \
	                   $line] } {
		puts $wch $line
	    }
	}
        puts $wch "</H3>"
    } else {
        puts $wch "<P>"
	foreach line $p { puts $wch $line }
        puts $wch "</P>"
    }
    return $use_h
}

# Return true iff option_list contains a makeindex
# option argument.
#
proc is_selected { option_list } {
    global options
    foreach option $options {
	if { [expr [lsearch -exact \
			     $option_list \
			     $option] >= 0] } {
	    return 1
	}
    }
    return 0
}

# If too few arguments or first argument begins with
# `-', print documentation and exit with error.
#
if { $argc < 4 || [regexp {^-} [lindex $argv 0]] } {
    exec << $document less -F >&@ stdout
    exit 1
}

set new_index [lindex $argv 0]
set files "${new_index}.files"
set html "${new_index}.html"
set index [lindex $argv 1]
set indexdir [file dirname $index]
set web [lindex $argv 2]
set options [lrange $argv 3 end]
set date [exec date]

if { [catch { set hich [open $new_index w] }] } {
    puts "ERROR: could not open $new_index for writing"
    exit 1
}
if { [catch { set wch [open $html w] }] } {
    puts "ERROR: could not open $html for writing"
    exit 1
}
if { [catch { set fch [open $files w] }] } {
    puts "ERROR: could not open $files for writing"
    exit 1
}
if { [catch { set ich [open $index r] }] } {
    puts "ERROR: could not open $index for reading"
    exit 1
}

puts $fch $new_index

set p {}
    # current paragraph - a list of lines
set in_p 0
    # 1 if p holds partial paragraph, 0 otherwise
set blank_count 0
    # number of input blank lines preceding current
    # input paragraph, where item headers that are not
    # output are ignored as if they did not exist
set ps {}
    # list of previous non-indented paragraphs

set item_name ""
    # item_name if last item selected, "" otherwise
set item_directory ""
    # [dirname $index]/$item_name if last item is
    # selected and names a directory, "" otherwise
set istate ""
    # set to type of paragraph last input:
    #    "", item_header, indented, non_indented,
    #        title, ignore
set ostate ""
    # set to type of paragraph last output:
    #    "", item_header, indented, non_indented
set in_outer_blockquote 0
    # 1 if there is unclosed outer <BLOCKQUOTE>.
    # An outer blockquote is one that brackets
    # all outputted item headers and indented
    # paragraphs following an outputted non-indented
    # paragraph.
set in_inner_blockquote 1
    # 1 if there is unclosed inner <BLOCKQUOTE>.
    # An inner blockquote is one that brackets
    # all outputted indented paragraphs following
    # an outputted item header.

while { ! [eof $ich] } {
    set line [gets $ich]
    if { [eof $ich] || [regexp "^$WS*\$" $line] } {
        if { ! $in_p } {
	    incr blank_count
	} else {
	    
	    # Finish current paragraph.

	    if {    [llength $p] == 0 \
	         || $istate == "ignore" } {

	        # Do nothing if zero length paragraph

	    } elseif { $istate == "title" } {

		# Clear out previous non_indented
		# paragraphs.
		#
		set ps {}

		# Output title paragraph
		#
		set title [lindex $p 0]
		set count \
		    [expr 56 - [string length $title] \
			     - [string length $date]]
		set tline "$title[string repeat " " \
		                         $count]$date"
		puts $hich $tline
		foreach nl [lrange $p 1 end] {
		    puts $hich $nl
		}
		puts $hich ""

	    } elseif { $istate == "non_indented" } {

		# Save non-indented paragraph
		#
		lappend ps $p

	    } elseif { $item_name != "" } {

		# Output indented paragraph

		if { $ostate == "non_indented" } {

		    puts $wch "<BLOCKQUOTE>"
		    set in_outer_blockquote 1

		} elseif { $ostate == "item_header" } {

		    puts $wch "<BLOCKQUOTE>"
		    set in_inner_blockquote 1
		}
		set ostate indented

		if { $blank_count > 0 } {
		    puts $hich ""
		}
		foreach l $p { puts $hich $l }

		if { $item_directory == "" } {
		    set r {}
		} else {
		    set r [is_file_list \
		               $p $item_directory ]
		}
		if { $r == {} } {
		    puts $wch "<P>"
		    foreach l $p { puts $wch $l }
		    puts $wch "</P>"
		} else {
		    file_list_to_html \
		        $wch $r $item_name
		    foreach l $r {
			set f [lindex $l 0]
			set src "$item_directory/$f"
			set dst "$item_name/$f"
		        print_and_copy_file \
			    $fch $web $src $dst
		    }
		}
	    }
	    set in_p 0
	    set p {}
	    set blank_count 1
	}
    } elseif { [regexp "^$WS*#" $line] } {
        continue
    } elseif { $in_p } {
        lappend p $line
    } else {

        # Start new paragraph

	if {    ! [catch { set len [llength $line] }] \
	     && $len >= 2 \
	     && [lindex $line 0] == "***" } {

	    # item header line

	    if { $in_inner_blockquote } {

		puts $wch "</BLOCKQUOTE>"
		set in_inner_blockquote 0
	    }

	    set item_name ""
	    set item_directory ""

            if { [is_selected [lrange $line 1 end]] } {

		set item_name [lindex $line 1]

	        # Output selected item header

		if { $ps != {} } {

		    if { $in_outer_blockquote } {

			puts $wch "</BLOCKQUOTE>"
			set in_outer_blockquote 0
		    }

		    # Output non-indented paragraphs

		    foreach np $ps {
			if { [p_to_html $wch $np] } {
			    puts $hich ""
			}
			puts $hich ""
			foreach l $np {
			    puts $hich $l
			}
		    }
		    set ps {}
		    set ostate non_indented
		}

		set item_directory \
		  "[file dirname $index]/$item_name"
		if { ! [file isdirectory \
			     $item_directory] } {

		    print_and_copy_file \
			$fch $web $item_directory \
				  $item_name

		    set item_directory ""

		    # Output item header

		    if { $ostate == "non_indented" } {

			puts $wch "<BLOCKQUOTE>"
			set in_outer_blockquote 1
		    }

		    puts $hich ""
		    regsub "\\*\\*\\*" $line "   " \
			   line
		    regexp "^($WS*)$NWS" $line \
			   forget outline
		    set outline \
			"$outline[file tail \
				       $item_name]"
		    puts $hich $outline
		    puts $wch "<P>"
		    puts $wch \
			 "<A HREF=\"$item_name\">\
			  [file tail $item_name]</A>"
		    puts $wch "</P>"

		    set ostate item_header
		    set blank_count 0
		}
	    }

	    set istate item_header

	} elseif { [regexp "^$NWS" $line] } {

	    # Input non-indented paragraph

	    if { $istate != "" \
	         && \
		 $istate != "ignore" \
	         && \
		 $istate != "non_indented" } {
	        set ps {}
	    }

	    set in_p 1
	    set p {}

	    if { ! [catch { llength $line }] } {
	        if {    [lindex $line 0] \
		     == "*OPTIONAL*" } {
		    if { [is_selected \
		              [lrange $line 1 end]] } {
		        set istate non_indented
		    } else {
		        set istate ignore
		    }
		} elseif {    [lindex $line 0] \
		           == "*TITLE*" } {
		    if { [is_selected \
		              [lrange $line 1 end]] } {
		        set istate title
		    } else {
		        set istate ignore
		    }
		} else {
		    lappend p $line
		    set istate non_indented
		}
	    } else {
		lappend p $line
		set istate non_indented
	    }

	} else {

	    # Input indented paragraph

	    if { $istate == "" } {
	        puts "ERROR: indented paragraph at\
		      beginning of $index"
		exit 1
	    } elseif { $istate == "non_indented" } {
	        puts "ERROR: indented paragraph\
		      immediately follows non-indented\
		      paragraph"
		puts "       in $index"
		exit 1
	    }

	    set in_p 1
	    set p {}
	    lappend p $line

	    set istate indented
	}
    }
}

if { $in_inner_blockquote } {
    puts $wch "</BLOCKQUOTE>"
}
if { $in_outer_blockquote } {
    puts $wch "</BLOCKQUOTE>"
}

close $hich
close $fch
close $wch
close $ich

if { $web != "" } {
    file copy -force "${new_index}"  \
		     "${web}/${new_index}"
    file attributes "${web}/${new_index}" \
         -permissions r--r--r--
    file copy -force "${new_index}.html"  \
		     "${web}/${new_index}.html"
    file attributes "${web}/${new_index}.html" \
         -permissions r--r--r--
}

exit 0
