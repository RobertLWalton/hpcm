#!/bin/sh
#
# Given a submission directory, dispatch any automatic
# programs, such as `autojudge' and `autoinfo'.
#
# File:		autodispatch
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Thu Oct 27 11:27:30 EDT 2005
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: hc3 $
#   $Date: 2005/10/27 15:31:12 $
#   $RCSfile: autodispatch,v $
#   $Revision: 1.23 $
#
# The next line starts tcl \
exec tcl "$0" "$@"

# Use tcl rather than tclsh so that `signal' is defined.

# Compute absolute name of current directory as we
# may change the current directory.
#
set current_directory [file dirname $argv0]
if { ! [regexp {^/} $current_directory] } {
    set current_directory [pwd]/$current_directory
}

# If an subdirectory name is given, make it current, and
# consume the subdirectory name argument.  This must be
# done before looking for the parameters file.
#
# Don't change argc or argv so error output will work.
#
set my_argc $argc
set my_argv $argv
if { $my_argc >= 1 \
     && ! [regexp {^-} [lindex $my_argv 0]] } {
    cd [lindex $my_argv 0]
    puts "Changed directory to [lindex $my_argv 0]"
    set my_argv [lrange $my_argv 1 end]
    incr my_argc -1
}

# Include common code and parameters:
#
set lib_directory "$current_directory/../lib"
source $lib_directory/judging_common.tcl
catch {

set document "
autodispatch \[directory\] \[-force\]

    If the directory argument is given, this program
    makes that directory current before searching for
    the `hpcm_judging.rc' file or doing anything else.

    After this program reads the hpcm_judging.rc file,
    this program next creates the Dispatch_PID file
    containing the process ID of this program's process.
    If this file already exists, this program exits
    without error or output.

    When this program exits, it deletes any Dispatch_PID
    file it created.

    This program then exits without error or output if
    any of the files:

    	Reply_Mail
    	No_Reply
	*-<<*>>-unchecked-error
	*-<<*>>-checked-error

    exist.  The `-force' option deletes the last entry
    in this list.

    Otherwise, if the use_authentication global variable
    equals `yes', this program next authenticates the
    mail in Received_Mail file.  If the mail is NOT
    authentic, this program produces an error log file
    and exits without error code or output.

    Next this program inspects the `Subject' line in the
    current directory's Received_Mail file and based on
    this may call one of the following:
    
	autojudge
	autoinfo

    In general, it calls the program indicated by the
    `autodispatch_map' array element for the first word
    (list element) of the subject field, if the subject
    field is a valid non-empty TCL list, and the array
    element is defined.  Otherwise, no program is call-
    ed.

    If no program is called and if the reply mode is
    `auto', this program will compose a reply.  If the
    `reply_manager' variable is NOT \"\", the reply is
    CC'ed to the value of this variable, and the reply
    says the person at this email address may respond.
    Otherwise, if the `reply_manager' variable is \"\",
    the reply says that no-one will look at the mes-
    sage.

    If no program is called and if the reply mode is NOT
    `auto', this program will NOT compose a reply, but
    will instead set the `needs reply' flag (the flag
    directory Needs_Reply_Flag file).  This signals
    other programs (e.g. tracker) that they should
    search for submission directories for which the man-
    ualreply program should be called.

    Finally this program exits without error.

    This program records what it is doing on the stand-
    ard output and in the autodispatch.log file."

# Check for and consume -force option.
#
set force_option no
if { $my_argc >= 1 \
     && [lindex $my_argv 0] == "-force" } {
    set force_option yes
    set my_argv [lrange $my_argv 1 end]
    incr my_argc -1
}

# If there are leftover arguments, print document and
# exit with error.
#
if { $my_argc != 0 } {
    puts $document
    exit 1
}

# Open autodispatch.log file.
#
set logch [open autodispatch.log a]
#
proc putlog { message } {
    global logch
    puts $logch $message
    puts $message
}
# Set exit_cleanup function (called before all exits
# in judging common code) to close log channel.
#
proc exit_cleanup {} {
    global logch
    close $logch
}
#
putlog "----------------------------------------"
putlog "Starting autodispatch:\
        [clock format [clock seconds]]"

# Lock current directory with Dispatch_PID.  Exit if
# directory already locked.
#
if { [dispatch_lock] == "no" } {
    putlog "Could not create Dispatch_PID: exiting"
    exit 0
}

# Set exit_cleanup function (called before all exits
# in judging common code) to unlock current directory.
#
proc exit_cleanup {} {
    global logch
    dispatch_unlock
    close $logch
}

# If one of several files exists, exit without error.
#
set patterns [list Reply_Mail No_Reply \
		   *-<<*>>-unchecked-error ]
if { $force_option == "no" } {
    lappend patterns *-<<*>>-checked-error
}
if { [llength [eval glob -nocomplain $patterns]] \
     != 0 } {
    putlog "Significant files aleady exist: exiting"
    exit_cleanup
    exit 0
}

# Read header.
#
set received_ch [open Received_Mail r]
read_header $received_ch
close $received_ch

# Check authentication if $use_authentication is `yes'.
# If not authenticated, write log error and exit.
#
if { [header_is_authentic] == "no" } {
    error "Received message header is not authentic"
}

# Execute any program appropriate to the subject.
#
if {  ! [catch { set s [lindex $message_subject 0] }] \
     && [llength $message_subject] >= 1 \
     && [info exists autodispatch_map($s)] } {
    set program $autodispatch_map($s)
    putlog "Executing $program"
    catch { exec $autodispatch_map($s) } out
    putlog $out

# Else if special error test request call error.
#
} elseif { [regexp {error test 908374693717092149} \
		   $message_subject] } {
    error "Test of the error response system."

# Else if `auto' reply_mode, reply.
#
} elseif { $reply_mode == "auto" } {
    putlog "Sending reply as no program is available to\
            call."
    if { $reply_manager != "" } {
	reply -cc \
	      { LINE "This message cannot be properly\
	              answered automatically," } \
	      { LINE "and there is no person to prompty\
	      	      answer this message." } \
	      BLANK \
	      { LINE "Please fix the subject field or\
	              wait for" } \
	      "LINE {a response from $reply_manager}" \
	      BLANK \
	      {BAR "this message replies to:"} \
	      RECEIVED-FULL-HEADER \
	      BLANK \
	      RECEIVED-BODY
    } else {
	reply \
	      { LINE "This message cannot be properly\
	              answered automatically," } \
	      { LINE "and there is no person to prompty\
	      	      answer this message." } \
	      BLANK \
	      { LINE "Please fix the subject field or\
	              send the message elsewhere." } \
	      BLANK \
	      {BAR "this message replies to:"} \
	      RECEIVED-FULL-HEADER \
	      BLANK \
	      RECEIVED-BODY
    }

# Else if `auto+manual' or `manual' reply mode: this is
# manual case, and another program will see there is no
# Reply_Mail, no No_Reply, no Dispatch_PID, etc., and
# that the subject is unsuitable for autodispatch, and
# then this other program will schedule manual action.
#
} else {
    putlog "Setting Needs_Reply_Flag as no program is\
            available to call."
    set_flag Needs_Reply_Flag
}

exit_cleanup
exit 0

# Include common error catching code:
#
} caught_output
putlog "ERROR caught: exiting"
putlog $caught_output
caught_error
