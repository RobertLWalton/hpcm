#! /bin/sh -f
#
# Compute the judge.score file in a submission directory
#
# File:		judge
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Wed Aug 16 06:43:27 EDT 2000
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: acm-cont $
#   $Date: 2000/08/18 11:25:19 $
#   $RCSfile: autojudge,v $
#   $Revision: 1.8 $
#
# The next line starts tcl \
exec tcl "$0" "$@"

# Include common code and parameters:
#
set lib_directory "[file dirname $argv0]/../lib"
source "$lib_directory/judging_common.tcl"

set document "
cd submission_directory; judge [-auto]

    Given the submission directory as the current dir-
    ectory, and given that the submission directory
    contains the submission file pppp.ee, where .ee is
    a legal extension such as .c, .cc, .java, etc.,
    this `judge' program computes the `judge.scores'
    file, first computing all intermediate files
    required, such as `pppp' and `pppp.out'.

    TBW"

if { $argc == 0 } {
    set autoscore no
} elseif { $argc == 1 && [lindex $argv 0] == "-auto" } {
    set autoscore yes
} else {
    puts $document
    exit 1
}

proc error_for_score_file { args } {
    global score_file
    set score_fd [open $score_file w]
    puts $score_fd [lindex $args 0]
    puts "ERROR: [lindex $args 0]"
    set args [lreplace $args 0 0]
    foreach m $args {
	puts $score_fd $m
    	puts "       $m"
    }
    close $score_fd
    exit 1
}

proc submission_error { args } {
    eval "error_for_score_file {Submission Error} $args"
}

puts "Allowed extensions: $allowed extensions"

set score_file [glob -nocomplain "*.score"]

if { [llength $score_file] == 1 } {
    if ( ! [file readable $score_file] } {
        fatal_error "cannot read $score_file"
    }
    set score_fd [open $score_file r]
    set score [gets $score_fd]
    close $score_fd
    if { $score != "Defer Scoring" } {
        puts "Score file exists"
	exit 0
    }
    file delete -force $score_file
}
else if { [llength $score_file] > 1 } {
    fatal_error "too many score files: $score_file"
}

set submitted_file ""

foreach e $allowed_extensions {
    foreach f [glob -nocomplain "*.$e"] {
    	lappend submitted_file $f
    }
}

set submitted_program [file rootname $submitted_file]
set submitted_extension [file extension $submitted_file]

set solution_dir = "../$submitted_program"

if { ! [file isdirectory $solution_dir] } {
    [submission_error "unknown program name: $submitted_program]
}

if { ! [file readable Makefile] } {
    puts "Linking Makefile"
    exec ln -s $solution_dir/Makefile .
}

if { ! [file readable ${submitted_program}.in] } {
    puts "Linking ${submitted_program}.in"
    exec ln -s $solution_dir/${submitted_program}.in .
}

if { ! [file readable ${submitted_program}.test] } {
    puts "Linking ${submitted_program}.test to ${submitted_program}.out"
    exec ln -s $solution_dir/${submitted_program}.out \
               $solution_dir/${submitted_program}.test
}

if { ! [file readable $submitted_program] \
     || [file mtime $submitted_program \
           < [file mtime Makefile] \
     || [file mtime $submitted_program \
           < [file mtime $submitted_file] } {

    if { [file exists $submitted_program] } {
	puts "Deleting out-of-date $submitted_program"
    	file delete -force $submitted_program
    }
    puts "Making ${submitted_program}"
    if { [catch { exec make $submitted_program } \
                out] } {
        puts $out
        error_for_score_file "Syntax Error"
    }
    puts $out
    exec chmod a+x $submitted_program
}

if { ! [file readable "${submitted_program}.out" \
     || [file mtime "${submitted_program}.out"] \
           < [file mtime Makefile] \
     || [file mtime "${submitted_program}.out"] \
           < [file mtime $submitted_program] \
     || [file mtime "${submitted_program}.in"] \
           < [file mtime "${submitted_program}.in"] } {

    if { [file exists "${submitted_program}.out"] } {
	puts "Deleting out-of-date ${submitted_program}.out"
    	file delete -force "${submitted_program}.out"
    }

    if { [file exists "${submitted_program}.err"] } {
	puts "Deleting out-of-date ${submitted_program}.err"
    	file delete -force "${submitted_program}.err"
    }

    puts "Making ${submitted_program}.out"
    exec make "$submitted_program.out"
}

set score [exec autoscore $submitted_program]

if { $auto == "no" && $score != "Completely Correct" } {
    exec manualscore $submitted_program
}

exit 0
