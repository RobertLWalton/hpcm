#! /bin/sh
#
# Re-run the autojudge on contest data.
#
# File:		rerun_contest
# Author:	Bob Walton <walton@deas.harvard.edu>
# Date:		Fri Sep 26 22:03:55 EDT 2014
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: walton $
#   $Date: 2014/09/27 02:09:26 $
#   $RCSfile: rerun_contest,v $
#   $Revision: 1.17 $
#
# The next lines start tclsh \
trap "echo rerun_contest: Terminated by Signal" \
    HUP INT QUIT; \
tclsh "$0" "$@"; exit $status

# Include common code and parameters:
#
set log_disable yes
set lib_directory "[file dirname $argv0]/../lib"
source $lib_directory/judging_common.tcl
catch {

set document "
rerun_contest COMMAND \\
    \[-force|-source SRCDIR|-target TARDIR\] \\
    \[PROBLEM_RE \[SUBMITTER_RE \[DATE_RE\]\]\]

    Executes a COMMAND that involves rerunning the
    autojudge on submissions.  COMMAND may be rerun,
    copy, copyall, redo, repair, diff, look, or remove.
    For example, rerun copies a submission in the source
    directory to the target directory and runs autojudge
    on the copy.

    The source directory defaults to `./mail', and the
    target directory defaults to `./rerun'.  All runs
    of autojudge are executions of `autojudge -rerun'
    with the standard output and standard error being
    captured in a new `autodispatch.log' file in the
    submission directory, just as autodispatch would do.

    The submissions chosen are those in the source di-
    rectory whose submission directories have names con-
    taining a date with a substring matching DATE_RE and
    a submitter with a substring matching SUBMITTER_RE,
    and whose Received_Mail header contains a subject
    header line with a substring matching the regular
    expression \"submit.*PROBLEM_RE\".
	
    Matches are case insensitive and the RE's all
    default to \"\".

    The `redo' command with `-target ./mail' option can
    be used to rerun autojudge for selected submissions
    of a contest in progress, e.g., for selected
    problems.

    This program may be run in a copy of a judging di-
    rectory and its subdirectories made using `cp -r'
    or `tar cf, tar xf'.

    The rerun, redo, and repair commands begin by re-
    pairing any broken links in the `solutions' subdi-
    rectory of the judging directory.  If this fails for
    some link, this program stops unless it is given the
    `-force' option.  This program also stops and does
    nothing if it finds a broken link and ./contest is
    an existing directory, unless the `-force' option is
    given.  This last is a safety measure.

    If used during a normal contest, no `solutions' sub-
    directory links should be broken, and this step
    should do nothing.

    To repair a link named P, this program selects the
    first of the following directories that exist:

		~/hpcm/problem_library
		\$hpcm_directory/problem_library
		
    In the selected directory this program searches
    for the following in order:

		demos/P
		public/P
		private/P

    and uses the first of these that is a directory.

    The `repair' command just repairs links, and does
    nothing else.

    The rerun, copy, copyall, and redo commands create
    the target directory if that does not exist.  These
    commands also set a+x permissions on the target di-
    rectory, its parent, and the parent of its parent,
    so that JAVA will work.

    All the commands iterate over all submission subdi-
    rectories S in the source directory that have a
    Received_Mail file such that the name of S and the
    subject of the Received_Mail file match the RE's
    given by the arguments or their defaults.  The fol-
    lowing are the details for each command for a given
    submission S, where ./mail is the source directory
    and ./rerun is the target directory.

    rerun

        If the directory ./rerun/S does not already
	exist:

	    (1) Copy ./mail/S to ./rerun/S.  Symbolic
	        links are copied as symbolic links.
		Permissions and dates are preserved.
	    (2) Execute `autojudge -rerun' in
	        ./rerun/S.  Note that if this changes
		the value of Auto_Score, the old value
		is preserved in Old_Auto_Score.
	    (3) Print a note indicating the results from
	        the above steps.  If ./mail/S/Received_
		Mail does not exist or is not readable,
		none of the above are done and only the
		note is printed.

	Note: `lookat -rerun OLDAUTO' will find all the
	rerun submissions with an Old_Auto_Score file,
	and `lookat -rerun RERUN' will find all with
	both Old_Auto_Score and Auto_Score files.

    copyall

        Same as `rerun' but skip running autojudge (2).

    copy

        Same as `copy' but only ./mail/S/Received_Mail
	is copied to ./rerun/S.

    redo

        Same as `rerun' except step (1), copying
	./mail/S to ./rerun/S, is omitted.  ./rerun/S
	must already exist.

	Note: S is selected by examining ./mail/S, NOT
	./rerun/S.  Both source and target are used.

    look

        Print S and the contents of the following in the
	./mail/S directory:

		Received_Mail subject field
		Auto_Score file
		Old_Auto_Score file
		Manual_Score file

    diff

	Compare ./mail/S and ./rerun/S.  If they have
	different Auto_Score files, print S and the
	contents of the following:

		Received_Mail subject field
		Auto_Score file in each directory
		Old_Auto_Score file in each directory
		Manual_Score file in each directory

    remove

    	Delete ./rerun/S.

	Note: S is selected by examining ./mail/S, NOT
	./rerun/S.  Both source and target are used."

# Abbreviations:
#
set j_d [truename $judging_directory]
set pwd [pwd]

# Process options.
#
set force 0
set source $j_d/mail
set sourceabbrev ./mail
set target $j_d/rerun
set targetabbrev ./rerun
set myargv $argv
set command [lindex $myargv 0]
set myargv [lrange $myargv 1 end]
if { [regexp {^-doc} $command] } {
    puts $document
    exit 1
}
while { 1 } {
    set arg [lindex $myargv 0]
    set skip 1
    switch -glob -- $arg {
    -force { set force 1 }
    -source { set source [lindex $myargv 1]
	      set sourceabbrev .../[file tail $source]
              set skip 2 }
    -target { set target [lindex $myargv 1]
	      set targetabbrev .../[file tail $target]
              set skip 2 }
    default break
    }
    set myargv [lrange $myargv $skip end]
}
set problem_re   [lindex $myargv 0]
set submitter_re [lindex $myargv 1]
set date_re      [lindex $myargv 2]

# Check command.
#
if { ! [lcontain {rerun copy copyall redo repair \
                  look diff remove} \
                 $command] } {
    error "Bad command: $command"
}

puts "Judging directory is:"
puts "    $j_d"

# Calculate arguments.
#
set problem_re "submit.*$problem_re"
set len  [string length $sourceabbrev]
set len2 [string length $targetabbrev]
if { $len2 > $len } { set len $len2 }
set sourcetag [format "%${len}s" $sourceabbrev]
set targettag [format "%${len}s" $targetabbrev]

# Repair solutions links.
#
if { [lcontain {rerun redo repair} $command] } {

    set c_d_exists [file isdirectory $j_d/contest]

    # Set p_l to program_library directory.
    #
    set p_l_list [list $env(HOME)/hpcm/problem_library \
		       $hpcm_directory/problem_library]
    set p_l ""
    foreach d $p_l_list {
	if { [file isdirectory $d] } {
	    set p_l [truename $d]
	    break
	}
    }

    # Iterate over links.
    #
    set all_ok 1
    foreach ltarget \
	    [lsort [glob -nocomplain \
	                 $j_d/solutions/*]] {
	if {    ! [catch { set type \
	                       [file type $ltarget] }] \
	     && $type == "link"
	     && ! [file exists $ltarget] } {

	    set name [file tail $ltarget]

	    # Broken link found.

	    if { $c_d_exists && ! $force } {
		# ./contest is directory.
		puts "ERROR: Broken solutions/$name"
		set all_ok 0
		continue
	    }

	    if { $p_l == "" } {
		# No place to search.
		puts "ERROR: Broken solutions/$name"
		set all_ok 0
		continue
	    }

	    set ok 0
	    foreach d {demos public private} {
		set lsource $p_l/$d/$name
		if { [file isdirectory $lsource] } {
		    puts "Relinking solutions/$name"
		    puts "       to $lsource"
		    file delete -force -- $ltarget
		    link_file $lsource $ltarget
		    set ok 1
		    break
		}
	    }
	    if { ! $ok } {
		puts "ERROR: Could not re-link\
		      solutions/$name"
		foreach d {demos public private} {
		    puts "     $p_l/$d/$name not found"
		}
		set all_ok 0
		continue
	    }
	}
    }

    if { ! $all_ok } {
	if { $p_l == "" } {
	    foreach d $p_l_list {
		puts "    $d not found"
	    }
	}
	if { $c_d_exists && ! $force } {
	    puts "    SAFETY VIOLATION: ./contest is a\
		      directory"
	}
	if { ! $force } { exit 1 }
    }
}

if { $command == "repair" } { exit 0 }

if { [lcontain {rerun copy copyall redo} $command] } {

    # Create target if necessary.
    #
    if { ! [file exists $target] } {
	puts "Creating $targetabbrev"
	file mkdir $target
    }

    # Be sure directories have permissions.
    # Ignore errors for .. or ../..
    #
    catch {
	grant_access $target x
	grant_access $target/.. x
	grant_access $target/../.. x
    }
}

# Process source submission subdirectories.
#
set directories 0
set differences 0
set errors 0
foreach subdir [lsort [glob -nocomplain $source/*]] {
    set subdir [file tail $subdir]
    if { ! [regexp {^([^<]*)-<<(.*)>>-submission$} \
                   $subdir forget date submitter] } \
	continue
    if { ! [regexp -nocase -- \
                   $date_re $date] } continue
    if { ! [regexp -nocase -- \
                   $submitter_re $submitter] } continue
    if {    [lcontain {rerun copy copyall} $command] \
         && [file isdirectory $target/$subdir] } \
        continue

    incr directories

    set sourcerm $source/$subdir/Received_Mail
    set targetrm $target/$subdir/Received_Mail

    if { ! [file exists $sourcerm] } {
        puts "ERROR: does not exist:\
	      $sourceabbrev/$subdir/Received_Mail"
	inc errors
    } elseif { ! [file readable $sourcerm] } {
        puts "ERROR: not readable: \
	      $sourceabbrev/$subdir/Received_Mail"
	inc errors
    } elseif { [catch {
		    set ch [open $sourcerm r]
		    read_header $ch
		    close $ch } out] } {
	puts "ERROR: could not read\
	      $sourceabbrev/$subdir/Received_Mail"
	puts $out
	inc errors
    } elseif { ! [regexp -nocase -- $problem_re \
                         $message_subject] } {
	incr directories -1
        continue
    } elseif { $command == "look" } {
        puts "$subdir"
	puts "    [format {%14s} \
	                  Subject]:$message_subject"
	foreach file {Auto_Score
	              Old_Auto_Score
	              Manual_Score} {
	    set f $source/$subdir/$file
	    if { [file exists $f] } {
	        puts "    [format {%14s} $file]:\
		          [read_entire_file $f]"
	    }
	}
    } elseif { $command == "diff" } {
	foreach d {source target} {
	    set as [set $d]/$subdir/Auto_Score
	    if { [file exists $as] } {
	        set as [read_entire_file $as]
	    } else {
	        set as "does not exist"
	    }
	    set ${d}as $as
	}

	if { $sourceas == $targetas } continue

	incr differences
        puts "$subdir"
	puts "    [format {%14s} \
	                  Subject]:$message_subject"
	foreach file {Auto_Score
	              Old_Auto_Score
	              Manual_Score} {
	    foreach d {source target} {
		set f [set $d]/$subdir/$file
		if { [file exists $f] } {
		    puts "    [format {%14s} $file]:\
			      [set ${d}tag]:\
			      [read_entire_file $f]"
	        }
	    }
	}
    } elseif { $command == "remove" } {
	if { [file isdirectory $target/$subdir] } {
	    file delete -force -- $target/$subdir
	    puts "Deleted $subdir"
	}
    } elseif {    [lcontain {rerun copyall} $command] \
               && [catch {
			copy_directory $source/$subdir \
			               $target/$subdir
			      } out] } {
	puts "ERROR: Cannot copy ALL of $subdir"
	puts $out
	inc errors
    } elseif { $command == "copyall" } {
	puts "Copied ALL of $subdir"
    } elseif {    $command == "copy" \
               && [catch {
		    file mkdir $target/$subdir
		    copy_file $sourcerm $targetrm
			      } out] } {
	puts "ERROR: Cannot make\
	      $targetabbrev/$subdir/Received_Mail"
	puts $out
	inc errors
    } elseif { $command == "copy" } {
	puts "Copied $subdir/Received_Mail"
    } elseif { [lcontain {rerun redo} $command] } {

        if { ! [file isdirectory $target/$subdir] } {
	    puts "ERROR: $targetabbrev/$subdir\
	          does not exist"
	    inc errors
	    continue
	}
        
	# Change to target submission directory.
	#
	cd $target/$subdir

	# Set up for printing notes and running
	# autojudge.
	#
	set note_list {}
	if { $command == "redo" } {
	    set note Redid
	} else {
	    set note Reran
	}

	# Delete old autodispatch.log file.
	#
	file delete -force autodispatch.log

	# Run autojudge -rerun.
	#
	set starttime [clock format [clock seconds] \
	                            -gmt no]
	if { [catch { exec autojudge -rerun } out] } {
	    if {    [lindex $errorCode 1] == "SIG"
	         && [lindex $errorCode 2] == "SIGINT" \
	       } {
	        exit 1
	    }
	    lappend note_list \
	            "Autojudge -rerun suffered a\
		     SYSTEM ERROR"
	    inc errors
	}

	# Write new autodispatch.log file.
	#
	set logch [open autodispatch.log w]

	puts $logch "Start of autojudge -rerun:\
	             $starttime"
	puts $logch "----------------------------------"
	puts $logch $out
	puts $logch "----------------------------------"
	puts $logch "End of autojudge -rerun:\
		     [clock format [clock seconds] \
		                   -gmt no]"
	close $logch

	if {    [file exists Auto_Score] \
	     && [file exists Old_Auto_Score] } {
	    set auto_score \
		[read_entire_file Auto_Score]
	    set old_auto_score \
		[read_entire_file Old_Auto_Score]
	    if { $auto_score != $old_auto_score } {
		incr differences
		lappend note_list \
		    "Auto_Score: new $auto_score" \
		    "         != old\
				 $old_auto_score"
	    }
	}

	cd $pwd

	puts "$note $subdir"
	foreach line $note_list {
	    puts "    $line"
	}
    }
}

puts ""
if { $command == "diff" } {
    puts "Processed $directories submission\
          directories; $differences have changed."
} elseif { [lcontain {rerun redo} $command] } {
    puts "Processed $directories submission\
          directories;\n          $differences have\
	  Auto_Score/Old_Auto_Score differences."
} else {
    puts "Processed $directories submission\
          directories."
}
if { $errors != 0 } {
    puts "There were $errors ERRORS!"
}

exit 0

# Include common error catching code:
#
} caught_output
caught_error
