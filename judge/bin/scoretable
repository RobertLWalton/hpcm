#!/bin/sh
#
# Runs the scorefinder program to get scores, and
# formats the scores into a table according to
# parameters set in hpcm_judging.rc or in arguments.
#
# File:		scoreboard
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Sun Feb 10 11:04:19 EST 2002
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: hc3 $
#   $Date: 2002/02/10 16:08:21 $
#   $RCSfile: scoretable,v $
#   $Revision: 1.31 $
#
# The next line starts tcl \
exec tcl "$0" "$@"

# Use tcl rather than tclsh so that `signal' is defined.

# Include common code and parameters:
#
set lib_directory "[file dirname $argv0]/../lib"
source $lib_directory/judging_common.tcl
source $lib_directory/scoreboard_common.tcl
set log_globally yes
catch {

set document "
scoreboard \[ parameter-file-name | \\
             parameter-name-value-list \] ...

    When this program starts, it processes its arguments
    as follows.  Any named parameter file is `sourced'.
    Any argument that begins with a `{' is treated as a
    TCL list (after the outer `{ }' brackets are re-
    moved) of items each of the format `{PN V}'.  For
    each item, the global variable `scoreboard_PN' is
    set to the value V.

    This program inputs the output of `scorefinder' to
    get scores, and organizes the scores into a table.
    A score is ignored unless

    	its submission time is equal to or greater than
	the value of `scoreboard_start_time', unless
	that value is \"\" or \"team\";

    	its submission time is equal to or less than
	the value of `scoreboard_stop_time', unless
	that value is \"\";

	its problem satisfies the logical expression in
	`scoreboard_problems', or that expression is an
	empty list;

	its submitter satisfies the logical expression
	in `scoreboard_submitters', or that expression
	is an empty list;

    The logical expressions are TCL lists whose elements
    are operators, parentheses `(' and `)', and atoms.
    The allowed operators are `!', `&', `^', and `|' in
    highest precedence first order, denoting `not',
    `and', `exclusive-or', and `inclusive-or'.  Opera-
    tors and parentheses MUST be surrounded by white-
    space.

    The atoms `0' and `1' represent `false' and `true'.
    All other atoms are regular expressions that are
    matched to the ENTIRE problem name or submitter
    name, and are true iff they match.

    Some simple examples of logical expressions are:

      ! count		Match all names but `count'.

      count | pascal	Match only `count' and `pascal'.

      count|pascal	Ditto, but with only one regular
      			expression atom that contains a
			`|', instead of two atoms and a
			`|' logical operator.

      bpi\[0-9]+		Match all names of the\
      				form
      			`bpi' followed by one or more
			digits.

      bpi.* & ! bpit	Match all names beginning with
			`bpi' except the one name
			`bpit'.

    The regular expressions are TCL regular expressions.
    Note that a regular expression must not as a charac-
    ter string be the same as an operator or parenthesis
    or special atom `0' or `1'.

    The scoreboard has a line for each submitter of the
    form

    submitter  score1  score2  ......  time_score

    Here each score but the `time_score' is the score
    for a problem, and has the form `X:YYuN', where X:YY
    is the time in units u (s = seconds, m = minutes,
    h = hours, d = days) of the first correct submis-
    sion, and N is the number of submissions up to and
    including the first correct submission.  If N = 0,
    the problem score is `......'.  If there is no cor-
    rect submission but N != 0, the problem score is
    `..../N'.  If there is a correct submission but the
    start time of the problem cannot be computed, the
    score is `undef/N'.  If a problem time is computed
    using a non-final score (an automatically computed
    score that is yet to be reviewed by the human
    judge), the problem score begins with an `*'.

    The score for a problem is a time equal to the pro-
    blem submission time minus the problem start time.
    The start time of a problem is start time of the
    contest in the variable `scoreboard_start_time', un-
    less this variable's value is \"\", in which case
    each problem's start time is time the problem des-
    cription was gotten (as recorded in a $gotten_file\
    				file
    by autoinfo), or unless `score_start_time's value is
    \"team\", in which case each problem's start time is
    the time the team (submitter) got its first scorable
    problem (i.e., problem allowed and not denied).  The
    time_score for each submitter is the sum of all the
    correct problem times for that submitter, plus a
    penalty times the number of incorrect submissions
    that are for a problem for which there is a later
    correct submission.  All times are actually measured
    in seconds, even though the problem times are often
    reported on the scoreboard itself only to the near-
    est minute or hour.  The penalty is the value of
    `scoreboard_penalty', and is in seconds.

    The total score is given in seconds, and is preceded
    with an `*' if there is a non-final score involved
    in its computation.  If the total score cannot be
    computed because of an `undef' problem score, the
    total score is `undef'.  If the scoring mode is
    `auto', all scores are final.  If `manual', only
    manual scores are considered at all, and automatic
    scores are totally ignored.  If `auto+manual', then
    automatic scores other than `Completely Correct' are
    not final, and other scores are final.

    The scoreboard groups the teams by the number of
    problems they have correct, and within each group
    sorts teams by total score.

    A parameters_file may be given to this program that
    will be loaded into the program after hpcm_jud-
    ging.rc.  This parameters_file may contain parameter
    settings, e.g. `scoreboard_problems' etc., in the
    same manner as the normal parameters file."

# } This closes extra left bracket in documentation so
# outer {} brackets work.

# On first -doc* argument, print documentation and exit.
#
if { [regexp {^-doc} [lindex $argv 0]] } {
    puts $document
    exit 1
}

# Process arguments.
#
set LB "{"
# } to balance left bracket in last line
#
foreach arg $argv {
    if { [regexp "^${LB}" $arg] } {
	foreach item [lindex $arg 0] {
	    set name  [lindex $item 0]
	    set value [lindex $item 1]
	    if { ! [info exists scoreboard_$name] } {
	    	error "scoreboard_$name does not exist"
	    }
	    set scoreboard_$name $value
	}
    } else {
	source $arg
    }
}

# Read and prune scoreboard_array.
#
compute_scoreboard_array stdin
prune_scoreboard_array

# Compute scoreboard list and scoreboard_problem_list.
#
compute_scoreboard_list


# Start output of scoreboard.
#
set spaces32 "                                "
set spaces64 $spaces32$spaces32
set spaces128 $spaces64$spaces64
set spaces256 $spaces128$spaces128

# Compute number of problems per line (ppl).
# Also max_column of output (first column is 0).
# But if there are no problems, exit program without
# producing any output.
#
# scoreboard_width is the number of columns in the
# scoreboard.

set ppl [expr { ( $scoreboard_width - 20 ) / 10 } ]
set np [llength $scoreboard_problem_list]
if { $np == 0 } { exit 0 }
if { $np < $ppl } { set ppl $np }
set max_column [expr { 20 + 10 * $ppl - 1 }]

# Compute line marker characters.  First and last
# line markers are SPACE, and in last line all
# spaces will be replaced by underbars (_).
#
# [string index $markers N] marks line N.  The first
# character of `markers' is unused.
#
# scoreboard_markers are the marker characters used,
# in order.
#
set nl [expr { ( $np + $ppl - 1 ) / $ppl }]
if { $nl <= 2 } {
    set markers "X  "
} else {
    set markers $scoreboard_markers
    set markers "X [string range $markers 0 \
                           [expr { $nl - 3 }]] "
}

# Output labeling lines.
#
proc label_problems {} {

    global scoreboard_problem_list spaces256 ppl \
           markers max_column

    set count  0
    set marker $markers
    foreach problem $scoreboard_problem_list {
	    if { $count % $ppl == 0 } {
	        if { $count > 0 } {
		    puts $line
		}
		set marker [string range $marker 1 end]
		set m [string index $marker 0]

		if { $count == 0 } {
		    set line "Contestant Name"
		} elseif { $count == $ppl } {
		    set line "Correct/Tot_Time"
		} else {
		    set line ""
		}
		set line [format {%-20.20s} $line]
	    }
	    incr count
	    set line "$line$m[format {%9.9s} $problem]"
    }
    if { $count <= $ppl } {
	puts $line
        set line "Correct/Tot_Time"
    }
    regsub -all " " [string range $line$spaces256 \
			    0 $max_column] \
	   "_" line
    puts $line
}

label_problems

# Loop though sorted scoreboard_list and output each
# submitter.
#
set current_problems_correct ""
set number_of_problems \
    [llength $scoreboard_problem_list]
foreach item $scoreboard_list {

    # If team has no submissions, stop the presses.
    #
    if { [lindex $item 0] == "000.999999999.000" } {
	break
    }

    set problems_correct [lindex $item 1]
    set time_score [lindex $item 2]
    set modifier [lindex $item 3]
    set submitter [lindex $item 4]
    set problem_scores [lreplace $item 0 4]

    set total_score $time_score

    set total_score "$problems_correct/$total_score"

    if { $modifier == "n" } {
    	set total_score "*${total_score}"
    }

    # Print the line(s) for the team.
    #
    set count 0
    set marker $markers
    foreach score $problem_scores {
	if { $count % $ppl == 0 } {
	    if { $count > 0 } {
		puts $line
	    }
	    set marker [string range $marker 1 end]
	    set m [string index $marker 0]

	    if { $count == 0 } {
		set line $submitter
	    } elseif { $count == $ppl } {
		set line "$total_score"
	    } else {
		set line ""
	    }
	    set line [format {%-20.20s} $line]
	}
	incr count

	set line "$line$m[format {%9.9s} $score]"
    }
    if { $count <= $ppl } {
	puts $line
        set line $total_score
    }
    regsub -all " " [string range $line$spaces256 \
			    0 $max_column] \
	   "_" line
    puts $line
}

exit 0

# Include common error catching code:
#
} caught_output
caught_error
