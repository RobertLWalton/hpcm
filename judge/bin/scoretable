#!/bin/sh
#
# Uses output of the scorefinder program to get scores,
# and formats the scores into a table according to
# parameters set in hpcm_judging.rc or in arguments.
#
# File:		scoretable
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Thu Oct 17 05:34:50 EDT 2013
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: walton $
#   $Date: 2013/10/17 10:18:20 $
#   $RCSfile: scoretable,v $
#   $Revision: 1.47 $
#
# The next lines start tclsh \
trap "echo scoretable: Terminated by Signal" \
    HUP INT QUIT; \
tclsh "$0" "$@"; exit $status

# Include common code and parameters:
#
set lib_directory "[file dirname $argv0]/../lib"
set log_globally yes
source $lib_directory/judging_common.tcl
source $lib_directory/scoreboard_common.tcl
catch {

set document "
scoretable \[ parameter-file-name | \\
             parameter-name-value-list \] ...

    When this program starts, it processes its arguments
    as follows.  Any named parameter file is `sourced'.
    Any argument that begins with a `{' is treated as a
    TCL list (after the outer `{ }' brackets are re-
    moved) of items each of the format `{PN V}'.  For
    each item, the global variable `scoreboard_PN' is
    set to the value V.

    This program inputs (from the standard input) the
    output of `scorefinder' to get scores, and organizes
    these scores into a table.  All the rules regarding
    the various scoreboard_xxx global variables in hpcm_
    judging.rc are followed: see documentation in that
    file.

    The scoreboard table contains two lines for each
    submitter of the form

    submitter          pscore  pscore  ......  pscore
    C/ranking_score____pscore__pscore__......__pscore

    Here the submitter name is from the submission dir-
    ectories as compressed by the `submitter_compress'
    function, the pscore's are problem scores, C is the
    number of problems correct, and the ranking_score is
    the total submitter time in seconds.  If more lines
    per submitter are required, they are added, and each
    uses a different column separator character before
    each pscore.  See hpcm/contestant/help/common/
    scoreboard for more details."

# } This closes extra left bracket in documentation so
# outer {} brackets work.

# On first -doc* argument, print documentation and exit.
#
if { [regexp {^-doc} [lindex $argv 0]] } {
    puts $document
    exit 1
}

# Process arguments.
#
set LB "{"
# } to balance left bracket in last line
#
foreach arg $argv {
    if { [regexp "^${LB}" $arg] } {
	if { [catch { set items [lindex $arg 0] }] } {
	    error "argument is not a TCL list: $arg"
	}
	foreach item $items {
	    if { [catch { set len [llength $item] }] \
	         || $len != 2 } {
	        "argument element is not a length 2\
		 TCL list: $item"
	    }
	    set name  [lindex $item 0]
	    set value [lindex $item 1]
	    set "scoreboard_$name" $value
	}
    } else {
	source $arg
    }
}

# Read and prune scoreboard_array.
#
compute_scoreboard_array stdin
prune_scoreboard_array

# Compute scoreboard list and scoreboard_problem_list.
#
compute_scoreboard_list


# Start output of scoreboard table.
#
set spaces32 "                                "
set spaces64 $spaces32$spaces32
set spaces128 $spaces64$spaces64
set spaces256 $spaces128$spaces128

# Compute number of problems per line (ppl).
# Also max_column of output (first column is 0).
# But if there are no problems and no finished
# submitters, exit program without producing any output.
#
# scoreboard_width is the number of columns in the
# scoreboard table.

set ppl [expr { ( $scoreboard_width - 20 ) / 10 } ]
set np [llength $scoreboard_problem_list]
set nf [llength [array names scoreboard_finished]]
if { $np == 0 && $nf == 0 } { exit 0 }
if { $np < $ppl } { set ppl $np }
set max_column [expr { 20 + 10 * $ppl - 1 }]

# Compute line marker characters.  First and last
# line markers are SPACE, and in last line all
# spaces will be replaced by underbars (_).
#
# [string index $markers N] marks line N.  The first
# character of `markers' is unused.
#
# scoreboard_markers are the marker characters used,
# in order.
#
if { $ppl != 0 } {
    set nl [expr { ( $np + $ppl - 1 ) / $ppl }]
} else {
    set nl 1
}
if { $nl <= 2 } {
    set markers "X  "
} else {
    set markers $scoreboard_markers
    set markers "X [string range $markers 0 \
                           [expr { $nl - 3 }]] "
}

# Output labeling lines.
#
proc label_problems {} {

    global scoreboard_problem_list spaces256 ppl \
           markers max_column \
	   scoreboard_sort_mode

    switch $scoreboard_sort_mode {
    submitter {
        set second_line_label ""
    }
    time      {
	set second_line_label "Correct/Total Time"
    }
    problems  {
	set second_line_label "Correct"
    }
    score      {
	set second_line_label "Total Score"
    }
    problems/score   {
	set second_line_label "Correct/Total Score"
    }
    score/problems   {
	set second_line_label "Total Score/Correct"
    }
    }

    set count  0
    set marker $markers
    foreach problem $scoreboard_problem_list {
	    if { $count % $ppl == 0 } {
	        if { $count > 0 } {
		    puts $line
		}
		set marker [string range $marker 1 end]
		set m [string index $marker 0]

		if { $count == 0 } {
		    set line "Contestant Name"
		} elseif { $count == $ppl } {
		    set line $second_line_label
		} else {
		    set line ""
		}
		set line [format {%-20.20s} $line]
	    }
	    incr count
	    set line "$line$m[format {%9.9s} $problem]"
    }
    if { $count == 0 } {
        # There were no problems
	puts "Contestant Name"
	set line $second_line_label
    } elseif {    $count <= $ppl \
               && $second_line_label != "" } {
	puts $line
        set line $second_line_label
    }

    regsub -all " " [string range $line$spaces256 \
			    0 $max_column] \
	   "_" line
    puts $line
}

label_problems

# Loop though sorted scoreboard_list and output each
# submitter.
#
foreach item $scoreboard_list {

    set submitter [lindex $item 1]
    set submissions [lindex $item 2]
    set ranking_score [lindex $item 3]
    set problem_scores [lrange $item 4 end]

    # Skip teams with 0 submissions that are not *DONE*.
    #
    if {    $submissions == 0 \
         && ! [regexp {DONE} $ranking_score] } continue

    # Print the line(s) for the team.
    #
    set count 0
    set marker $markers
    foreach score $problem_scores {
	if { $count % $ppl == 0 } {
	    if { $count > 0 } {
		puts $line
	    }
	    set marker [string range $marker 1 end]
	    set m [string index $marker 0]

	    if { $count == 0 } {
		set line $submitter
	    } elseif { $count == $ppl } {
		set line "$ranking_score"
	    } else {
		set line ""
	    }
	    set line [format {%-20.20s} $line]
	}
	incr count

	set line "$line$m[format {%9.9s} $score]"
    }
    if { $count == 0 } {
        # There were no problems
	puts $submitter
	set line $ranking_score
    } elseif {    $count <= $ppl \
               && $ranking_score != "" } {
	puts $line
        set line $ranking_score
    }
    regsub -all " " [string range $line$spaces256 \
			    0 $max_column] \
	   "_" line
    puts $line
}

exit 0

# Include common error catching code:
#
} caught_output
caught_error
