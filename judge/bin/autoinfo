#!/bin/sh
#
# Returns files to requester by email.
#
# File:		autoinfo
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Sat Oct  1 15:27:41 EDT 2005
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: hc3 $
#   $Date: 2005/10/01 19:29:15 $
#   $RCSfile: autoinfo,v $
#   $Revision: 1.36 $
#
# The next line starts tcl \
exec tcl "$0" "$@"

# Use tcl rather than tclsh so that `signal' is defined.

# Include common code and parameters:
#
set lib_directory "[file dirname $argv0]/../lib"
source $lib_directory/judging_common.tcl
catch {

set document "
cd submission_directory; autoinfo

    Reads the `Received_Mail' file in the current
    directory.  This file must contain a single email
    request message with a subject line of the form:

    	Subject: get name ...

    The body of the message must be empty.  Otherwise
    this program sends a reply indicating a bad request
    and exits without error or output.

    Note that whenever this program replies to a message
    whose subject field is of the form `get ...', the
    subject of the reply has the form

	Subject: RE: get ...

    if the reply message contains files gotten, but the
    subject of the reply has the form 

	Subject: Errors In: get ...

    if the reply concerns errors in the request message.
    Files gotten are always returned in a message by
    themselves without any information about errors, and
    error information is always returned in a message
    that does not contain any files gotten, so that mes-
    sages containing files gotten can be selected for
    automatic processing by examining their subject
    fields.

    The names listed in the subject field of the re-
    ceived message are processed recursively to form a
    list of files go be gotten, and three other lists: a
    list of illegal names, a list of unreadable names,
    and a list of forbidden names.  The files to be
    gotten are returned to the user in reply email, and
    any non-empty lists of illegal, unreadable, or for-
    bidden names are returned in separate reply email.
    With each forbidden name there is an error message
    explaining why the name is forbidden.

    A name is first looked up on the `info_map', an
    array that can map a name.  If `info_map(name)' has
    no value, the name is not mapped.  If instead the
    value of `info_map(name)' has the form of a list
    beginning with the word `FORBIDDEN', then the name
    is put on the forbidden list, and the second element
    of the `info_map(name)' value becomes the error mes-
    sage explaining why the name is forbidden.  Thus for
    a forbidden name the value of `info_map(name)'
    should have the form:

    	{ FORBIDDEN {error_message} }

    In reply mail this will be output in the context:

    	The following file names are for forbidden:
		name: error_message

    If the value of `info_map(name)' exists but does not
    indicate the name is forbidden, the value is taken
    as a list of names that replace the original name.
    Thus if `info_map(giant)' had the value `fee fie fo
    fum', a request for `giant' would be replaced by a
    request for `fee', `fie', `fo', and `fum'.

    After name mapping in this fashion, mapping is
    applied to just the tail component of the name using
    the `info_tail_map'.  Only the tail part of the name
    is mapped by this map.  This map is standardly set
    to map the tails `CVS' and `RCS' to empty lists,
    thus eliminating them.

    If the recursion involved in mapping gets to too
    great a depth, the system error function is called
    because the TCL stack overflows, and there is no
    reply mail.

    Next the name is checked for legality.  If the name
    begins with `.' or `-', or contains a `.' or `-'
    right after a `/', it is considered to be illegal,
    and is consigned to the list of illegal names.

    Then the name is checked for readability.  If the
    name does not name a readable existing ordinary file
    or directory within the info directory, after sym-
    bolic links are followed, the name is consigned to
    the list of unreadable names.

    Next, if relative to the info directory the name
    names a directory D, the name is replaced by the
    names relative to the info directory of the compo-
    nents of D (excluding as usual those whose component
    names begin with `.') that are readable ordinary
    files or directories after symbolic links are fol-
    lowed.

    If the name gets to this point without having been
    put on a list or replaced, it is put on the list
    of files to be gotten.  The contents of these got-
    ten files are returned in a reply message.  If a
    gotten file contains a line beginning with `From ',
    the line is prefixed with `>' when it is copied into
    the reply mail.

    This program prints the names of the gotten files on
    a single line, and prints nothing if there are no
    gotten files.

    This program writes the date and the names of the
    gotten files into the `Gotten' file.  The\
					    first line
    of this file has the form:

    		Date: current-date

    and the rest of the lines, one for each gotten file,
    have the form:

    		File: file-name

    If something goes very wrong, such as finding that
    the `Received_Mail' file is not readable, this
    program creates an error log file in the current
    directory, does not print anything on the standard
    output (but does print on the error output), and
    exits with exit code 0.  This is also done if the
    `Subject:' field value in the `Received_Mail' file
    is not sufficient to cause `autodispatch' to dis-
    patch to this program: or specifically, if the
    field value is not a list of at least 1 items the
    first of which is `get'."

# If there are any arguments, print documentation and
# exit.
#
if { $argc != 0 } {
    puts $document
    exit 1
}

# Reply with error.
#
proc request_error { what } {
    reply { LINE "ERROR while reading requesting\
                  email:" } \
          [list LINE $what] \
	  BLANK \
	  {LINE "THIS REQUEST (see below) IGNORED" } \
	  {LINE "YOU MUST RESUBMIT" } \
	  BLANK \
	  { BAR "this message replies to:" } \
	  RECEIVED-FULL-HEADER \
	  BLANK \
	  RECEIVED-BODY
    exit 0
}

# Find the subject.  If bad subject call error.
#
set received_ch [open Received_Mail r]
read_header $received_ch
if { [catch { llength $message_subject }] } {
    error "Bad `Subject:' field in message:\n\
	  \   Subject:$message_subject"
}
switch [llength $message_subject] {

    0		{
	error "No or empty `Subject:' field in message"
    }

    default	{
	if { [lindex $message_subject 0] != "get" } {
	    error "Bad `Subject:' field in message:\n\
		  \   Subject:$message_subject"
	}
    }
}

# If non-empty body reply with error.
#
read_part_header $received_ch
if { $message_part_error != "" } {
    request_error $message_part_error
} elseif { [blank_body $received_ch] == "no" } {
    request_error "    Non-blank body in message."
}
close $received_ch

# Compute lists of OK file names, unreadable names,
# illegal names, and forbidden names.  The items in
# the forbidden list have the form:
#
#	{name {message}}
#
set ok_names ""
set unreadables ""
set illegals ""
set forbiddens ""
#
proc info_expand { name } {

    global ok_names unreadables illegals forbiddens \
    	   info_directory info_map info_tail_map

    if { [info exists info_map($name)] } {
        set replacement $info_map($name)
	if { [llength $replacement] >= 1 \
	     && [lindex $replacement 0] == "FORBIDDEN" \
	     		} {
	    lappend forbiddens \
	    	[lreplace $replacement 0 0 $name]
	} else {
	    foreach n $replacement {
	    	info_expand $n
	    }
	}

	return
    }

    set tail [file tail $name]

    if { [info exists info_tail_map($tail)] } {
        set replacement $info_tail_map($tail)
	if { [llength $replacement] >= 1 \
	     && [lindex $replacement 0] == "FORBIDDEN" \
	     		} {
	    lappend forbiddens \
	    	[lreplace $replacement 0 0 $name]
	} else {
	    set dir [file dirname $name]
	    if { $dir == "." } {
	    	set prefix ""
	    } else {
	    	set prefix $dir/
	    }
	    foreach tail $replacement {
	    	info_expand $prefix$tail
	    }
	}

	return
    }


    set file $info_directory/$name

    if { [regexp {(^|/)(\.|-)} $name] } {
    	lappend illegals $name
    } elseif { ! [file readable $file] } {
        lappend unreadables $name
    } elseif { [file isdirectory $file] } {
	foreach f [lsort [glob -nocomplain \
			       $file/*]] {
	    if { [file readable $f] \
	    	 && ( [file isdirectory $f] \
		      || [file isfile $f] ) } {
		info_expand "$name/[file tail $f]"
	    }
	}
    } elseif { [file isfile $file] } {
        lappend ok_names $name
    } else {
        lappend unreadables $name
    }
}

foreach n [lrange $message_subject 1 end] {
    info_expand $n
}


# Compute the list of lines in the error reply.
#
set lines ""

if { [llength $forbiddens] > 0 } {
    lappend lines \
	    "Some requested file names are forbidden:"
    foreach item $forbiddens {
	lappend lines \
		"    [lindex $item 0]: [lindex $item 1]"
    }
    lappend lines ""
} 
if { [llength $illegals] > 0 } {
    lappend lines \
	    "Some requested file names are illegal:"
    while { [llength $illegals] > 0 } {
	lappend lines \
		"    [lrange $illegals 0 2]"
	set illegals [lrange $illegals 3 end]
    }
    lappend lines ""
} 
if { [llength $unreadables] > 0 } {
    lappend lines \
	    "Some requested file names are unreadable:"
    while { [llength $unreadables] > 0 } {
	lappend lines \
		"    [lrange $unreadables 0 2]"
	set unreadables [lrange $illegals 3 end]
    }
    lappend lines ""
} 

# Send the error reply if necessary.
#
if { [llength $lines] > 0 } {
    if { [llength $ok_names] == 0 } {
	compose_reply -errors \
	    [concat LINES $lines] \
	    { LINE "There were no OK file names\
	    	    provided in the requesting\
		    message." } \
	    { LINE "The subject of the requesting\
	    	    message should have the form:" } \
	    { LINE "    Subject: get filename ..." } \
	    BLANK \
	    { BAR "this message replies to:" } \
	    RECEIVED-HEADER
	send_reply
    } else {
	compose_reply -errors  \
	    [concat LINES $lines] \
	    { LINE "OK requested files will be returned\
	            in a subsequent message." } \
	    BLANK \
	    { BAR "this message replies to:" } \
	    RECEIVED-HEADER
	send_reply -notfinal
    }
}

# Compose non-error reply if necessary.
#
if { [llength $ok_names] > 0 } {

    set lines ""
    lappend lines \
	    "The following requested files appear\
	     below after the request message header:"
    set fs $ok_names
    while { [llength $fs] > 0 } {
	lappend lines "    [lrange $fs 0 2]"
	set fs [lrange $fs 3 end]
    }
    lappend lines ""

    compose_reply \
	    [concat LINES $lines] \
	    BLANK \
	    { BAR "this message replies to:" } \
	    RECEIVED-HEADER \
	    BAR \
	    BLANK

    set reply_ch [open Reply_Mail+ a]

    puts $reply_ch ""

    set dashes "---<>--<>---<>--<>---<>-----"

    foreach name $ok_names {
	puts $reply_ch "$dashes $name:"
	set file_ch [open $info_directory/$name r]
	while { "yes" } {
	    set line [gets $file_ch]
	    if { [eof $file_ch] } break
	    regsub {^From } $line {>From } line
	    puts $reply_ch $line
	}
	close $file_ch
    }
    puts $reply_ch "$dashes end of files"

    close $reply_ch

    send_reply
}

# Output up to date Gotten file.
#
if { [file exists Gotten] } {
    file delete -force Gotten
}
set gotten_ch [open Gotten w]
puts $gotten_ch "Date: [clock format [clock seconds]]"
foreach name $ok_names {
    puts $gotten_ch "File: $name"
}
close $gotten_ch

# Print names of files gotten and exit.
#
puts $ok_names
exit 0

# Include common error catching code:
#
} caught_output
caught_error
