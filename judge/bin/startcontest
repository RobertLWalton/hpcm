#!/bin/sh
#
# Start the contest by setting permissions on files.
#
# File:		startcontest
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Thu Jan  4 05:36:02 EST 2007
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: walton $
#   $Date: 2007/01/04 10:37:06 $
#   $RCSfile: startcontest,v $
#   $Revision: 1.14 $
#
# The next line starts tcl \
exec tcl "$0" "$@"

# Use tcl rather than tclsh so that `signal' is defined.

# If -start-, set up error handling so we will catch
# errors during sourcing of hpcm_judging.rc and do
# retries if necessary.
#
if { [lindex $argv 0] == "-start-" } {
    set start_errors [lindex $argv 1]
    if { $start_errors < 4 } {
        proc caught_error_retry {} {
	    global start_errors pid_file
	    incr start_errors
	    sleep 2
	    if { [info exists pid_file] } {
		file delete -force $pid_file
	    }
	    exec startcontest -start- $start_errors &
	    exit 0
	}
    }
    set log_globally yes
    set log_quiet yes
} else {
    set log_disable yes
}

# Save program start time.
#
set startcontest_start_time [clock seconds]

# Include common code and parameters:
#
set lib_directory "[file dirname $argv0]/../lib"
source $lib_directory/judging_common.tcl

# Abbreviation for use in this file.
#
set c_d $judging_directory/contest

catch {

set document "
startcontest { start | status | stop }

    With the `start' option, this program sets a+rx
    permissions on the directory 

    	<judging_directory>/contest/problems
	
    and a+r permissions on the file
    
    	<judging_directory>/contest/help/problems
	
    if these exist.

    However, if the current time is before any absolute
    time value of the scoreboard_start_time global var-
    iable, this program spawns a background child
    process that waits until the scoreboard_start_time
    and then sets permissions as above and emails the
    judge that the contest has started.  The child will
    re-read the <judging-directory>/hpcm_judging.rc file
    if that file changes, in order to permit the start
    time to change.

    If this program spawns a child, it writes the
    process ID of the child into the Startcontest_PID
    file in the judging directory.  If there already is
    such a file and the process it identifies is still
    running, this program will not spawn a child and
    will do nothing but print out information about the
    ID'ed process.

    If run with the `status' option this program will
    print status telling whether startcontest has
    already been executed and whether it is already
    running in background.

    If run with the `stop' option this program will
    stop any startcontest running in background.

    Unlike most HPCM judging programs, errors made by
    this program are not written to log files, but are
    written to the standard error output instead.
    However, errors made by any background child are
    logged to log files."

#	startcontest start
#
# calls
#
#	startcontest -start- N
#
# where N is the number of retries because of errors,
# or is just 1 to indicate we should retry because
# parameters have changed.

# If there are any illegal arguments print documentation
# and exit with error.
#
set arg [lindex $argv 0]
if {    ! [lcontain {start status stop -start-} $arg] \
     || ( $arg != "-start-" && $argc != 1 ) } {
    puts $document
    exit 1
}

set pid_file $judging_directory/Startcontest_PID

# Handle the status argument.
#
if { $arg == "status" } {
    set startcontest_needed yes
    if { [file exists $pid_file] } {
	set pid [read_file $pid_file]
	set display [display_process_tree $pid]
	if { [process_found $display] } {
	    puts "Previous startcontest still running:"
	    puts $display
	    set startcontest_needed no
	} else {
	    puts "Previous startcontest has died."
	    puts $display
	    puts ""
	    puts "Run `tracker' to find error logs, or\
	          look in"
	    puts "$judging_directory/log for unchecked\
	          errors."
	}
    }
    if {    [file isdirectory $c_d/problems] \
         && [regexp {r.x} [get_access $c_d/problems]] \
         && [file isfile $c_d/help/problems] \
         && [regexp {r..} \
                    [get_access $c_d/help/problems]] } {
	puts "startcontest has already been run\
	      successfully"
    } elseif {    [file isdirectory $c_d/problems] \
               && [file isfile $c_d/help/problems] } {
	if { $startcontest_needed } { 
	    puts "You need to run: startcontest start"
	}
    } else {
        if { ! [file isdirectory $c_d/problems] } {
            puts "$c_d/problems needs to be created"
	}
	if { ! [file isfile $c_d/help/problems] } {
	    puts "$c_d/help/problems needs to be\
	          created"
	}
    }
    exit 0
}

# Handle the stop argument.
#
if { $arg == "stop" } {
    if { [file exists $pid_file] } {
	 set pid [read_file $pid_file]
	 set display [display_process_tree $pid]
	 if { [process_found $display] } {
	     puts "Killing previous startcontest:"
	     puts $display

	     # Try to kill up to 30 times, checking
	     # after each attempt for death.  The
	     # first 20 times are with HUP, the next
	     # 10 times are with KILL.
	     #
	     set count 0
	     while { "true" } {
		 incr count 1
		 if { $count <= 20 } {
		     catch { signal_process_tree \
			     HUP $pid } out
		     puts $out
		 } elseif { $count <= 30 } {
		     catch { signal_process_tree \
			     KILL $pid } out
		     puts $out
		 } else {
		     puts "ERROR: Giving Up!"
		     exit 1
		 }
		 sleep 1
		 set display \
		     [display_process_tree $pid]
		 if { ! [process_found $display] } {
		     break
		 }
	     }
	 } else {
	    puts "Previous startcontest has died."
	    puts $display
	    puts ""
	    puts "Run `tracker' to find error logs, or\
	          look in"
	    puts "$judging_directory/log for unchecked\
	          errors."
	 }
	 file delete -force $pid_file
    } else {
	puts "No previous startcontest running."
    }
    exit 0
}

# From this point on we are handling the start or
# -start- argument.

set wrote_pid_file no

# If we have nothing to do, announce this and exit.
#
if { (    ! [file isdirectory $c_d/problems] \
       || [regexp {r.x} [get_access $c_d/problems]] ) \
     && \
     (    ! [file isfile $c_d/help/problems] \
       || [regexp {r..} \
                  [get_access \
		       $c_d/help/problems]] ) } {

    if { $arg == "start" } {
	puts "startcontest has been done previously"
    }
    exit 0
}

# Do something if scoreboard_start_time is a date and
# time.
#
set stime $scoreboard_start_time
if { ! [regexp {^(|problem|team)$} $stime] } {

    if { [catch { set stime [clock scan $stime] }] } {
	error "badly formatted scoreboard_start_time:\
	       $scoreboard_start_time"
    }
    switch -- $arg {

    start {

        # If "start" argument, start subprocess and exit
	# if it is too early, or fall through to grant
	# permissions otherwise.
	#
    	if { [clock seconds] < $stime } {

	    # Check pid_file and delete it if its
	    # process is no longer running.
	    # 
	    if { [file exists $pid_file] } {
		 set pid [read_file $pid_file]
		 set display [display_process_tree $pid]
		 if { [process_found $display] } {
		     puts "Previous startcontest still\
			   running:"
		     puts $display
		     exit 0
		 }
		 file delete -force $pid_file
	    }

	    # Run startcontest as a subprocess.
	    #
	    exec startcontest -start- 0 &

	    # Wait for any output from subprocess.
	    #
	    set count 0
	    while { ! [file exists $pid_file] } {
		sleep 1
		incr count
		if { $count > 120 } {
		    error "startcontest -start- did not\
			   write $pid_file in a timely\
			   manner"
		}
	    }

	    puts "startcontest will run in background\
	          until $scoreboard_start_time"
	    puts "and then execute and email judge"
	    exit 0
	}
    }
    -start- {


        # Come here if subprocess (indicated by special
	# -start- argument).

	# Set pid file.
	#
	write_file $pid_file [current_pid]
	set wrote_pid_file yes

	# Wait for start time and then fall through to
	# grant permissions.  If hpcm_judging.rc has
	# changed since program started, re-execute
	# startcontest -start-.
	#
	while { "yes" } {

	    set pfile $judging_directory/hpcm_judging.rc
	    if {    [file mtime $pfile] \
	         >= $startcontest_start_time } {
	        file delete -force $pid_file
		exec startcontest -start- 0 &
		exit 0
	    }
	        
    	    if { [clock seconds] >= $stime } break
	    sleep 60
	    set start_errors 0
	}
    }
    }
}

# Grant permissions.
#
if { [file isdirectory $c_d/problems] } {
    grant_access $c_d/problems
}
if { [file isfile $c_d/help/problems] } {
    grant_access $c_d/help/problems
}

# Delete any PID file we wrote.
#
if { $wrote_pid_file } {
    file delete -force $pid_file
}

# Notify user that startcontest is finished.  If we are
# subprocess, this is done via hpcm_sendmail.
#
if { $arg == "-start-" } {
    exec hpcm_sendmail << "startcontest done"
} else {
    puts "startcontest done"
}

exit 0

# Include common error catching code:
#
} caught_output
caught_error
