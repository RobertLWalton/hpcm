# TCL Parameters File for Formal Contest Judging
#
# File:		hpcm_judging.rc
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Fri Dec 23 09:29:31 EST 2005
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: hc3 $
#   $Date: 2005/12/23 14:29:56 $
#   $RCSfile: hpcm_judging.rc,v $
#   $Revision: 1.33 $

# Read standard parameters.
#
source $lib_directory/hpcm_judging.rc

# The following parameters determine the type and
# variety of contest.

# Set to the HPCM directory.  $env(HOME) is the home
# directory of the current (judge's) account.
#
set hpcm_directory $env(HOME)/hpcm

# Set "yes" if contestant accounts are to be enabled
# for login by ssh using any of the public keys
# ~/.ssh/{identity,id_rsa,id_dsa}.pub that exist.
#
set ssh_enable yes
# set ssh_enable no

# Contest name, for scoreboard etc.
#
set contest_name "CONTEST NAME IS TBD"

# Scoring type.  One of:
#
#	timed		Timed from time the problems are
#			passed out.
#
#	untimed		Scored according to number of
#			incorrect, in, and inout submis-
#			sions.
#
#	dated		Only date of correct submission
#			is given.
#
#	timed+untimed	The contest is timed, but 12
#			hours after the stop time the
#			contest is converted into an
#			untimed contest.
#
#	timed+dated	The contest is timed, but 12
#			hours after the stop time the
#			contest is converted into a
#			dated contest.
#
# In, inout, and solution submissions are allowed during
# untimed or dated contests (or parts of converted
# contests).
#
set scoring_type timed+untimed

# For timed contests only, the start time and stop time
# of the contest.
#
set start_time  "Jan 1 10:00:00 2030"
set stop_time   "Jan 1 15:00:00 2030"
#
# If the scoreboard is to be frozen at a particular
# time, that is the freeze time.  Otherwise set the
# freeze time to "".
#
# set freeze_time   "Jan 1 14:00:00 2030"
set freeze_time   ""
#
# The penalty IN SECONDS for submitting an incorrect
# solution to a problem for which a correct solution is
# later submitted in a timed contest.  1200 = 20 min.
#
set penalty 1200
# set penalty 0

# If the scoring_type is "timed", "untimed", or "dated",
# leave this as "" if there will be a manager on duty
# during the contest to run the tracker program and
# manually check the scoring.  Otherwise set it to the
# email address to be notified for errors or queries,
# and in this case the scoring will be all automatic.
#
# But if the scoring_type is timed+untimed or timed+
# dated, set this non-"" and it will be used for the
# automatically scored untimed/dated post contest, after
# the timed contest is over.  The timed contest must
# have a manager on duty during to run the tracker
# program.
#
set manager_address ""
# set manager_address "someone@somecomputer"

# Set the following to "yes" if the manager_address is
# not "" AND you want all replies to contestants to be
# CC'ed to the manager when there is no manager on duty.
#
set cc_manager no

# The following are the beginning and ending of the
# initial this_contest help file.  Each should begin and
# end with a line feed, or be "".  Each will then be
# separated from other text by a blank line.
# 
set this_contest_prefix "
THIS FILE IS UNEDITED AND INACCURATE!
"
set this_contest_postfix "
Good Hunting!
"

# List of addresses for to email scoreboard to.  If this
# list contains zzz<YYY>, then every time the scoreboard
# is made it will be emailed to `zzz<YYY>', so in the
# account YYY .procmailrc file you should put something
# like the following to copy the scoreboard into the
# public_html/xxx file of the YYY account:
#
#	:0 b:
#	* ^To:.*zzz
#	| cat >public_html/xxx;\
#	  chmod a+r public_html/xxx
#
set scoreboard_addresses { }

# List of regular expressions that match the test
# accounts which are NOT to appear on the scoreboard
# once a timed contest starts.  They will appear before
# a timed contest starts, and for contests of scoring_
# type "untimed" or "dated".
#
set test_accounts { }

# Ditto for test problems instead of accounts.  Usually
# you need not change this.
#
set test_problems { count javaio }

# List of makecontest arguments that specify the
# problems.  The format is
#
#	INDEX-FILE-NAME,
#	    SUBDIRECTORY/=problems/,
#	    QUALIFIER:include
#
# where the problems are in the SUBDIRECTORY of the
# directory holding the index file.
#
set problems_arguments "
    $hpcm_directory/problem_library/index, \
	public/=problems/, \
	    P1:include
"
# Use the following if index is in directory ~/p and
# problems are in subdirectories of ~/p.  Because the
# problems are subdirectories of ~/p which contains the
# index file, `SUBDIRECTORY/' is the omitted.
# $env(HOME) is the home directory of the current
# (judge's) account.  ALL means include all problems
# listed in the index.
#
# set problems_arguments "
#     $env(HOME)/p/index, \
#         =problems/, \
#             ALL:include
# "
#
# See hpcm/judge/lib/hpcm_judging.rc for more details,
# and `makecontest -doc' for complete details.

# Set the following if you want to use `makeweb' to
# make a web page.  Leave as "" parameters you do not
# want to use (e.g., if web_solutions_password is "" no
# solutions web page will be made).
#
set web_contest_name $contest_name
set web_manager_address $manager_address
set web_solutions_password ""
set web_help_URL ""
set web_scoreboard_URL ""

# Normally you should not have to make changes below
# this point.

# Set "yes" to use GMT for dates in file and directory
# names.  Otherwise the local time zone is used.
#
set use_gmt no

# Set to "long" to include a contestant's primary domain
# name (e.g. `harvard') or "short" to not include the @
# or anything after that.
#
# set submitter_compress_mode long
set submitter_compress_mode short

# Set the manualreply display to have a certain height
# with a given number of blank lines above that.  If you
# have a taller display, increase window_height.
#
# WARNING: If window_height is too large, programs such
# as manualreply and lookat may appear to be malfunc-
# tioning because the information they display is being
# scrolled off the top of the screen.
#
set window_blank_height 16
set window_height 24

# Set to contest directory, in case the $judging_
# directory/contest link needs to be made.  If needed
# and not set, the name of judging directory with
# `judging' replaced by `contest' and trailing password
# removed will be used.
#
# set contest_directory $env(HOME)/contest_TBD

# Set to the prototype account (as per SETUP_PROTOTYPE).
# If not set, the unique account with name of the form
# *[-_]proto and readable files home/setup.tar and home/
# setup.ls is used, if there is such a unique account.
#
# set hpcm_prototype_account TBD

# Time in seconds after stop_time that contest is
# converted from a timed to an untimed or dated contest
# when the scoring_type is timed+untimed or timed+dated.
#
set conversion_delay [expr 12 * 60 * 60]


# You should NOT make changes beyond this point, unless
# you want to tune the contest to be a variant of one of
# the standards supported by this file.  If you do want
# to tune the contest, put changes at the very end of
# this file, where they will override the settings of
# this file.

# Require submission email to have a formatted body
# with HPCM_BEGIN, HPCM_END, and `..'s.
#
set format_submissions yes

# Set contest subtype to timed, untimed, or dated
# according to the contest_type, stop_time,
# conversion_delay, and time of day.  For a timed+xxxxx
# contest the subtype is "timed" till conversion_delay
# after stop_time and then it is "xxxxx".
#
set is_post_contest no
set scoring_subtype $scoring_type
switch $scoring_type {
    timed { }
    untimed { }
    dated { }
    timed+untimed -
    timed+dated {
        set c [clock scan $stop_time]
	incr c $conversion_delay
	if { [clock seconds] < $c } {
	    set scoring_subtype timed
	} else {
	    regexp {^timed\+(.*)$} $scoring_type \
	           forget scoring_subtype
	    set is_post_contest yes
	}
    }
    default {
        error "Bad scoring_type" $scoring_type"
    }
}

# Default arguments to makecontest.
#
set makecontest_arguments "
    -formal \
    [include_if { $scoring_subtype != "timed" } \
    	        "-description"] \
    [include_if { $ssh_enable == "yes" } "-ssh"] \
    $judging_directory/help/index, \
	=help/ \
    $hpcm_directory/contestant/help/index, \
	common/=help/, \
	formal/=help/, \
	advanced/=help/, \
	    formal:include, \
	    common:include, \
	    advanced:include \
    $hpcm_directory/problem_library/index, \
	    demo:include \
    $problems_arguments
"

# Set the start/freeze/stop times for the contest.
#
if { $scoring_subtype == "timed" } {
    set scoreboard_start_time  $start_time
    set scoreboard_freeze_time $freeze_time
    set scoreboard_stop_time   $stop_time
    set scoreboard_penalth     $penalty
}

# Scoreboard name, i.e, the name of the contest.
#
set scoreboard_name $contest_name

# Compute scoreboard_submitters to exclude test
# accounts.
#
set scoreboard_submitters {}
foreach x $test_accounts {
    lappend scoreboard_submitters & ! $x
}
set scoreboard_submitters \
    [lrange $scoreboard_submitters 1 end]
#
# Compute scoreboard_problems to exclude test
# problems.
#
set scoreboard_problems {}
foreach x $test_problems {
    lappend scoreboard_problems & ! $x
}
set scoreboard_problems \
    [lrange $scoreboard_problems 1 end]

# Scoreboard instructions for a timed contest with no
# freeze.  contest/scoreboard.final is produced
# beginning at the stop time and is updated until the
# stop time + 10 minutes.  If you need to update it
# after that, delete it and run `makescoreboard update'.
#
set no_freeze_timed_scoreboard_instructions {

    {# Scoreboard displayed to contestants during
       contest. #}

    { OUTPUT contest/scoreboard.1 START STOP+600 }
    GRANT_ACCESS

    { LINE NAME "Scoreboard" TIME }
    BLANK
    { INPUT contest/scoreboard.1head }
    BLANK
    BAR
    BOARD
    BAR

    {# Final scoreboard for judges. #}

    { OUTPUT contest/scoreboard.final STOP STOP+600 }

    { LINE NAME "Final Results" "" STOP }
    BLANK
    BAR
    BOARD
    BAR
    { INPUT contest/who_where }
    BAR

    {# Scoreboard displayed to contestants before
       contest starts.  Put this last because it changes
       submitters and problems. #}

    { OUTPUT contest/scoreboard.1 "" START }
    GRANT_ACCESS

    { LINE NAME "Pre-Contest Scoreboard" TIME }
    BLANK
    { INPUT contest/scoreboard.1head }
    BLANK
    { LINE "The demo problems `count' and `javaio'\
            will disappear from the" }
    { LINE "scoreboard once the contest starts.  Until\
            the contest starts, dates of" }
    { LINE "first correct submission are displayed (for\
            demo problems).  After the" }
    { LINE "contest starts, problem times (differences\
            of first correct submission" }
    { LINE "times and contest start time) will be\
            displayed." }
    BLANK
    { start_time "" }
    { stop_time START }
    { problems {} }
    { submitters {} }
    BAR
    BOARD
    BAR
}

# Scoreboard instructions for a timed contest WITH
# freeze.  contest/scoreboard.final is produced
# beginning at the stop time and is updated until the
# stop time + 10 minutes.  If you need to update it
# after that, delete it and run `makescoreboard update'.
#
# After scoreboard is frozen, contest/scoreboard.current
# is updated to be the unfrozen and invisible
# scoreboard.
#
set freeze_timed_scoreboard_instructions {

    {# Complete scoreboard after freeze time, available
       privately to judges. #}

    { OUTPUT contest/scoreboard.current FREEZE "" }

    { LINE NAME "Current Scoreboard" TIME }
    BLANK
    BAR
    BOARD
    BAR

    {# Final scoreboard for judges. #}

    { OUTPUT contest/scoreboard.final \
             STOP STOP+600 }

    { LINE NAME "Final Results" STOP }
    BLANK
    BAR
    BOARD
    BAR
    { INPUT contest/who_where }
    BAR

    {# Displayed scoreboard is assembled below by
       concatenating scoreboard.freeze,
       scoreboard.1head, and scoreboard.public #}

    {# scoreboard.public during contest. #}

    { OUTPUT contest/scoreboard.public START FREEZE }

    BAR
    BOARD
    BAR

    {# scoreboard.public before contest starts.  Put
       this last because it changes submitters and
       problems. #}

    { OUTPUT contest/scoreboard.public "" START }

    { LINE "The demo problems `count' and `javaio'\
            will disappear from the" }
    { LINE "scoreboard once the contest starts.  Until\
            the contest starts, dates of" }
    { LINE "first correct submission are displayed (for\
            demo problems).  After the" }
    { LINE "contest starts, problem times (differences\
            of first correct submission" }
    { LINE "times and contest start time) will be\
            displayed." }
    { start_time "" }
    { stop_time START }
    { problems {} }
    { submitters {} }
    BAR
    BOARD
    BAR

    {# scoreboard.freeze, which does not exist until
       the freeze time. #}

    { OUTPUT contest/scoreboard.freeze FREEZE FREEZE }

    BLANK
    { LINE "To heighten suspense, scoreboard updating\
            has been stopped as of:" }
    { LINE "" FREEZE "" }
    { LINE "You will be given a copy of the final\
            scoreboard after winners have been" }
    { LINE "announced at the post contest meeting." }

    {# Assemble displayed scoreboard by concatenating
       scoreboard.{freeze,1head,public}. #}

    { OUTPUT contest/scoreboard.1 }
    GRANT_ACCESS
    SEND

    { LINE NAME "Public Scoreboard" TIME }
    { INPUT contest/scoreboard.freeze }
    BLANK
    { INPUT contest/scoreboard.1head }
    BLANK
    { INPUT contest/scoreboard.public }
}

# Scoreboard instructions to be used contest has been
# converted from timed to untimed or dated:
#
set post_contest_scoreboard_instructions {

    { OUTPUT contest/scoreboard.1 "" "" }
    GRANT_ACCESS
    SEND

    { LINE NAME "Post Contest Scoreboard" TIME }
    BLANK
    { INPUT contest/scoreboard.1head }
    BLANK

    { start_time "" }
    { stop_time "" }
    { problems {} }
    { submitters {} }
    BAR
    BOARD
    BAR
}

# Scoreboard instructions to be used contest for an
# untimed or dated contest:
#
set not_timed_scoreboard_instructions {

    { OUTPUT contest/scoreboard.1 "" "" }
    GRANT_ACCESS
    SEND

    { LINE NAME "Public Scoreboard" TIME }
    BLANK
    { INPUT contest/scoreboard.1head }
    BLANK

    { start_time "" }
    { stop_time "" }
    BAR
    BOARD
    BAR
}

# Scoreboard instructions for this contest:
#
if { $is_post_contest } {
    set scoreboard_instructions \
        $post_contest_scoreboard_instructions
} elseif { $scoring_subtype != "timed" } {
    set scoreboard_instructions \
        $not_timed_scoreboard_instructions
} elseif { $freeze_time == "" } {
    set scoreboard_instructions \
        $no_freeze_timed_scoreboard_instructions
} else {
    set scoreboard_instructions \
        $freeze_timed_scoreboard_instructions
}

if { $scoring_subtype == "timed" } {
    set response_mode ""
    set scoreboard_use_qualifiers no
} elseif { $scoring_subtype == "untimed" } {
    set response_mode in+inout+solution
    set scoreboard_use_qualifiers yes
} else {
    set response_mode in+inout+solution
    set scoreboard_use_qualifiers no
}

# Set up manager for this contest.
#
# For the timed part of a "timed+xxxxx" contest there
# is no manager during the timed part of the contest.
#
if {    $scoring_type == "timed" \
     && $scoring_type != $scoring_subtype } {
    set manager_address ""
}
if { $manager_address == "" } {
    set scoring_mode auto+manual
    set reply_mode auto+manual
    set log_mode manual
    set reply_manager ""
    set log_manager ""
} else {
    set scoring_mode auto
    set reply_mode auto
    set log_mode auto
    set reply_manager $manager_address
    set log_manager $manager_address
}
if { $cc_manager } {
    set response_manager $reply_manager
} else {
    set response_manager ""
}

# Compute this_contest.
#
set sqf $scoreboard_qualifier_factors
set in_percent [expr 100 - 100 * [lindex $sqf 0]]
set in_percent [format {%.0f} $in_percent]
set inout_percent [expr 100 - 100 * [lindex $sqf 1]]
set inout_percent [format {%.0f} $inout_percent]
set ic_percent [expr 100 - 100 * [lindex $sqf 4]]
set ic_percent [format {%.0f} $ic_percent]
set penalty_minutes [expr $penalty / 60]

set this_contest "$this_contest_prefix[
    include_if { [regexp {^timed} $scoring_type] } "
The command `help' will display this file.  You have
also been given a printout of the important help and
demonstration files.
"][include_if { ! [regexp {^timed} $scoring_type] } "
The command `help' will display this file.  The impor-
tant help and demonstation problem files are available
via the contest web page, or you have been given a
printout of these files.
"]
This is a `formal' contest.  The command

	help formal_contest

displays more details about formal contests.

To display a list of the help files available use the
command `help index'.  Note that if something in the
index has the name `help/topic' you use the command
`help topic' to view it.
[include_if { [regexp {^timed} $scoring_type] } "
The contest managers will log in for you.  You will NOT
be given a password.  If you have an xterminal, the xcsh
command will make more windows: see `help xterminals'.

The contest managers will inform you in writing which
account you will be using.  It is your responsibility
to double check that the contest managers have logged
you into the right account.

The command `hpcm_get' will get a demonstration problem
into your directory ~/demos/count (where ~ denotes your
home directory).  Read ~/demos/count/README and ~/demos/
count/Makefile and practice submitting the demonstra-
tion problem.

Hpcm_get will also get all the contest problems into
your `~/problems' directory AFTER the contest official-
ly starts.  At the contest start time, you will be given
a printout of all the problem descriptions.  The command
`help problems' will display a list of all the problems
AFTER the contest starts.  Also see `help solving'.

The command `scoreboard' will display the scoreboard.
The time of a problem is the time between the start
time of the contest and the time a solution is submit-
ted.  See `help scoreboard'.
[include_if { $penalty == 0 } "
There is no time penalty for an incorrect submission for
this contest.
"][include_if { $penalty > 0 } "
There is a $penalty_minutes minute time penalty for an\
    incorrect
submission for this contest.  This is applied only to
incorrect submissions of problems you eventually
correctly submit.
"]"][include_if { ! [regexp {^timed} $scoring_type] } "
The contest managers will inform you in writing which
account and password you will be using.

The command `hpcm_get' will get the problems into your
directory.  Included will be the demonstration problem
~/demos/count (where ~ denotes your home directory).
Read ~/demos/ count/README and ~/demos/count/Makefile
and practice submitting the demonstration problem.

You will be given a description of the problems on the
web or in a printout.  The command `help problems' will
display a list of all the problems.  Also see `help
solving'.

You can print on the printer of your choice, or get
printouts emailed to you, by making a ~/PRINTER file.
See `help print' for details.
"][include_if { $scoring_type == "dated" } "
The command `scoreboard' will display the scoreboard.
This contains the date of each correct submission.  See
`help scoreboard' for more details.
"][include_if { $scoring_type == "untimed" } "
The command `scoreboard' will display the scoreboard.
Scoring is determined by submission types (submit,
in-submit, inout-submit) for incorrect submissions,
according to the following penalties:

    incorrect `submit'		$ic_percent%
    incorrect `in-submit'	$in_percent%
    incorrect `inout-submit'	$inout_percent%

Penalties are applied only to incorrect submissions for
problems you eventually correctly submit.  See `help
scoreboard' for details.
"]
To send a question to the contest manager DO NOT try
to e-mail the manager directly.  Instead edit the ques-
tion into a file qqq and use the command:

	hpcm_sendmail < qqq
[include_if { [regexp {^timed} $scoring_type] } "
Output of the print commands (see `help print') will
be brought to you.  Please do NOT try to find the
printer.  For more information see `help print'.

You CANNOT use the alternative submit commands that
make `in-submit', `inout-submit', or `solution-submit'.

You CANNOT use a web browser.  The `javahelp' command
gives on-line Java documentation: see `help java'.  You
may use any printed matterial you like, but cannot
communicate electronically with the world outside the
contest.
"][include_if { $scoring_type == "timed+untimed" } "
After the contest is over, it will be converted to a
different type of contest.  You will be given your
account name and password.  `in-submit', `inout-submit',
and `solution-submit' will be allowed.  The judging will
be completely automatic.  The scoreboard will use the
submission type (`submit', `in-submit', `inout-submit')
of incorrect submissions in place of time.  You will be
able to print by making a ~/PRINTER file: see `help
print'.
"][include_if { $scoring_type == "timed+dated" } "
After the contest is over, it will be converted to a
different type of contest.  You will be given your
account name and password.  `in-submit', `inout-submit',
and `solution-submit' will be allowed.  The judging will
be completely automatic.  The scoreboard will merely
record the date of correct submissions.  You will be
able to print by making a ~/PRINTER file: see `help
print'.
"]
$this_contest_postfix"

# Add parameter settings here to override those above.
