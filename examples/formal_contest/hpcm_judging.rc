# TCL Parameters File for Formal Contest Judging
#
# File:		hpcm_judging.rc
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Wed Sep 20 04:22:49 EDT 2006
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: walton $
#   $Date: 2006/09/20 08:57:24 $
#   $RCSfile: hpcm_judging.rc,v $
#   $Revision: 1.54 $

# Table of Contents
#
#	Parameters to be Modified
#	Parameters: Local Account Parameters
#	Parameters: Web Page Parameters
#	Parameters Not Usually Modified
#	Computed Parameters (Do Not Modify)
#	Parameter Overrides

# Parameters to be Modified
# ---------- -- -- --------

# Read standard parameters.
#
source $lib_directory/hpcm_judging.rc

# The following parameters determine the type and
# variety of contest.

# Set to the HPCM directory.  $env(HOME) is the home
# directory of the current (judge's) account.
#
set hpcm_directory $env(HOME)/hpcm

# Contest name, for scoreboard etc.
#
set contest_name "CONTEST NAME IS TBD"

# Scoring type.  One of:
#
#	timed		Timed from time the problems are
#			passed out.
#
#	feedback	Scored according to number of
#			incorrect, in, and inout submis-
#			sions.
#
#	dated		Only date of correct submission
#			is given.
#
#	timed+feedback	The contest is timed, but 12
#			hours after the stop time the
#			contest is converted into an
#			feedback contest.
#
#	timed+dated	The contest is timed, but 12
#			hours after the stop time the
#			contest is converted into a
#			dated contest.
#
# In, inout, and solution submissions are allowed during
# feedback or dated contests (or parts of converted
# contests).
#
set scoring_type timed+feedback

# For timed contests only, the start time and stop time
# of the contest.
#
set start_time  "Jan 1 10:00:00 2030"
set stop_time   "Jan 1 15:00:00 2030"
#
# If the public scoreboard is to be frozen at a parti-
# cular time, to increase suspense, that time is the
# freeze time.  Otherwise set the freeze time to "".
#
# set freeze_time   "Jan 1 14:00:00 2030"
set freeze_time   ""
#
# The penalty in minutes for submitting an incorrect
# solution to a problem for which a correct solution is
# later submitted in a timed contest.
#
set penalty_minutes 20
# set penalty_minutes 0

# If the scoring_type is "timed", "feedback", or
# "dated", leave this as "" if there will be a manager
# on duty during the contest to run the tracker program
# and manually check the scoring.  Otherwise set it to
# the email address to be notified for errors or
# queries, and in this case the scoring will be all
# automatic.
#
# But if the scoring_type is timed+feedback or timed+
# dated, set this non-"" and it will be used for the
# automatically scored feedback/dated post contest,
# after the timed contest is over.  In these cases where
# a timed contest is converted to an untimed post
# contest, the timed contest must have a manager on duty
# to run the tracker program, and only the post contest
# is automatically scored.
#
set manager_address ""
# set manager_address "someone@somecomputer"

# Set the following to "yes" if the manager_address is
# not "" AND you want all replies to contestants to be
# CC'ed to the manager when there is no manager on duty.
#
set cc_manager no

# The following are the beginning and ending of the
# initial version of the ./help/this_contest file.  Each
# should begin and end with a line feed, or be "".  Each
# will then be separated from other text by a blank
# line.
#
# If you want to modify this_contest further, you may
# edit the ./help/this_contest file directly after it
# has been initially made.  The version of the file that
# is made by this hpcm_judging.rc file will be mantained
# in ./help/this_contest_parameter for reference pur-
# poses, while ./help/this_contest will be left untouch-
# ed after it has been edited to be different from
# ./help/this_contest_parameter.
# 
set this_contest_prefix "
THIS FILE IS UNEDITED AND INACCURATE!
"
set this_contest_postfix "
Good Hunting!
"

# The following is the printer map for any timed
# contest.  Entries are lines of the format
#
#	REGEXP	PRINTER
#
# where REGEXP is an expr(1) (not TCL) regular expres-
# sion that matches the account name and PRINTER is the
# printer.  Comment lines begin with #, and blank lines
# are ignored.  Backslashes in regular expressions must
# be doubled.  Must end with a line feed.
#
# If the PRINTER contains an @, it is an email address
# to which postscript is mailed.  If PRINTER begins with
# an @, the beginning @ is removed and the rest is
# treated as an email address to which the postscript
# is mailed as an attachment.
#
# The `catch' is just in case $env(PRINTER) is undefined
# and this variable is not needed.
#
catch { set timed_printer_map "
# Do not edit.  This is copied from the
# timed_printer_map global variable in the
# hpcm_judging.rc file in the judging directory.
#
.* $env(PRINTER)
" }

# TCL list of TCL regular expressions that match the
# test accounts which are NOT to appear on the score-
# board once a timed contest starts.  They will appear
# before a timed contest starts, and for contests of
# scoring_type "feedback" or "dated", but not for
# the post contests of "timed+xxxx" contests.
#
set test_accounts { }

# Ditto for test problems instead of accounts.  Usually
# you need not change this.
#
set test_problems { count javaio }

# List of makecontest arguments that specify the
# problems.  The format is
#
#	INDEX-FILE-NAME,
#	    SUBDIRECTORY/=problems/,
#	    QUALIFIER:include
#
# where the problems are in the SUBDIRECTORY of the
# directory holding the index file.  See below for
# examples.
#
set problems_arguments "
    $hpcm_directory/problem_library/index, \
	public/=problems/, \
	    P1:include
"
# Use the following if index is the file ~/ppp/iii and
# problems are in subdirectories of ~/ppp.  Because the
# problems are subdirectories of ~/ppp which contains
# the index file, `SUBDIRECTORY/' is the omitted.
# $env(HOME) is the home directory of the current
# (judge's) account.  `ALL' means include all problems
# listed in the index.
#
# set problems_arguments "
#     $env(HOME)/ppp/iii, \
#         =problems/, \
#             ALL:include
# "
#
# See hpcm/judge/lib/hpcm_judging.rc `makecontest_
# arguments' for more details, and `makecontest -doc'
# for complete details.

# Parameters: Local Account Parameters
# ----------- ----- ------- ----------

# Parameters to be set if there are local contestant
# accounts:
#

# Browser to use for javahelp and/or stlhelp.
#
set browser lynx

# Location of JAVA API index for browser to use to
# implement javahelp.  If not set, the javahelp contes-
# tant command is not enabled.
#
set java_api_index \
    /usr/local/jdk/docs/api/overview-tree.html

# Location of STL API index for browser to use to
# implement stlhelp.  If not set, the stlhelp contestant
# command is not enabled.
#
set stl_api_index /usr/local/STL_doc/index.html

# If "yes" contestants can use the browser.  If "no",
# contestants cannot use the browser directly, but must
# use javahelp or stlhelp if they are enabled.
#
set browser_ok no

# Set "yes" if contestant accounts are to be enabled
# for login by ssh using any of the public keys
# ~/.ssh/{identity,id_rsa,id_dsa}.pub that exist.
#
set ssh_enable yes
# set ssh_enable no


# Parameters: Web Page Parameters
# ----------- --- ---- ----------

# URL of contest web page.
#
set web_page_URL "www.somewhere.edu/~xxx/yyy"

# The following are passed to `makeweb' to make the web
# page.  Leave as "" parameters you do not want to use
# (e.g., if web_solutions_password is "" no solutions
# web page will be made).
#
# The web_manager_address will be listed as a contact
# on the web page.  The web_solutions_password PPP will
# be used to name a subdirectory `private/PPP' of the
# web page directory that will hold the solutions.  No
# link will be made to this directory, and the `private'
# subdirectory will be unreadable to the world, so PPP
# will act as a password.  The web_help_URL is the URL
# of the help page (see hpcm/contestant/help Makefile)
# relative to the contest web page.  The web_scoreboard_
# URL is the URL of the scoreboard relative to the web
# page; usually this is posted by using scoreboard_
# addresses (see above).  Problems will be put on the
# web page if "web" is in `description_type'.
#
set web_solutions_password ""
set web_help_URL ""
set web_scoreboard_URL ""

# TCL list of addresses to email scoreboard to.  If this
# list contains zzz<YYY>, then every time the scoreboard
# is updated it will be emailed to `zzz<YYY>', so in the
# account YYY .procmailrc file you should put something
# like the following to copy the scoreboard into the
# public_html/xxx file of the YYY account:
#
#	:0 b:
#	* ^To:.*zzz
#	| cat >public_html/xxx;\
#	  chmod a+r public_html/xxx
#
# If there are spaces or quotes in zzz<YYY>, it should
# be enclosed in {} braces in the address list.
#
set scoreboard_addresses { }
# set scoreboard_addresses {
#	{"some thing"<someaccount@somecomputer>}
# }

# Parameters Not Usually Modified
# ---------- --- ------- --------

# Normally you should not have to make changes below
# this point.

# Set to "yes" if in addition to normal submissions from
# contestants with accounts, you want to allow email
# submissions.  You may want to reset submitter_
# compress_mode below if you reset this.
#
set allow_email_submissions no

# Set to "long" to include a contestant's primary domain
# name (e.g. `harvard') or "short" to not include the @
# or anything after that.
#
# set submitter_compress_mode long
set submitter_compress_mode short

# Set "yes" to use GMT for dates in file and directory
# names.  Otherwise the local time zone is used.
#
set use_gmt no

# Set the manualreply display to have a certain height
# with a given number of blank lines above that.  If you
# have a taller display, increase window_height.
#
# WARNING: If window_height is too large, programs such
# as manualreply and lookat may appear to be malfunc-
# tioning because some of the information they display
# is being scrolled off the top of the screen.
#
set window_blank_height 16
set window_height 24

# Set to contest directory, in case the $judging_
# directory/contest link needs to be made.  If needed
# and not set, the name of judging directory with
# `judging' replaced by `contest' and trailing password
# removed will be used.
#
# set contest_directory $env(HOME)/contest_TBD

# Set to the prototype account (as per SETUP_PROTOTYPE).
# If not set, the unique account with name of the form
# *[-_]proto and readable files home/setup.tar, home/
# empty.ls, and home/setup.ls is used, if there is such
# a unique account.
#
# set hpcm_prototype_account TBD

# Time in seconds after stop_time that contest is
# converted from a timed to a feedback or dated contest
# when the scoring_type is timed+feedback or
# timed+dated.
#
set conversion_delay [expr 12 * 60 * 60]

# Set to "no" if you do not want makecontest to run
# `makescoreboard start'.
#
set makescoreboard yes

# Set to "no" if you do not want makecontest to run
# `startcontest start'.
#
set startcontest yes

# The following is the printer map for a feedback or
# dated contest.  It lets each contestant determine
# his/her own printer by placing the printer name in the
# ~/PRINTER file of the contestant's account.  See
# timed_printer_map above and `hpcm/contestant/bin/
# printer_pipe -doc' for more documentation.
#
set feedback_printer_map "
# Do not edit.  This is copied from the
# feedback_printer_map global variable in the
# hpcm_judging.rc file in the judging directory.
#
.* !~/PRINTER
"


# Computed Parameters (Do Not Modify)
# -------- ---------- ---------------

# You should NOT make changes beyond this point, unless
# you want to tune the contest to be a variant of one of
# the standards supported by this file.  If you do want
# to tune the contest, put changes at the very end of
# this file, where they will override the settings of
# this file.

set javaok [info exists java_api_index]
if {    $javaok \
     && [regexp {r..} [get_access $java_api_index]] } {

    set javahelp "
# Do not edit.  This file is generated from information
# provided by the `browser' and `java_api_index' global
# variables in the hpcm_judging.rc file in the judging
# directory.
#
$browser '$browser $java_api_index'
"
}


set stlok [info exists stl_api_index]
if {    $stlok \
     && [regexp {r..} [get_access $stl_api_index]] } {

    set stlhelp "
# Do not edit.  This file is generated from information
# provided by the `browser' and `stl_api_index' global
# variables in the hpcm_judging.rc file in the judging
# directory.
#
$browser '$browser $stl_api_index'
"
}

# Require or do not require submission email to have a
# formatted body with HPCM_BEGIN, HPCM_END, and `..'s.
#
if { $allow_email_submissions == "no" } {
    set use_authentication yes
    set format_submissions yes
} elseif { $allow_email_submissions == "yes" } {
    set use_authentication no
    set format_submissions no
} else {
    error "Bad allow_email_submissions value:\
           $allow_email_submissions"
}

# Set scoring subtype to timed, feedback, or dated
# according to the contest_type, stop_time, conversion_
# delay, and time of day.  For a timed+xxxxx contest the
# subtype is "timed" till conversion_delay after stop_
# time and then it is "xxxxx".
#
# For a convertible contest, at the time of conversion
# makecontest is run and its output is put in the
# file $judging_directory/post_contest_reconfiguration.
#
set is_post_contest no
set scoring_subtype $scoring_type
switch $scoring_type {
    timed { }
    feedback { }
    dated { }
    timed+feedback -
    timed+dated {
        set c [clock scan $stop_time]
	incr c $conversion_delay
	if { [clock seconds] < $c } {
	    set scoring_subtype timed
	} else {
	    regexp {^timed\+(.*)$} $scoring_type \
	           forget scoring_subtype
	    set is_post_contest yes
	    set f $judging_directory
	    set f $f/post_contest_reconfiguration
	    if { [create_file $f] } {
	        if { ! [file isdirectory contest] } {
		    error "stop_time is too soon"
		}
	        write_file $f [eval exec makecontest \
		     -printer_map -scoreboard \
		     -problems -description \
		     $problems_arguments]
	    }
	}
    }
    default {
        error "Bad scoring_type" $scoring_type"
    }
}

# Set printer_map according to contest subtype.  Catch
# errors in case printer_maps are undefined.
#
if { $scoring_subtype == "timed" } {
    catch { set printer_map $timed_printer_map }
} else {
    catch { set printer_map $feedback_printer_map }
}

# Default arguments to makecontest.
#
set makecontest_arguments "
    -formal -printer_map \
    [include_if { $javaok } "-javahelp"] \
    [include_if { $stlok } "-stlhelp"] \
    [include_if { $scoring_subtype != "timed" } \
    	        "-description"] \
    [include_if { $ssh_enable == "yes" } "-ssh"] \
    [include_if { $makescoreboard == "yes" } \
    		"-scoreboard"] \
    [include_if { $startcontest == "yes" } \
    		"-startcontest"] \
    $judging_directory/help/index, \
	=help/ \
    $hpcm_directory/contestant/help/index, \
	common/=help/, \
	contest/=help/, \
	advanced/=help/, \
	    formal:include, \
	    common:include, \
	    advanced:include \
    $hpcm_directory/problem_library/index, \
	    demo:include \
    $problems_arguments
"

# Set the start/freeze/stop times for the contest.
#
if { $scoring_subtype == "timed" } {
    set scoreboard_start_time  $start_time
    set scoreboard_freeze_time $freeze_time
    set scoreboard_stop_time   $stop_time
    set scoreboard_penalty     \
        [expr 60 * $penalty_minutes]
} else {
    set scoreboard_start_time  ""
    set scoreboard_freeze_time ""
    set scoreboard_stop_time   ""
}

# Scoreboard name, i.e, the name of the contest.
#
set scoreboard_name $contest_name

# Compute scoreboard_submitters to exclude test
# accounts.
#
set scoreboard_submitters {}
foreach x $test_accounts {
    lappend scoreboard_submitters & ! $x
}
set scoreboard_submitters \
    [lrange $scoreboard_submitters 1 end]
#
# Compute scoreboard_problems to exclude test
# problems.
#
set scoreboard_problems {}
foreach x $test_problems {
    lappend scoreboard_problems & ! $x
}
set scoreboard_problems \
    [lrange $scoreboard_problems 1 end]

# Scoreboard instructions without scoreboard freezing.
# These instructions make a scoreboard page in the file:
#
#	JD/contest/scoreboard.1
#
# where JD is the $judging_directory.  World read access
# is granted to this file, which is also sent to any
# addresses in the scoreboard_addresses global variable.
# The file has the format:
#
#  NAME        [Pre-Contest] Scoreboard          TIME
#
#        <contents of JD/contest/scoreboard.1head>
#
#   [<pre-contest comments>]
#
#   ==== ===== ===== ===== ===== ===== ===== ===== =====
#	   <scoreboard table>
#   ==== ===== ===== ===== ===== ===== ===== ===== =====
#
# Before the start time problem submission dates are
# given along with pre-contest comments.
#
# From the stop time of the contest until 10 minutes
# after the stop time, the file
#
#		JD/contest/scoreboard.final
#
# is written with final scoreboard table and the con-
# tents of the JD/contest/who_where file.  If judging
# has not finished within 10 minutes of the end of the
# contest, just finish judging, delete this file, and
# wait for it to be updated automatically (which will
# happen within 60 seconds).
#
set no_freeze_timed_scoreboard_instructions {

    {# Scoreboard displayed to contestants during
       contest. #}

    { OUTPUT contest/scoreboard.1 START STOP+600 }
    GRANT_ACCESS
    SEND

    { LINE NAME "Scoreboard" TIME }
    BLANK
    { INPUT contest/scoreboard.1head }
    BLANK
    BAR
    BOARD
    BAR

    {# Final scoreboard for judges. #}

    { OUTPUT contest/scoreboard.final STOP STOP+600 }

    { LINE NAME "Final Results" STOP }
    BLANK
    BAR
    BOARD
    BAR
    { INPUT contest/who_where }
    BAR

    {# Scoreboard displayed to contestants before
       contest starts.  Put this last because it changes
       submitters and problems. #}

    { OUTPUT contest/scoreboard.1 "" START }
    GRANT_ACCESS
    SEND

    { LINE NAME "Pre-Contest Scoreboard" TIME }
    BLANK
    { INPUT contest/scoreboard.1head }
    BLANK
    { LINE "The demo problems `count' and `javaio'\
            will disappear from the" }
    { LINE "scoreboard once the contest starts.  Until\
            the contest starts, dates of" }
    { LINE "first correct submission are displayed (for\
            demo problems).  After the" }
    { LINE "contest starts, problem times (differences\
            of first correct submission" }
    { LINE "times and contest start time) will be\
            displayed." }
    BLANK
    { start_time "" }
    { stop_time START }
    { problems {} }
    { submitters {} }
    BAR
    BOARD
    BAR
}

# Scoreboard instructions for a timed contest WITH
# freeze.  These instructions make a scoreboard page in
# the file:
#
#		JD/contest/scoreboard.1
#
# where JD is the $judging_directory.  World read access
# is granted to this file, which is also sent to any
# addresses in the scoreboard_addresses global variable.
# The file has the format:
#
#  NAME             Public Scoreboard             TIME
#
#       <contents of JD/contest/scoreboard.freeze>
#
#       <contents of JD/contest/scoreboard.1head>
#
#       <contents of JD/contest/scoreboard.public>
#
# The file
#
#		JD/contest/scoreboard.public
#
# has two versions, one computed before the contest
# start time, and one computed between the contest start
# time and the contest freeze time.  Before the contest
# start time it is a scoreboard table computed with ""
# start time, so dates and not problem times are
# displayed, that includes demo problems and test
# accounts, with the scoreboard table being prefixed by
# a comment that after the start time problem times will
# be displayed and demos will not be.  After the contest
# start time it is just a scoreboard table with the
# freeze time as stop time, no demos, and no test
# accounts.
#
# The file
#
#		JD/contest/scoreboard.freeze
#
# is a notice that the scoreboard is frozen.  This file
# is created at the freeze time, and does not exist
# before then.
#
# All this makes the publicly available scoreboard.
# In addition there are two other scoreboards that are
# only visible to judges.  The file
#
#		JD/contest/scoreboard.current
#
# is a scoreboard table with the contest stop time that
# is made at freeze time and kept up-to-date indefin-
# itely thereafter.  The file
#
#		JD/contest/scoreboard.final
#
# is a printable final scoreboard that is made from the
# stop time until 10 minutes after the stop time, and
# includes a scoreboard table with the contest stop time
# followed by a copy of the
#
#		JD/contest/who_where
#
# file.  Both the .current and .final files are not
# readable by non-judging accounts.
#
# If you need to update the scoreboard.final file after
# it is no longer being made (more than 10 minutes after
# the contest stop time), delete it and wait for it to
# be updated automatically (which will happen within 60
# seconds).
#
set freeze_timed_scoreboard_instructions {

    {# Complete scoreboard after freeze time, available
       privately to judges. #}

    { OUTPUT contest/scoreboard.current FREEZE "" }

    { LINE NAME "Current Scoreboard" TIME }
    BLANK
    BAR
    BOARD
    BAR

    {# Final scoreboard for judges. #}

    { OUTPUT contest/scoreboard.final \
             STOP STOP+600 }

    { LINE NAME "Final Results" STOP }
    BLANK
    BAR
    BOARD
    BAR
    { INPUT contest/who_where }
    BAR

    {# Displayed scoreboard is assembled below by
       concatenating scoreboard.freeze,
       scoreboard.1head, and scoreboard.public #}

    {# scoreboard.public during contest. #}

    { OUTPUT contest/scoreboard.public START FREEZE }

    BAR
    BOARD
    BAR

    {# scoreboard.public before contest starts.  Put
       this last because it changes submitters and
       problems. #}

    { OUTPUT contest/scoreboard.public "" START }

    { LINE "The demo problems `count' and `javaio'\
            will disappear from the" }
    { LINE "scoreboard once the contest starts.  Until\
            the contest starts, dates of" }
    { LINE "first correct submission are displayed (for\
            demo problems).  After the" }
    { LINE "contest starts, problem times (differences\
            of first correct submission" }
    { LINE "times and contest start time) will be\
            displayed." }
    { start_time "" }
    { stop_time START }
    { problems {} }
    { submitters {} }
    BAR
    BOARD
    BAR

    {# scoreboard.freeze, which does not exist until
       the freeze time. #}

    { OUTPUT contest/scoreboard.freeze FREEZE FREEZE }

    BLANK
    { LINE "To heighten suspense, scoreboard updating\
            has been stopped as of:" }
    { LINE "" FREEZE "" }
    { LINE "You will be given a copy of the final\
            scoreboard after winners have been" }
    { LINE "announced at the post contest meeting." }

    {# Assemble displayed scoreboard by concatenating
       scoreboard.{freeze,1head,public}. #}

    { OUTPUT contest/scoreboard.1 }
    GRANT_ACCESS
    SEND

    { LINE NAME "Public Scoreboard" TIME }
    { INPUT contest/scoreboard.freeze }
    BLANK
    { INPUT contest/scoreboard.1head }
    BLANK
    { INPUT contest/scoreboard.public }
}

# Scoreboard instructions to be used after contest has
# been converted from timed to feedback.
#
# scoreboard_subtype must be set to "feedback" or
# "dated" when this is used, as only scoreboard_
# global variables are visible to `if' statements in
# scoreboard instructions.
#
set post_contest_scoreboard_instructions {

    { OUTPUT contest/scoreboard.1 "" "" }
    GRANT_ACCESS
    SEND

    { LINE NAME "Post Contest Scoreboard" TIME }
    BLANK
    if { $scoreboard_subtype == "feedback" } {
	{LINE "The scoreboard has been re-constituted\
	       post-contest with feedback scoring." }
    } else {
	{LINE "The scoreboard has been re-constituted\
	       post-contest with unranked scoring." }
    }
    {LINE "The order of contestants will differ\
           from that of the actual contest." }
    {LINE "Execute `help scoreboard' to interpret\
           the scoreboard." }
    BLANK
    { INPUT contest/scoreboard.1head }
    BLANK

    { start_time "" }
    { stop_time "" }
    BAR
    BOARD
    BAR
}

# Scoreboard instructions to be used for a feedback or
# dated contest:
#
set not_timed_scoreboard_instructions {

    { OUTPUT contest/scoreboard.1 "" "" }
    GRANT_ACCESS
    SEND

    { LINE NAME "Public Scoreboard" TIME }
    BLANK
    { INPUT contest/scoreboard.1head }
    BLANK

    { start_time "" }
    { stop_time "" }
    BAR
    BOARD
    BAR
}

# Scoreboard instructions for this contest:
#
if { $is_post_contest } {
    set t $scoring_subtype
    set scoreboard_subtype $scoring_subtype
    set scoreboard_instructions \
        $post_contest_scoreboard_instructions
} elseif { $scoring_subtype != "timed" } {
    set scoreboard_instructions \
        $not_timed_scoreboard_instructions
} elseif { $freeze_time == "" } {
    set scoreboard_instructions \
        $no_freeze_timed_scoreboard_instructions
} else {
    set scoreboard_instructions \
        $freeze_timed_scoreboard_instructions
}

if { $scoring_subtype == "timed" } {
    set response_mode ""
    set scoreboard_use_feedback no
} elseif { $scoring_subtype == "feedback" } {
    set response_mode in+inout+solution
    set scoreboard_use_feedback yes
} else {
    set response_mode in+inout+solution
    set scoreboard_use_feedback no
}

# Set up manager for this contest.
#
# For the timed part of a "timed+xxxxx" contest there
# is no manager during the timed part of the contest.
#
if {    $scoring_subtype == "timed" \
     && $scoring_type != $scoring_subtype } {
    set manager_address ""
}
if { $manager_address == "" } {
    set scoring_mode auto+manual
    set reply_mode auto+manual
    set log_mode manual
    set reply_manager ""
    set log_manager ""
} else {
    set scoring_mode auto
    set reply_mode auto
    set log_mode auto
    set reply_manager $manager_address
    set log_manager $manager_address
}
if { $cc_manager } {
    set response_manager $reply_manager
} else {
    set response_manager ""
}

# Compute this_contest.
#
set sqf $scoreboard_qualifier_factors
set in_percent [expr 100 - 100 * [lindex $sqf 0]]
set in_percent [format {%.0f} $in_percent]
set inout_percent [expr 100 - 100 * [lindex $sqf 1]]
set inout_percent [format {%.0f} $inout_percent]
set ic_percent [expr 100 - 100 * [lindex $sqf 4]]
set ic_percent [format {%.0f} $ic_percent]

set this_contest "$this_contest_prefix[
    include_if { [regexp {^timed} $scoring_type] } "
The command `help' will display this file.  You have
also been given a printout of the important help and
demonstration files.
"][include_if { ! [regexp {^timed} $scoring_type] } "
The command `help' will display this file.  The impor-
tant help and demonstation problem files are available
via the contest web page, or you have been given a
printout of these files.
"]
This is a `formal' contest.  The command

	help formal_contest

displays more details about formal contests.

To display a list of the help files available use the
command `help index'.  Note that if something in the
index has the name `help/topic' you use the command
`help topic' to view it.
[include_if { [regexp {^timed} $scoring_type] } "
The contest managers will log in for you.  You will NOT
be given a password.  If you have an xterminal, the xcsh
command will make more windows: see `help xterminals'.

The contest managers will inform you in writing which
account you will be using.  It is your responsibility
to double check that the contest managers have logged
you into the right account.

The command `hpcm_get' will get a demonstration problem
into your directory ~/demos/count (where ~ denotes your
home directory).  Read ~/demos/count/README and ~/demos/
count/Makefile and practice submitting the demonstra-
tion problem.

Hpcm_get will also get all the contest problems into
your `~/problems' directory AFTER the contest official-
ly starts.  At the contest start time you will be given
a printout of all the problem descriptions.  The command
`help problems' will display a list of all the problems
AFTER the contest starts.  Also see `help solving'.

The command `scoreboard' will display the scoreboard.
The time of a problem is the time between the start
time of the contest and the time a solution is submit-
ted.  See `help scoreboard'.
[include_if { $penalty_minutes == 0 } "
There is no time penalty for an incorrect submission for
this contest.
"][include_if { $penalty_minutes > 0 } "
There is a $penalty_minutes minute time penalty for an\
    incorrect
submission for this contest.  This is applied only to
incorrect submissions of problems you eventually
submit correctly.
"]"][include_if { ! [regexp {^timed} $scoring_type] } "
The contest managers will inform you in writing which
account and password you will be using.

The command `hpcm_get' will get the problems into your
directory.  Included will be the demonstration problem
~/demos/count (where ~ denotes your home directory).
Read ~/demos/count/README and ~/demos/count/Makefile
and practice submitting the demonstration problem.

You will be given a description of the problems on the
web or in a printout.  The command `help problems' will
display a list of all the problems.  Also see `help
solving'.

You can print on the printer of your choice, or get
printouts emailed to you, by making a ~/PRINTER file.
See `help print' for details.
"][include_if { $scoring_type == "dated" } "
The command `scoreboard' will display the scoreboard.
This contains the date of each correct submission.  See
`help scoreboard' for more details.
"][include_if { $scoring_type == "feedback" } "
The command `scoreboard' will display the scoreboard.
Scoring is determined by submission types (submit,
in-submit, inout-submit) for incorrect submissions.
A correct submission with no previous incorrect submis-
sions will have a score of 100.0, and the penalties for
incorrect submissions depend on submission type as
follows:

    incorrect `submit'		$ic_percent%
    incorrect `in-submit'	$in_percent%
    incorrect `inout-submit'	$inout_percent%

Penalties are applied only to incorrect submissions for
problems you eventually submit correctly.  See `help
scoreboard', feedback contests, for details.
"]
To send a question to the contest manager DO NOT try
to e-mail the manager directly.  Instead edit the ques-
tion into a file qqq and use the command:

	hpcm_sendmail < qqq
[include_if { [regexp {^timed} $scoring_type] } "
Output of the print commands (see `help print') will
be brought to you.  Please do NOT try to find the
printer.  For more information see `help print'.

You CANNOT use the alternative submit commands that
make `in-submit', `inout-submit', or `solution-submit'.
"][include_if { $browser_ok == "no" } "
You CANNOT use a web browser.  You may use any printed
matterial you like, but cannot communicate electroni-
cally with the world outside the contest.
"][include_if { $javaok && $stlok } "
The `javahelp' and `stlhelp' commands give access to
on-line Java and C++ STL documentation: see `help java'
and `help c++'.
"][include_if { $javaok && ! $stlok } "
The `javahelp' command gives access to on-line Java doc-
umenation: see `help java'.
"][include_if { ! $javaok && $stlok } "
The `stlhelp' command gives access to on-line C++ STL
documenation: see `help c++'.
"][include_if { $scoring_type == "timed+feedback" } "
The day after the contest proper, the contest will be
converted to a different type of contest.  You will then
be given your account name and password, and can log in
and in a sense continue the contest.  `in-submit',
`inout-submit', and `solution-submit' will be allowed.
The judging will be completely automatic.  You will be
able to print by making a ~/PRINTER file: see `help
print'.  The scoreboard will use the submission type
(`submit', `in-submit', `inout-submit') of incorrect
submissions in place of time.  A correct submission with
no previous incorrect submissions will have a score of
100.0, and the penalties for incorrect submissions
depend on submission type as follows:

    incorrect `submit'		$ic_percent%
    incorrect `in-submit'	$in_percent%
    incorrect `inout-submit'	$inout_percent%

See `help scoreboard', feedback contests, for details.
"][include_if { $scoring_type == "timed+dated" } "
The day after the contest proper, the contest will be
converted to a different type of contest.  You will then
be given your account name and password, and can log in
and in a sense continue the contest.  `in-submit',
`inout-submit', and `solution-submit' will be allowed.
The judging will be completely automatic.  You will be
able to print by making a ~/PRINTER file: see `help
print'.  The scoreboard will merely record the number of
correct submissions and the date of each correct sub-
mission.
"]$this_contest_postfix"

# Computed web page parameters.
#
set web_contest_name $contest_name
set web_manager_address $manager_address
## TBD: set web_problems yes

# Parameter Overrides
# --------- ---------

# Add parameter settings here to override parameters
# that are normally not changed above.
