# TCL Parameters File for Informal Contest Judging
#
# File:		hpcm_judging.rc
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Sun Jan 21 05:11:16 EST 2007
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: walton $
#   $Date: 2007/01/21 10:12:16 $
#   $RCSfile: hpcm_judging.rc,v $
#   $Revision: 1.32 $

# Table of Contents
#
#	Parameters to be Modified
#	Local Account Parameters
#	Web Page Parameters
#	Parameters Not Usually Modified
#	Computed Parameters (Do Not Modify)
#	Parameter Overrides

# Parameters to be Modified
# ---------- -- -- --------

# Read standard parameters.
#
source $lib_directory/hpcm_judging.rc

# The following parameters determine the type and
# variety of contest.

# Set to the HPCM directory.  $env(HOME) is the home
# directory of the current (judge's) account.
#
set hpcm_directory $env(HOME)/hpcm

# Contest name, for scoreboard etc.
#
set contest_name "CONTEST NAME IS TBD"

# Problem description type.  One of:
#
#	web		Problem descriptions are on the
#			web.
#
#	paper		Problem descriptions have been
#			given out on paper.
#
#	get		Problem descriptions are files
#			delivered by hpcm_get.
#
#	web+paper	Combinations of the above.
#	web+get
#	get+web
#	etc.
#
set description_type web+get

# Set to allow different types of submit:
#
#	in		Allow in-submit
#
#	inout		Allow inout-submit
#
#	solution	Allow solution-submit
#
#	in+solution	Allow combination.
#	solution+in
#	in+inout+solution
#	etc.
#
set response_mode solution
# set response_mode in+inout+solution

# Scoring type.  One of:
#
#	problem		Timed from time a problem is
#			gotten by hpcm_get.
#
#	team		Timed from the time a team gets
#			its first problem gotten by
#			hpcm_get.
#
set scoring_type problem

# The penalty in minutes for submitting an incorrect
# solution to a problem for which a correct solution is
# later submitted in a timed contest.
#
set penalty_minutes 20
# set penalty_minutes 0

# The email address to be notified for errors or
# queries.
#
set manager_address "someone@somecomputer"

# Set the following to "yes" if you want all replies to
# contestants to be CC'ed to the manager, even those
# just reporting scores or getting problems.
#
set cc_manager no

# The following are the beginning and ending of the
# initial version of the ./help/this_contest file.  Each
# should begin and end with a line feed, or be "".  Each
# will then be separated from other text by a blank
# line.  The text in each should be restricted to 56
# columns.
#
# If you want to modify this_contest further, you may
# edit the ./help/this_contest file directly after it
# has been initially made.  The version of the file that
# is made by this hpcm_judging.rc file will be maintain-
# ed in ./help/this_contest_parameter for reference pur-
# poses, while ./help/this_contest will be left untouch-
# ed after it has been edited to be different from
# ./help/this_contest_parameter.
# 
set this_contest_prefix "
THIS FILE IS UNEDITED AND INACCURATE!
"
set this_contest_postfix "
Good Hunting!
"

# TCL list of TCL regular expressions that match the
# test accounts which are NOT to appear on the score-
# board.
#
set test_accounts { }

# Ditto for test problems instead of accounts.  Usually
# you need not change this.
#
set test_problems { count javaio }

# List of makecontest arguments that specify the
# problems.  The format is
#
#	INDEX-FILE-NAME,
#	    SUBDIRECTORY/=problems/,
#	    QUALIFIER:include
#
# where the problems are in the SUBDIRECTORY of the
# directory holding the index file.  See below for
# examples.
#
set problems_arguments "
    $hpcm_directory/problem_library/index, \
	public/=problems/, \
	    P1:include
"
# Use the following if index is the file ~/ppp/iii and
# problems are in subdirectories of ~/ppp.  Because the
# problems are subdirectories of ~/ppp which contains
# the index file, `SUBDIRECTORY/' is the omitted.
# $env(HOME) is the home directory of the current
# (judge's) account.  `ALL' means include all problems
# listed in the index.
#
# set problems_arguments "
#     $env(HOME)/ppp/iii, \
#         =problems/, \
#             ALL:include
# "
#
# See hpcm/judge/lib/hpcm_judging.rc `makecontest_
# arguments' for more details, and `makecontest -doc'
# for complete details.


# Local Account Parameters
# ----- ------- ----------

# Parameters to be set if there are local contestant
# accounts:
#

# Browser to use for javahelp and/or stlhelp.
#
set browser lynx

# Location of JAVA API index for browser to use to
# implement javahelp.  If not set, the javahelp contes-
# tant command is not enabled.
#
set java_api_index \
    /usr/local/jdk/docs/api/overview-tree.html

# Location of STL API index for browser to use to
# implement stlhelp.  If not set, the stlhelp contestant
# command is not enabled.
#
set stl_api_index /usr/local/STL_doc/index.html

# Set "yes" if contestant accounts are to be enabled
# for login by ssh using any of the public keys
# ~/.ssh/{identity,id_rsa,id_dsa}.pub that exist.
#
set ssh_enable yes
# set ssh_enable no


# Web Page Parameters
# --- ---- ----------

# URL of contest web page.
#
set web_page_URL "www.somewhere.edu/~xxx/yyy"

# The following are passed to `makeweb' to make the web
# page.  Leave as "" parameters you do not want to use
# (e.g., if web_solutions_password is "" no solutions
# web page will be made).
#
# The web_manager_address will be listed as a contact
# on the web page.  The web_solutions_password PPP will
# be used to name a subdirectory `private/PPP' of the
# web page directory that will hold the solutions.  No
# link will be made to this directory, and the `private'
# subdirectory will be unreadable to the world, so PPP
# will act as a password.  The web_help_URL is the URL
# of the help page (see hpcm/contestant/help Makefile)
# relative to the contest web page.  The web_scoreboard_
# URL is the URL of the scoreboard relative to the web
# page; usually this is posted by using scoreboard_
# commands (see below).  Problems will be put on the
# web page if "web" is in `description_type'.
#
set web_manager_address $manager_address
set web_solutions_password ""
set web_help_URL ""
set web_scoreboard_URL ""

# The following scoreboard_commands variable specifies
# places to send a copy of ./contest/scoreboard.1.  The
# variable value is a list of items each with one of
# the following formats:
#
#	{ NAME ssh ACCOUNT [REMOTE-COMMAND] }
#	    Pipe ./contest/scoreboard.1 through ssh to
#	    execute REMOTE-COMMAND in the remote
#	    ACCOUNT.  If not given, REMOTE-COMMAND
#	    defaults to a template which can be
#	    filled out by editing in the file
#	    ./secure/bin/NAME after it is created
#	    (this will be mentioned in a TODO).
#
#	{ NAME ... }
#	    Pipe ./contest/scoreboard.1 to a command
#	    created by appending { NAME ... } to the
#	    judging_commands global variable: see that
#	    variable in hpcm/judge/lib/hpcm_judging.rc
#	    for details.  In particular, emailing the
#	    scoreboard to some address is supported,
#	    and for emailing REMOTE-COMMAND defaults
#	    as for ssh.
#
# NAME is the name of a command that will be created in
# ./secure/bin to invoke the proper pipe.  It may not
# contain whitespace or /.
#
set scoreboard_commands {
}

# Parameters Not Usually Modified
# ---------- --- ------- --------

# Normally you should not have to make changes below
# this point.

# The following is true if and only if contestants
# getting all the problems at once is to be forbidden.
#
set forbid_getting_all_problems \
    [expr $scoring_type == problem]

# Set to "yes" if in addition to normal submissions from
# contestants with accounts, you want to allow email
# submissions.  You may want to reset submitter_
# compress_mode below if you reset this.
#
set allow_email_submissions no

# Set to "long" to include a contestant's primary domain
# name (e.g. `harvard') or "short" to not include the @
# or anything after that.
#
# set submitter_compress_mode long
set submitter_compress_mode short

# Set "yes" to use GMT for dates in file and directory
# names.  Otherwise the local time zone is used.
#
set use_gmt no

# Set the manualreply display to have a certain height
# with a given number of blank lines above that.  If you
# have a taller display, increase window_height.
#
# WARNING: If window_height is too large, programs such
# as manualreply and lookat may appear to be malfunc-
# tioning because some of the information they display
# is being scrolled off the top of the screen.
#
set window_blank_height 16
set window_height 24

# Set to contest directory, in case the $judging_
# directory/contest link needs to be made.  If needed
# and not set, the name of judging directory with
# `judging' replaced by `contest' and trailing password
# removed will be used.
#
# set contest_directory $env(HOME)/contest_TBD

# Set to the prototype account (as per SETUP_PROTOTYPE).
# If not set, the unique account with name of the form
# *[-_]proto and readable files home/setup.tar, home/
# empty.ls, and home/setup.ls is used, if there is such
# a unique account.
#
# set hpcm_prototype_account TBD

# Set to "no" if you do not want makecontest to run
# `makescoreboard start'.
#
set makescoreboard yes

# The following is the printer map.  It lets each con-
# testant determine his/her own printer by placing the
# printer name in the ~/PRINTER file of the contestant's
# account.  See `hpcm/contestant/bin/ printer_pipe -doc'
# for more documentation.
#
set contest_printer_map "
# Do not edit.  This is copied from the contest_printer_
# map global variable in the hpcm_judging.rc file in the
# judging directory.
#
.* !~/PRINTER
"

# Computed web page parameters.  `web_problems' is `yes'
# if problem descriptions are to be put on the web page.
#
set web_contest_name $contest_name
if { [regexp web $description_type] } {
    set web_problems yes
} else {
    set web_problems no
}

# Computed Parameters (Do Not Modify)
# -------- ---------- ---------------

# You should NOT make changes beyond this point, unless
# you want to tune the contest to be a variant of one of
# the standards supported by this file.  If you do want
# to tune the contest, put changes at the very end of
# this file, where they will override the settings of
# this file.

if { $forbid_getting_all_problems } {
    array set info_map {
	problems
	{FORBIDDEN {You are not allowed to get all\
	            problems at once in this contest.}}
    }
}

set javaok [info exists java_api_index]
if {    $javaok \
     && [regexp {r..} [get_access $java_api_index]] } {

    set javahelp "
# Do not edit.  This file is generated from information
# provided by the `browser' and `java_api_index' global
# variables in the hpcm_judging.rc file in the judging
# directory.
#
$browser '$browser $java_api_index'
"
}

set stlok [info exists stl_api_index]
if {    $stlok \
     && [regexp {r..} [get_access $stl_api_index]] } {

    set stlhelp "
# Do not edit.  This file is generated from information
# provided by the `browser' and `stl_api_index' global
# variables in the hpcm_judging.rc file in the judging
# directory.
#
$browser '$browser $stl_api_index'
"
}

# Require or do not require submission email to have a
# formatted body with HPCM_BEGIN, HPCM_END, and `..'s.
#
if { $allow_email_submissions == "no" } {
    set use_authentication yes
    set format_submissions yes
} elseif { $allow_email_submissions == "yes" } {
    set use_authentication no
    set format_submissions no
} else {
    error "Bad allow_email_submissions value:\
           $allow_email_submissions"
}

# Default arguments to makecontest.
#
set makecontest_arguments "
    -informal -printer_map -startcontest \
    [include_if { $javaok } "-javahelp"] \
    [include_if { $stlok } "-stlhelp"] \
    [include_if { [regexp get $description_type] } \
    	        "-description"] \
    [include_if { $ssh_enable == "yes" } "-ssh"] \
    [include_if { $makescoreboard == "yes" } \
    		"-scoreboard"] \
    $judging_directory/help/index, \
	=help/ \
    $hpcm_directory/contestant/help/index, \
	common/=help/, \
	contest/=help/, \
	advanced/=help/, \
	    informal:include, \
	    common:include, \
	    advanced:include \
    $hpcm_directory/problem_library/index, \
	    demo:include \
    $problems_arguments
"

# Set the scoreboard timing for the contest.
#
set scoreboard_start_time  $scoring_type
set scoreboard_penalty [expr 60 * $penalty_minutes]

# Scoreboard name, i.e, the name of the contest.
#
set scoreboard_name $contest_name

# Compute scoreboard_submitters to exclude test
# accounts.
#
set scoreboard_submitters {}
foreach x $test_accounts {
    lappend scoreboard_submitters & ! $x
}
set scoreboard_submitters \
    [lrange $scoreboard_submitters 1 end]
#
# Compute scoreboard_problems to exclude test
# problems.
#
set scoreboard_problems {}
foreach x $test_problems {
    lappend scoreboard_problems & ! $x
}
set scoreboard_problems \
    [lrange $scoreboard_problems 1 end]


# Scoreboard instructions for an informal contest.
# These instructions make a scoreboard page in the file:
#
#	JD/contest/scoreboard.1
#
# where JD is the $judging_directory.  World read access
# is granted to this file, which is also sent to any
# addresses in the scoreboard_addresses global variable.
# The file has the format:
#
#  NAME                                           TIME
#
#         <contents of JD/contest/scoreboard.1head>
#
#   ==== ===== ===== ===== ===== ===== ===== ===== =====
#	   	     <scoreboard table>
#   ==== ===== ===== ===== ===== ===== ===== ===== =====
#
set scoreboard_instructions {

    { OUTPUT contest/scoreboard.1 "" "" }
    GRANT_ACCESS
    SEND

    { LINE NAME "" TIME }
    BLANK
    { INPUT contest/scoreboard.1head }
    BLANK

    BAR
    BOARD
    BAR
}

set scoreboard_use_feedback no
set scoring_mode auto
set reply_mode auto
set log_mode auto
set reply_manager $manager_address
set log_manager $manager_address
if { $cc_manager } {
    set response_manager $reply_manager
} else {
    set response_manager ""
}

# Compute this_contest.
#
set response_list {}
foreach qualifier [split $response_mode +] {
    lappend response_list $qualifier-submit
}
#
set this_contest "$this_contest_prefix
The command `help' will display this file.  The impor-
tant help and demonstration problem files are available
via the contest web page, or you have been given a
printout of these files.

This is an `informal' contest.  The command

	help informal_contest

displays more details about informal contests.

To display a list of the help files available use the
command `help index'.  Note that if something in the
index has the name `help/topic' you use the command
`help topic' to view it.

You have been given a password and an account name.  If
you have an xterminal, the xcsh command will make more
windows: see `help xterminals'.

You can print on the printer of your choice, or get
printouts emailed to you, by making a ~/PRINTER file.
See `help print' for details.

The command `hpcm_get' will get a demonstration problem
into your directory ~/demos/count (~ denotes your home
directory).  Read ~/demos/count/README and ~/demos/
count/Makefile and practice submitting the demonstration
problem.

To find out what problems are available use the command
`help problems'.  The command `hpcm_get problems/foo'
will get the problem named `foo' into your directory
`~/problems/foo' where you can work on it.
[include_if { $scoring_type == "problem" } "
In order to get good scores on problems, you must AVOID
hpcm_get'ting a problem UNTIL you are READY to swiftly
solve it, as the time between when you hpcm_get the pro-
blem and when you first submit a correct solution for
the problem is the problem time on the scoreboard.
"][include_if { $scoring_type == "team" } "
In order to get good scores on problems, you must AVOID
hpcm_get'ting ANY non-demonstration problem UNTIL you
are READY to swiftly solve ALL problems, as the time you
hpcm_get your first problem is the start time of the
contest for you.  For each problem, the difference be-
tween this contest start time and the time when you
first submit a correct solution for the problem is the
problem time on the scoreboard.
"]
The command `scoreboard' will display the scoreboard.
See `help scoreboard'.  See `help solving' for details
on how to solve a problem.
[include_if { [regexp paper $description_type] } "
You have been given problem descriptions on paper."][
 include_if { [regexp web $description_type] } "
Problem descriptions are available on the web."][
 include_if { [regexp get $description_type] } "
Problem descriptions are available in files in the prob-
lem directory gotten by hpcm_get.  These files have one
of the extensions .txt, .html, .htm, .ps, .pdf, etc.
The print commands only print plain text files, but you
can email other files to your home computer where they
can be displayed."]

To send a question to the contest manager DO NOT try
to e-mail the manager directly.  Instead edit the ques-
tion into a file qqq and use the command:

	hpcm_sendmail < qqq
[include_if { [llength $response_list] == 0 } "
You CANNOT use the alternative submit commands that
make `in-submit', `inout-submit', or\
	`solution-submit'."][
 include_if { [llength $response_list] > 0 } "
You can use commands that `make' any of the following:

    submit $response_list

but ONLY these submit commands.
"][include_if { $javaok && $stlok } "
The `javahelp' and `stlhelp' commands give access to
on-line Java and C++ STL documentation: see `help java'
and `help c++'.
"][include_if { $javaok && ! $stlok } "
The `javahelp' command gives access to on-line Java doc-
umentation: see `help java'.
"][include_if { ! $javaok && $stlok } "
The `stlhelp' command gives access to on-line C++ STL
documentation: see `help c++'.
"]$this_contest_postfix"

# Parameter Overrides
# --------- ---------

# Add parameter settings here to override parameters
# that are normally not changed above.
