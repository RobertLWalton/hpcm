# TCL Parameters File for Untimed Contest Judging
#
# File:		hpcm_judging.rc
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Fri Mar 25 15:55:15 EDT 2011
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: walton $
#   $Date: 2011/03/25 19:56:07 $
#   $RCSfile: hpcm_judging.rc,v $
#   $Revision: 1.77 $

# Table of Contents
#
#	Parameters to be Modified
#	Local Account Parameters
#	Web Page Parameters
#	Parameters Not Usually Modified
#	Computed Parameters (Do Not Modify)
#	Parameter Overrides

# Parameters to be Modified
# ---------- -- -- --------

# Read standard parameters.
#
source $lib_directory/hpcm_judging.rc

# The following parameters determine the type and
# variety of contest.

# Set to the HPCM directory.  $env(HOME) is the home
# directory of the current (judge's) account.
#
set hpcm_directory $env(HOME)/hpcm

# Map of contestant email addresses for the scoreboard.
# Scores for a contestant with address PPP@CCC will
# by treated as if the contestant name was the value of
#
#	submitter_compress_map(PPP@CCC)
#
# if that exists, and as PPP otherwise.
#
array set submitter_compress_map {}
# array set submitter_compress_map {
#	PPP@CCC1	NAME1
#	PPP@CCC2	NAME2
# }

# Contestant account type.  One of:
#
#	email		Contestants provide their own
#			contest accounts and send sub-
#			missions via email.
#
#	local		An account is provided by the
#			judge for the contestant.
#
#	email+local	Both the above.
#	local+email
#
set account_type local+email
# set account_type email
# set account_type local

# If local accounts are provided, the following is the
# person to apply to in order to obtain an account.
#
set local_account_manager "someone@somecomputer"
# set local_account_manager "someone somephonenumber"

# If local accounts are provided, the following are the
# conditions under which someone may get a contest
# account.  If not "", this should begin and end with
# a newline, and should not be more than 56 columns.
#
set local_account_conditions "
You may get an account if BLAH BLAH BLAH
"
set local_account_conditions ""

# Scoring type.  One of:
#
#	feedback	Scored according to number of
#			incorrect, in, and inout submis-
#			sions.
#
#	unranked	Only date of correct submission
#			is given, and contestants are
#			ordered by number of correct
#			problems only.  Contestants with
#			the same number of correct
#			submissions are not ranked with
#			respect to each other, but are
#			listed alphabetically.
#
#	unscored	Only date of correct submission
#			is given, and contestants are
#			listed alphabetically.
#
set scoring_type feedback

# Problem description type.  One of:
#
#	web		Problem descriptions are on the
#			web.
#
#	paper		Problem descriptions have been
#			given out on paper.
#
#	get		Problem descriptions are files
#			delivered by hpcm_get.
#
#	web+paper	Combination of the above.
#	paper+web
#	web+get, etc.
#
# set description_type get
# set description_type get+web
set description_type web

# Set to allow different types of submit:
#
#	in		Allow in-submit
#
#	inout		Allow inout-submit
#
#	solution	Allow solution-submit
#
#	in+solution	Allow combination.
#	solution+in
#	in+inout+solution
#	etc.
#
# set response_mode solution
set response_mode in+inout+solution

# Autojudge's email address, or "" if this is to be
# automatically determined.
#
set autojudge_address ""
# set autojudge_address "somename<someone@somecomputer>"

# Contest name, for scoreboard etc.
#
set contest_name "CONTEST NAME IS TBD"

# The email address to be notified for errors or
# queries.
#
set manager_address "someone@somecomputer"

# Set the following to "yes" if you want all replies to
# contestants to be CC'ed to the manager, even those
# just reporting scores or getting problems.
#
set cc_manager no

# A cc address can be added to all autojudge replies to
# a submitter from a directory named `date-<<submitter>-
# submission' by adding the pair
#
#	{ regexp address }
#
# to the list `response_manager_map'.  If `regexp'
# matches `submitter' then `address' is added to the
# `Cc' addresses of each reply.  Use an lappend command
# as below and quote `regexp' and `address' if they
# contain spaces.  `address' can have several comma
# separated addresses.
#
# This allows teams to have their own response managers.
#
# lappend response_manager_map { regexp address }

# The following are the beginning and ending of the
# initial version of the ./help/this_contest file.  Each
# should begin and end with a line feed, or be "".  Each
# will then be separated from other text by a blank
# line.  The text in each should be restricted to 56
# columns.
#
# If you want to modify this_contest further, you may
# edit the ./help/this_contest file directly after it
# has been initially made.  The version of the file that
# is made by this hpcm_judging.rc file will be maintain-
# ed in ./help/this_contest_parameter for reference pur-
# poses, while ./help/this_contest will be left untouch-
# ed after it has been edited to be different from
# ./help/this_contest_parameter.
# 
set this_contest_prefix "
THIS FILE IS UNEDITED AND INACCURATE!
"
set this_contest_postfix "
Good Hunting!
"

# TCL list of TCL regular expressions that match the
# test accounts which are NOT to appear on the score-
# board.
#
set test_accounts { }

# Ditto for test problems instead of accounts.  Usually
# you need not change this.
#
set test_problems { count javaio }

# List of makecontest arguments that specify the
# problems.  The format is
#
#	INDEX-FILE-NAME,
#	    SUBDIRECTORY/=problems/,
#	    QUALIFIER:include
#
# where the problems are in the SUBDIRECTORY of the
# directory holding the index file.  See below for
# examples.
#
set problems_arguments "
    $hpcm_directory/problem_library/bospre-ed.index, \
	public/=problems/, \
	    ALL:include
"
# Use the following if index is the file ~/ppp/iii and
# problems are in subdirectories of ~/ppp.  Because the
# problems are subdirectories of ~/ppp which contains
# the index file, `SUBDIRECTORY/' is the omitted.
# $env(HOME) is the home directory of the current
# (judge's) account.  `ALL' means include all problems
# listed in the index.
#
# set problems_arguments "
#     $env(HOME)/ppp/iii, \
#         =problems/, \
#             ALL:include
# "
#
# See hpcm/judge/lib/hpcm_judging.rc `makecontest_
# arguments' for more details, and `makecontest -doc'
# for complete details.


# Local Account Parameters
# ----- ------- ----------

# Parameters to be set if there are local contestant
# accounts:
#

# Browser to use for javahelp and/or stlhelp.
#
set browser elinks_helper

# Location of JAVA API index for browser to use to
# implement javahelp.  If not set, the javahelp contes-
# tant command is not enabled.
#
set java_api_index /usr/share/javadoc/java/index.html

# Location of STL API index for browser to use to
# implement stlhelp.  If not set, the stlhelp contestant
# command is not enabled.
#
set stl_api_index \
    $hpcm_directory/contestant/help/STL_doc/index.html

# Set "yes" if contestant accounts are to be enabled
# for login by ssh using any of the public keys
# ~/.ssh/{identity,id_rsa,id_dsa}.pub that exist.
#
set ssh_enable yes
# set ssh_enable no


# Web Page Parameters
# --- ---- ----------

# URL of contest web page.  Set to "" if there is no
# contest web page (but there can still be web score-
# board and/or help pages).  The contest web page,
# if it exists, is made by `makeweb', may contain
# problem descriptions, and will contain references to
# scoreboard and help pages if these exist.  Details of
# the contest web page construction follow.
#
# Note that web_page_URL is only used in documentation
# and need NOT contain `http://'.
#
# set web_page_URL ""
set web_page_URL "www.somewhere.edu/~xxx/yyy"

# URL's of the help page and scoreboard file if they are
# on the web, or "" if they are not.
#
# If there is a contest web page (see above), then
# these may be relative to that page, or they may be
# absolute (e.g., begin with `http://').  If there is
# no contest web page, these are only used in documen-
# tation, and should be absolute but need not begin
# with `http://' (e.g., they may begin with `www.').
#
# If email submissions are allowed, there must be a
# help (and demos) web page; i.e., web_help_URL must
# NOT be "".
#
# If a scoreboard is being put on the web, it is usually
# posted by using scoreboard_commands (see below).
#
set web_help_URL "http://www.seas.harvard.edu/hc3/help"
# set web_help_URL ""
# set web_scoreboard_URL "scoreboard"
set web_scoreboard_URL ""

# The following are passed to `makeweb' to make the con-
# test web page, if it exists.  Leave as "" parameters
# you do not want to use (e.g., if web_solutions_pass-
# word is "" no solutions web page will be made).
#
# The web_manager_address will be listed as a contact
# on the the contest web page, and also given as a con-
# tact for web scoreboard and help file pages.
#
# The web_solutions_password PPP will be used to name a
# subdirectory `private/PPP' of the web page directory
# that will hold the solutions.  No link will be made to
# this directory, and the `private' subdirectory will be
# unreadable to the world, so PPP will act as a pass-
# word.
#
# web_help_URL and web_scoreboard_URL are also passed to
# `makeweb' and used to make references from the contest
# web page to the web help files and scoreboard if these
# exist (see above).  These may be URL's relative to the
# contest web page, or absolute URL's.
#
# Problems will be put on the web page if "web" is in
# `description_type'.
#
set web_manager_address $manager_address
set web_solutions_password ""

# If there is a contest web page, you may want to set
# the following.
#
# If the headers are left "", the page headers are auto-
# matically constructed from the contest_name.
#
# The prefixes come just after the page headers and
# the postfix comes after everything but the web page
# manager.  There are two pages involved: the contest
# page and the contest solutions page (which has no
# postfix).
#
set web_header ""
set web_prefix ""
set web_postfix ""
set web_solutions_header ""
set web_solutions_prefix ""

# The following scoreboard_commands variable specifies
# places to send a copy of ./contest/scoreboard.1.  The
# variable value is a list of items each with one of
# the following formats:
#
#	{ NAME ssh ACCOUNT [REMOTE-COMMAND] }
#	    Pipe ./scoreboard.web through ssh to
#	    execute REMOTE-COMMAND in the remote
#	    ACCOUNT.  If not given, REMOTE-COMMAND
#	    defaults to a template which can be
#	    filled out by editing in the file
#	    ./secure/bin/NAME after it is created
#	    (this will be mentioned in a TODO).
#
#	{ NAME sh COMMAND }
#	    Pipe ./scoreboard.web to COMMAND executed
#	    by /bin/sh.
#
#	{ NAME email ... }
#	    See contest_commands in hpcm/judge/lib/
#	    hpcm_judging.rc.
#
# These items are appended to the judging_commands
# global variable: see hpcm/judge/lib/hpcm_judging.rc.
#
# NAME is the name of a command that will be created in
# ./secure/bin to invoke the proper pipe.  It may not
# contain whitespace or /.
#
set scoreboard_commands {
}

# Parameters Not Usually Modified
# ---------- --- ------- --------

# Normally you should not have to make changes below
# this point.

# Set "yes" to use GMT for dates in file and directory
# names.  Otherwise the local time zone is used.
#
set use_gmt no

# Set the manualreply display to have a certain height
# with a given number of blank lines above that.  If you
# have a taller display, increase window_height.
#
# WARNING: If window_height is too large, programs such
# as manualreply and lookat may appear to be malfunc-
# tioning because some of the information they display
# is being scrolled off the top of the screen.
#
set window_blank_height 16
set window_height 24

# Set to contest directory, in case the $judging_
# directory/contest link needs to be made.  If needed
# and not set, the name of judging directory with
# `judging' replaced by `contest' and trailing password
# removed will be used.
#
# set contest_directory $env(HOME)/contest_TBD

# Set to the prototype account (as per SETUP_PROTOTYPE).
# If not set, the unique account with name of the form
# *[-_]proto and readable files home/setup.tar, home/
# empty.ls, and home/setup.ls is used, if there is such
# a unique account.
#
# set hpcm_prototype_account TBD

# Set to "no" if you do not want makecontest to run
# `makescoreboard start'.
#
set makescoreboard yes

# The following is the printer map for an untimed
# contest.  It lets each contestant determine his/her
# own printer by placing the printer name in the
# ~/PRINTER file of the contestant's account.  See
# `hpcm/contestant/bin/printer_pipe -doc' for more
# documentation.
#
set contest_printer_map "
# Do not edit.  This is copied from the contest_printer_
# map global variable in the hpcm_judging.rc file in the
# judging directory.
#
.* !~/PRINTER
"


# Computed Parameters (Do Not Modify)
# -------- ---------- ---------------

# You should NOT make changes beyond this point, unless
# you want to tune the contest to be a variant of one of
# the standards supported by this file.  If you do want
# to tune the contest, put changes at the very end of
# this file, where they will override the settings of
# this file.

set is_makecontest \
    [expr { [file tail $argv0] == "makecontest" }]

# Compute default autojudge_address for email contest.
#
if {    [regexp email $account_type] \
     && $autojudge_address == "" } {
    set aja [truename $judging_directory]
    set aja [file tail $aja]
    if {    ! [regexp {^judging_(.*)_[^_]*$} $aja \
                      forget aja] \
	 || $aja == "" } {
        error "Cannot set default autojudge_address\
	       for email contest"
    }
    set autojudge_address \
        "$aja<[account_name]@[host_name]>"
}

# Set addresses of autojudge.
#
if { $autojudge_address != "" } {
    set autojudge_addresses [list $autojudge_address]
}

# Always return .cerr file on syntax error.
#
set response_mode "$response_mode+cerr"

# If email accounts, do NOT require submissions to have
# HPCM_BEGIN/HPCM_END lines etc and authentication.
#
if { [regexp email $account_type] } {
    set use_authentication no
    set format_submissions no
} else {
    set use_authentication yes
    set format_submissions yes
}

# Set make_test.
#
set SUBMISSIONS \
    $hpcm_directory/examples/test_submissions
set make_test "
# This file equals the `make_test' global variable in
# hpcm_judging.rc.  Do not edit this file.
#
# Locations of test data.
#
S=$SUBMISSIONS
#
# Sendmail program with arguments:
#
SENDMAIL = /usr/sbin/sendmail -oi -t

include $SUBMISSIONS/Makefile.mk

test:	./mail test_XXXXX

diff_replies:	auto_diff_XXXXX"
#
if { [regexp local $account_type] } {
    regsub -all XXXXX $make_test local make_test
} else {
    regsub -all XXXXX $make_test email make_test
}

# Set javahelp and stlhelp global variables if
# appropriate.

set javaok [expr {    [info exists java_api_index] \
                  && [regexp local $account_type] }]

if {    $is_makecontest \
     && $javaok \
     && [regexp {r..} [get_access $java_api_index]] } {

    set javahelp "
# Do not edit.  This file is generated from information
# provided by the `browser' and `java_api_index' global
# variables in the hpcm_judging.rc file in the judging
# directory.
#
$browser '$browser $java_api_index'
"
}

set stlok [expr {    [info exists stl_api_index] \
                  && [regexp local $account_type] }]
if {    $is_makecontest \
     && $stlok \
     && [regexp {r..} [get_access $stl_api_index]] } {

    set stlhelp "
# Do not edit.  This file is generated from information
# provided by the `browser' and `stl_api_index' global
# variables in the hpcm_judging.rc file in the judging
# directory.
#
$browser '$browser $stl_api_index'
"
}

# Default arguments to makecontest.
#
set makecontest_arguments "
    [include_if { [regexp email $account_type] } \
                -email] \
    [include_if { [regexp local $account_type] } \
                {-local -problems -demos
		        -startcontest -printer_map}] \
    [include_if { $javaok } "-javahelp"] \
    [include_if { $stlok } "-stlhelp"] \
    [include_if { [regexp get $description_type] } \
                -description] \
    [include_if { $makescoreboard == "yes" } \
    		"-scoreboard"] \
    -web \
    $judging_directory/help/index, \
	=help/ \
    $hpcm_directory/contestant/help/index, \
	common/=help/, \
	contest/=help/, \
	email/=help/, \
	advanced/=help/, \
	    [include_if { [regexp email \
	                          $account_type] } \
		        email:include,] \
	    [include_if { [regexp local \
	                          $account_type] } \
		        local:include,] \
	    untimed:include, \
	    common:include, \
	    advanced:include \
    $hpcm_directory/problem_library/index, \
	    demo:include \
    $problems_arguments
"

# Setup the scoreboard.
#
set scoreboard_start_time ""
set scoreboard_stop_time ""
set scoreboard_use_feedback no
set scoreboard_display_correct yes
set scoreboard_display_incorrect yes
if { $scoring_type == "feedback" } {
    set scoreboard_use_feedback yes
} elseif { $scoring_type == "unranked" } {
} elseif { $scoring_type == "unscored" } {
    set scoreboard_display_correct no
    set scoreboard_display_incorrect no
} else {
    error "in hpcm_judging.rc: Bad scoring_type:\
           $scoring_type"
}

# Scoreboard name, i.e, the name of the contest.
#
set scoreboard_name $contest_name

# Compute scoreboard_submitters to exclude test
# accounts.
#
set scoreboard_submitters {}
foreach x $test_accounts {
    lappend scoreboard_submitters & ! $x
}
set scoreboard_submitters \
    [lrange $scoreboard_submitters 1 end]
#
# Compute scoreboard_problems to exclude test
# problems.
#
set scoreboard_problems {}
foreach x $test_problems {
    lappend scoreboard_problems & ! $x
}
set scoreboard_problems \
    [lrange $scoreboard_problems 1 end]

# Scoreboard instructions for an untimed contest.
# These make a scoreboard in the file
#
#	$judging_directory/scoreboard.web
#
# that has the format:
#
#   NAME               				    TIME
#
#   <contents of $judging_directory/scoreboard.head>
#
#   ==== ===== ===== ===== ===== ===== ===== ===== =====
#	   <scoreboard table>
#   ==== ===== ===== ===== ===== ===== ===== ===== =====
#
#   <contents of $judging_directory/scoreboard.tail>
#
# This file is then piped to the filters named in the
# scoreboard_commands global variable.  If the
# scoreboard_account_type variable contains the word
# `local', this file is also copied to $judging_direc-
# tory/contest/scoreboard.1 which is given a+r permis-
# sions.
#
set scoreboard_account_type $account_type
set scoreboard_instructions {

    { OUTPUT scoreboard.web "" "" }
    SEND

    { LINE NAME "" TIME }
    BLANK
    { INPUT scoreboard.head }
    BLANK

    BAR
    BOARD
    BAR

    BLANK
    { INPUT scoreboard.tail }

    if { [regexp local $scoreboard_account_type] } {
	{ OUTPUT contest/scoreboard.1 "" "" }
	GRANT_ACCESS
	{ INPUT scoreboard.web }
    }
}

set scoring_mode auto
set reply_mode auto
set log_mode auto
set log_manager $manager_address
if { $manager_address != "" && $cc_manager } {
    lappend response_manager_map \
	    [list ".*" $manager_address]
}

# Computed web page parameters.
#
if { $web_page_URL == "" } {
    set web_title ""
} else {
    set web_title $contest_name
}
if { [regexp web $description_type] } {
    set web_problems yes

    if { $web_page_URL == "" } {
        error "description_type ($description_type)\
	       contains `web' but web_page_URL is\
	       \"\"."
    }

} else {
    set web_problems no
}

if {    $web_help_URL == "" \
     && [regexp email $account_type] } {
    error "account type ($account_type) contains\
           `email' but web_help_URL is \"\"."
}

# Compute response_list equal to the SORTED subset of
# {in inout solution} in response_mode, in order to
# compute this_contest.
#
set response_list {}
foreach response [split $response_mode +] {
    if {    [lcontain {in inout solution} $response] \
         && ! [lcontain $response_list $response] } {
        lappend response_list $response
    }
}
set response_list [lsort $response_list]

# Compute account_list equal to the SORTED subset of
# {email local} in account_type, in order to compute
# this_contest.
#
set account_list {}
foreach account [split $account_type +] {
    if {    [lcontain {email local} $account] \
         && ! [lcontain $account_list $account] } {
        lappend account_list $account
    }
}
set account_list [lsort $account_list]

# Compute description_list equal to the SORTED subset of
# {get paper web} in description_type, in order to
# compute this_contest.
#
set description_list {}
foreach description [split $description_type +] {
    if {    [lcontain {get paper web} $description] \
         && ! [lcontain $description_list \
	 		$description] } {
        lappend description_list $description
    }
}
set description_list [lsort $description_list]
set get_descriptions_only \
    [expr {      [lcontain $description_list get] \
            && ! [lcontain $description_list web] }]

# Compute feedback scoring data, in order to compute
# this_contest.
#
set sqf $scoreboard_qualifier_factors
set in_percent [expr 100 - 100 * [lindex $sqf 0]]
set in_percent [format {%.0f} $in_percent]
set inout_percent [expr 100 - 100 * [lindex $sqf 1]]
set inout_percent [format {%.0f} $inout_percent]
set ic_percent [expr 100 - 100 * [lindex $sqf 4]]
set ic_percent [format {%.0f} $ic_percent]

# Compute this_contest.
#
set this_contest "$this_contest_prefix[
#
# begin web/no-web page section.
#
][include_if { $web_page_URL != "" } "[
#
# There is a web page
#
]
This contest has a web page at

    $web_page_URL

that includes:

    this contest description[
include_if { $web_help_URL != "" } "
    help and demonstration files"][
include_if { [lcontain $description_list web] } "
    problem descriptions"][
include_if { $web_scoreboard_URL != "" } "
    a scoreboard"]
"][include_if { $web_page_URL == "" } "[
#
# There is no web page
#
][include_if { $web_help_URL != "" } "
Help and demonstration files are available on the web at

    $web_help_URL
"][include_if { $web_scoreboard_URL != "" } "
A scoreboard is available on the web at

    $web_scoreboard_URL
"][
#
# End of web/no-web page section.
#
]"][include_if { $web_scoreboard_URL != "" } "[
include_if { $web_help_URL != "" } "
See the `scoreboard' help file for details about
interpreting the scoreboard.
"]
If you appear on the scoreboard, and want to change your
`scoreboard name', email

    $web_manager_address
[include_if { $account_list == "email local" } "
who can map email addresses and account names to
scoreboard names.
"][include_if { $account_list == "email" } "
who can map email addresses to scoreboard names.
"][include_if { $account_list == "local" } "
who can map account names to scoreboard names.
"]"][include_if { [lcontain $account_list email] } "[
#
# Begin email section
#
]
You may use your own private accounts to solve problems
and submit solutions via email.  To send submissions and
requests to the autojudge, send email

	To: $autojudge_address
[include_if { $get_descriptions_only } "
To get ALL problem descriptions, send an email whose
`Subject:' field is

	Subject: get problems

and whose message body is empty.  To get just the
description for a problem named pppp, use

	Subject: get problems/pppp

as the `Subject:' field instead.
"]
To submit a problem solution file named pppp.ext, send
an email whose `Subject:' field is

	Subject: submit pppp.ext

and whose body contains nothing but the file itself.
To test this with a demonstration problem, get the
file named `demos/count/count1.c' from the help and
demos web pages, rename it `count.c', and submit it with

	Subject: submit count.c
	
Other solutions to demonstration problems are available
and can be submitted.
[
# Begin email alternative submissions section
#
][include_if { [llength $response_list] > 1 } "
You can also use alternative submission emails with sub-
jects of any one of the forms:
"][include_if { [llength $response_list] == 1 } "
You can also use alternative submission emails with sub-
ject of the form:
"][include_if { [lcontain $response_list in] } "
    Subject: submit pppp.ext in"][
   include_if { [lcontain $response_list inout] } "
    Subject: submit pppp.ext inout"][
   include_if { [lcontain $response_list solution] } "
    Subject: submit pppp.ext solution"][
   include_if { [llength $response_list] > 0 } "
"][include_if {    0 < [llength $response_list] \
		&&     [llength $response_list] < 2 } "
But you CANNOT use the alternative submission emails
with subjects of any one of the forms:
"][include_if { [llength $response_list] == 2 } "
But you CANNOT use the alternative submission emails
with subject of the form:
"][include_if { [llength $response_list] == 0 } "
You CANNOT use the alternative submission emails with
subjects of any one of the forms:
"][include_if { ! [lcontain $response_list in] } "
    Subject: submit pppp.ext in"][
   include_if { ! [lcontain $response_list inout] } "
    Subject: submit pppp.ext inout"][
   include_if { ! [lcontain $response_list solution] } "
    Subject: submit pppp.ext solution"][
   include_if { [llength $response_list] < 3 } "
"][
#
# end email alternative submissions section
#
]
See the `email_solving' help file for more details about
solving problems using your own personal account.
[
#
# end email section
#
]"][include_if { [lcontain $account_list local] } "[
#
# Begin local accounts section
#
][include_if { [lcontain $account_list email] } "
Alternatively you may get a contest account by applying
to
"][include_if { ! [lcontain $account_list email] } "
You may get a contest account by applying to
"]
    $local_account_manager
$local_account_conditions
After logging into your account, the `TOPIC' help file
can be seen by executing

	help TOPIC

Execute `help index' to see an index of all help files.

Once you have an account, you can get all the demonstra-
tion and contest problems into that account by\
	executing[
 include_if { $get_descriptions_only } "
the command `hpcm_get'.  This will also get the problem
descriptions into the problem directories: see the
directory `~/problems/pppp' for the description of
the problem named pppp.  Execute `help solving' for
"][include_if { ! $get_descriptions_only } "
the command `hpcm_get'.  Execute `help solving' for
"]advice on how to solve and submit programs.

You can direct print commands in this account to email
you postscript files by making a `~/PRINTER' file in
this account: execute `help print' for details.

You can use the `scoreboard' command in this account to
see the scoreboard: execute `help scores' and `help
scoreboard' for details.
[
#
# begin local accounts alternative submission section
#
][include_if { [llength $response_list] > 1 } "
In this account you can also use alternative submission
commands:
"][include_if { [llength $response_list] == 1 } "
In this account you can also use the alternative
submission command:
"][include_if { [lcontain $response_list in] } "
    make in-submit"][
   include_if { [lcontain $response_list inout] } "
    make inout-submit"][
   include_if { [lcontain $response_list solution] } "
    make solution-submit"][
   include_if { [llength $response_list] > 0 } "
"][include_if {    0 < [llength $response_list] \
		&&     [llength $response_list] < 2 } "
But you CANNOT use the alternative submission commands:
"][include_if { [llength $response_list] == 2 } "
But you CANNOT use the alternative submission command:
"][include_if { [llength $response_list] == 0 } "
In this account you CANNOT use the alternative submis-
sion commands:
"][include_if { ! [lcontain $response_list in] } "
    make in-submit"][
   include_if { ! [lcontain $response_list inout] } "
    make inout-submit"][
   include_if { ! [lcontain $response_list solution] } "
    make solution-submit"][
   include_if { [llength $response_list] < 3 } "
"][
#
# end local accounts alternative submission section
#
]
Read the `solving' help file for more details.
[include_if { $javaok && $stlok } "
In this account the `javahelp' and `stlhelp' commands
give access to on-line Java and C++ STL documentation:
see `help java' and `help c++'.
"][include_if { $javaok && ! $stlok } "
In this account the `javahelp' command gives access to
on-line Java documentation: see `help java'.
"][include_if { ! $javaok && $stlok } "
In this account the `stlhelp' command gives access to
on-line C++ STL documentation: see `help c++'.
"][
#
# end local accounts section
#
]"][include_if { $web_scoreboard_URL != "" \
                 || [lcontain $account_list local] } "[
#
# begin scoreboard section
#
][include_if { $scoring_type == "unscored" } "
The scoreboard contains the date of each correct sub-
mission.  Contestants appear alphabetically on the
scoreboard, regardless of the number of problems they
have correct.
"][include_if { $scoring_type == "unranked" } "
The scoreboard contains the date of each correct sub-
mission.  Contestants with the most correct problems
appear first on the scoreboard.  Among those with the
same number of correct problems, contestants appear
alphabetically.  See the `scoreboard' help file for
more details.
"][include_if { $scoring_type == "feedback" } "
Contestants with the most correct problems appear first
on the scoreboard.  Among those with the same number of
correct problems, a ranking score is computed from the
submission types (no-feedback, in, inout) for incorrect
submissions.  A correct submission with no previous in-
correct submissions will have a score of 100.0, and the
penalties for incorrect submissions depend on submission
type as follows:

    incorrect no-feedback submit    $ic_percent%[
 include_if { [lcontain $response_list in] } "
    incorrect `in' submit           $in_percent%"][
 include_if { [lcontain $response_list inout] } "
    incorrect `inout' submit        $inout_percent%"]

Penalties are applied only to incorrect submissions for
problems you eventually submit correctly.  See the
`scoreboard' help file, `Feedback Contests', for de-
tails.
"][include_if { $web_scoreboard_URL == "" } "[
#
# Scoreboard name change section if no web scoreboard
# but a local account exists
#
]
If you appear on the scoreboard, and want to change your
`scoreboard name', email

    $web_manager_address
[include_if { $account_list == "email local" } "
who can map email addresses and account names to
scoreboard names.
"][include_if { $account_list == "local" } "
who can map account names to scoreboard names.
"]"][
#
# end scoreboard section
#
]"]$this_contest_postfix"

# Parameter Overrides
# --------- ---------

# Add parameter settings here to override parameters
# that are normally not changed above.
