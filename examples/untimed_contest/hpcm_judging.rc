# TCL Parameters File for Untimed Contest Judging
#
# File:		hpcm_judging.rc
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Tue Sep 19 10:26:09 EDT 2006
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: walton $
#   $Date: 2006/09/19 14:30:03 $
#   $RCSfile: hpcm_judging.rc,v $
#   $Revision: 1.51 $

# Table of Contents
#
#	Parameters: General Parameters
#	Parameters: Local Account Parameters
#	Parameters: Web Page Parameters
#	Parameters: Usually Not Modified
#	Computed Parameters (Do Not Modify)
#	Parameter Overrides

# Parameters: General Parameters
# ----------- ------- ----------

# Read standard parameters.
#
source $lib_directory/hpcm_judging.rc

# Set to the HPCM directory.  $env(HOME) is the home
# directory of the current (judge's) account.
#
set hpcm_directory $env(HOME)/hpcm

# Map of contestant email addresses for the scoreboard.
# Scores for a contestant with address PPP@CCC will
# by treated as if the contestant name was the value of
#
#	submitter_compress_map(PPP@CCC)
#
# if that exists, and as PPP otherwise.
#
array set submitter_compress_map {}
# array set submitter_compress_map {
#	PPP@CCC1	NAME1
#	PPP@CCC2	NAME2
# }

# Contestant account type.  One of:
#
#	email		Contestants provide their own
#			contest accounts and send sub-
#			missions via email.
#
#	local		An account is provided by the
#			judge for the contestant.
#
#	email+local	Both the above.
#	local+email
#
set account_type email
# set account_type local

# If local accounts are provided, the following is the
# person to apply to in order to obtain an account.
#
set local_account_manager "someone@somecomputer"
# set local_account_manager "someone somephonenumber"

# If local accounts are provided, the following are the
# conditions under which someone may get a contest
# account.  If not "", this should begin and end with
# a newline, and should not be more than 56 columns.
#
set local_account_conditions "
You may get an account if BLAH BLAH BLAH
"
set local_account_conditions ""

# Scoring type.  One of:
#
#	feedback	Scored according to number of
#			incorrect, in, and inout submis-
#			sions.
#
#	unranked	Only date of correct submission
#			is given, and contestants are
#			ordered by number of correct
#			problems only.  Contestants with
#			the same number of correct
#			submissions are not ranked with
#			respect to each other, but are
#			listed alphabetically.
#
#	unscored	Only date of correct submission
#			is given, and contestants are
#			listed alphabetically.
#
set scoring_type feedback

# Problem description type.  One of:
#
#	web		Problem descriptions are on the
#			web.
#
#	paper		Problem descriptions have been
#			given out on paper.
#
#	get		Problem descriptions are
#			delivered by hpcm_get.
#
#	web+paper	Combination of the above.
#	paper+web
#	web+get, etc.
#
set description_type web

# Set to allow different types of submit:
#
#	in		Allow in-submit
#
#	inout		Allow inout-submit
#
#	solution	Allow solution-submit
#
#	in+solution	Allow combination.
#	solution+in
#	in+inout+solution
#	etc.
#
set response_mode in+inout+solution
# set response_mode solution

# Autojudge's email address, or "" if this is to be
# automatically determined.
#
set autojudge_address ""
# set autojudge_address "somename<someone@somecomputer>"

# Contest name, for scoreboard etc.
#
set contest_name "CONTEST NAME IS TBD"

# The email address to be notified for errors or
# queries.
#
set manager_address "someone@somecomputer"

# Set the following to "yes" if you want all replies to
# contestants to be CC'ed to the manager, even those
# just reporting scores or getting problems.
#
set cc_manager no

# The following are the beginning and ending of the
# initial version of the ./help/this_contest file.  Each
# should begin and end with a line feed, or be "".  Each
# will then be separated from other text by a blank line.
# The text in each should be restricted to 56 columns.
#
# If you want to modify this_contest further, you may
# edit the ./help/this_contest file directly after it
# has been initially made.  The version of the file that
# is made by this hpcm_judging.rc file will be mantained
# in ./help/this_contest_parameter for reference pur-
# poses, while ./help/this_contest will be left untouch-
# ed after it has been edited to be different from
# ./help/this_contest_parameter.
# 
set this_contest_prefix "
THIS FILE IS UNEDITED AND INACCURATE!
"
set this_contest_postfix "
Good Hunting!
"

# TCL list of TCL regular expressions that match the
# test accounts which are NOT to appear on the score-
# board.
#
set test_accounts { }

# Ditto for test problems instead of accounts.  Usually
# you need not change this.
#
set test_problems { count javaio }

# List of makecontest arguments that specify the
# problems.  The format is
#
#	INDEX-FILE-NAME,
#	    SUBDIRECTORY/=problems/,
#	    QUALIFIER:include
#
# where the problems are in the SUBDIRECTORY of the
# directory holding the index file.  See below for
# examples.
#
set problems_arguments "
    $hpcm_directory/problem_library/bospre-ed.index, \
	public/=problems/, \
	    ALL:include
"
# Use the following if index is the file ~/ppp/iii and
# problems are in subdirectories of ~/ppp.  Because the
# problems are subdirectories of ~/ppp which contains
# the index file, `SUBDIRECTORY/' is the omitted.
# $env(HOME) is the home directory of the current
# (judge's) account.  `ALL' means include all problems
# listed in the index.
#
# set problems_arguments "
#     $env(HOME)/ppp/iii, \
#         =problems/, \
#             ALL:include
# "
#
# See hpcm/judge/lib/hpcm_judging.rc `makecontest_
# arguments' for more details, and `makecontest -doc'
# for complete details.


# Parameters: Local Account Parameters
# ----------- ----- ------- ----------

# Parameters to be set if there are local contestant
# accounts:
#

# Browser to use for javahelp and/or stlhelp.
#
set browser lynx

# Location of JAVA API index for browser to use to
# implement javahelp.  If not set, the javahelp contes-
# tant command is not enabled.
#
set java_api_index \
    /usr/local/jdk/docs/api/overview-tree.html

# Location of STL API index for browser to use to
# implement stlhelp.  If not set, the stlhelp contestant
# command is not enabled.
#
set stl_api_index /usr/local/STL_doc/index.html

# Set "yes" if contestant accounts are to be enabled
# for login by ssh using any of the public keys
# ~/.ssh/{identity,id_rsa,id_dsa}.pub that exist.
#
set ssh_enable yes
# set ssh_enable no


# Parameters: Web Page Parameters
# ----------- --- ---- ----------

# URL of contest web page.
#
set web_page_URL "www.somewhere.edu/~xxx/yyy"

# The following are passed to `makeweb' to make the web
# page.  Leave as "" parameters you do not want to use
# (e.g., if web_solutions_password is "" no solutions
# web page will be made).
#
# The web_manager_address will be listed as a contact
# on the web page.  The web_solutions_password PPP will
# be used to name a subdirectory `private/PPP' of the
# web page directory that will hold the solutions.  No
# link will be made to this directory, and the `private'
# subdirectory will be unreadable to the world, so PPP
# will act as a password.  The web_help_URL is the URL
# of the help page (see hpcm/contestant/help Makefile)
# relative to the contest web page.  The web_scoreboard_
# URL is the URL of the scoreboard relative to the web
# page; usually this is posted by using scoreboard_
# addresses (see above).  Problems will be put on the
# web page if "web" is in `description_type'.
#
set web_solutions_password ""
set web_help_URL ""
set web_scoreboard_URL ""

# You may want to set the following.  If left "", the
# page headers are automatically constructed from the
# contest_name, and the prefixes and postfix are empty.
# The prefixes come just after the page headers and
# the postfix comes after everything but the web page
# manager.  There are two pages involved: the contest
# page and the contest solutions page (which has no
# postfix).
#
set web_header ""
set web_prefix ""
set web_postfix ""
set web_solutions_header ""
set web_solutions_prefix ""

# TCL list of addresses to email or ssh scoreboard to.
# If this list contains zzz<YYY>, then every time the
# scoreboard is updated it will be emailed to
# `zzz<YYY>', and you should append the ./zzz_procmailrc
# file to the ~/.procmailrc file of the account YYY.
# If this list contains !zzz<YYY>, then every time the
# scoreboard is updated it will be ssh'ed to `zzz<YYY>',
# and you should append the ./zzz_authorized_keys file
# to the ~/.ssh/authorized_keys file of the account YYY.
# In either case edit what you append to change the
# name of the score file from public_html/DDDD/zzz to
# whatever is appropriate.  There should be NO spaces
# in zzz or YYY.
#
set scoreboard_addresses { }
# set scoreboard_addresses {
#	zzz<YYY>
# }

# Parameters: Usually Not Modified
# ----------- ------- --- --------

# Normally you should not have to make changes below
# this point.

# Set "yes" to use GMT for dates in file and directory
# names.  Otherwise the local time zone is used.
#
set use_gmt no

# Set the manualreply display to have a certain height
# with a given number of blank lines above that.  If you
# have a taller display, increase window_height.
#
# WARNING: If window_height is too large, programs such
# as manualreply and lookat may appear to be malfunc-
# tioning because some of the information they display
# is being scrolled off the top of the screen.
#
set window_blank_height 16
set window_height 24

# Set to contest directory, in case the $judging_
# directory/contest link needs to be made.  If needed
# and not set, the name of judging directory with
# `judging' replaced by `contest' and trailing password
# removed will be used.
#
# set contest_directory $env(HOME)/contest_TBD

# Set to the prototype account (as per SETUP_PROTOTYPE).
# If not set, the unique account with name of the form
# *[-_]proto and readable files home/setup.tar, home/
# empty.ls, and home/setup.ls is used, if there is such
# a unique account.
#
# set hpcm_prototype_account TBD

# Set to "no" if you do not want makecontest to run
# `makescoreboard start'.
#
set makescoreboard yes

# The following is the printer map for an untimed
# contest.  It lets each contestant determine his/her
# own printer by placing the printer name in the
# ~/PRINTER file of the contestant's account.  See
# `hpcm/contestant/bin/printer_pipe -doc' for more
# documentation.
#
set printer_map "
# Do not edit.  This is copied from the printer_map
# global variable in the hpcm_judging.rc file in the
# judging directory.
#
.* !~/PRINTER
"


# Computed Parameters (Do Not Modify)
# -------- ---------- ---------------

# You should NOT make changes beyond this point, unless
# you want to tune the contest to be a variant of one of
# the standards supported by this file.  If you do want
# to tune the contest, put changes at the very end of
# this file, where they will override the settings of
# this file.

set is_makecontest \
    [expr { [file tail $argv0] == "makecontest" }]

# Set addresses of autojudge.
#
if { $autojudge_address != "" } {
    set autojudge_addresses [list $autojudge_address]
}

# Always return .cerr file on syntax error.
#
set response_mode "$response_mode+cerr"

# If email accounts, do NOT require submissions to have
# HPCM_BEGIN/HPCM_END lines etc and authentication.
#
if { [regexp email $account_type] } {
    set use_authentication no
    set format_submissions no
} else {
    set use_authentication yes
    set format_submissions yes
}

# Set javahelp and stlhelp global variables if
# appropriate.

set javaok [info exists java_api_index]

if {    $is_makecontest \
     && $javaok \
     && [regexp {r..} [get_access $java_api_index]] } {

    set javahelp "
# Do not edit.  This file is generated from information
# provided by the `browser' and `java_api_index' global
# variables in the hpcm_judging.rc file in the judging
# directory.
#
$browser '$browser $java_api_index'
"
}

set stlok [info exists stl_api_index]
if {    $is_makecontest \
     && $stlok \
     && [regexp {r..} [get_access $stl_api_index]] } {

    set stlhelp "
# Do not edit.  This file is generated from information
# provided by the `browser' and `stl_api_index' global
# variables in the hpcm_judging.rc file in the judging
# directory.
#
$browser '$browser $stl_api_index'
"
}

# Compute files for makecontest -scoreboard_ssh
# and -scoreboard_procmailrc to make that are related to
# scoreboard_addresses.
#
set scoreboard_ssh {}
set scoreboard_procmailrc {}
foreach to $scoreboard_addresses {
    if { ! [regexp {^([^<]*)<([^>]*)>$} $to \
                   forget zzz account] } {
        error "bad address in scoreboard_addresses: $to"
    }
    if { [regexp {^!(.*)$} $zzz forget zzz] } {
        lappend scoreboard_ssh $zzz
    } else {
        lappend scoreboard_procmailrc $zzz
    }
}

# Default arguments to makecontest.
#
set makecontest_arguments "
    [include_if { [regexp email $account_type] } \
                -email] \
    [include_if { [regexp local $account_type] } \
                {-local -problems -demos
		        -startcontest -printer_map}] \
    [include_if { $javaok } "-javahelp"] \
    [include_if { $stlok } "-stlhelp"] \
    [include_if { [regexp get $description_type] } \
                -description] \
    [include_if { $makescoreboard == "yes" } \
    		"-scoreboard"] \
    -web -scoreboard_ssh -scoreboard_procmailrc \
    $judging_directory/help/index, \
	=help/ \
    $hpcm_directory/contestant/help/index, \
	common/=help/, \
	contest/=help/, \
	email/=help/, \
	advanced/=help/, \
	    [include_if { [regexp email \
	                          $account_type] } \
		        email:include,] \
	    untimed:include, \
	    common:include, \
	    advanced:include \
    $hpcm_directory/problem_library/index, \
	    demo:include \
    $problems_arguments
"

# Setup the scoreboard.
#
set scoreboard_start_time ""
set scoreboard_stop_time ""
set scoreboard_use_feedback no
set scoreboard_display_correct yes
set scoreboard_display_incorrect yes
if { $scoring_type == "feedback" } {
    set scoreboard_use_feedback yes
} elseif { $scoring_type == "unranked" } {
} elseif { $scoring_type == "unscored" } {
    set scoreboard_display_correct no
    set scoreboard_display_incorrect no
} else {
    error "in hpcm_judging.rc: Bad scoring_type:\
           $scoring_type"
}

# Scoreboard name, i.e, the name of the contest.
#
set scoreboard_name $contest_name

# Compute scoreboard_submitters to exclude test
# accounts.
#
set scoreboard_submitters {}
foreach x $test_accounts {
    lappend scoreboard_submitters & ! $x
}
set scoreboard_submitters \
    [lrange $scoreboard_submitters 1 end]
#
# Compute scoreboard_problems to exclude test
# problems.
#
set scoreboard_problems {}
foreach x $test_problems {
    lappend scoreboard_problems & ! $x
}
set scoreboard_problems \
    [lrange $scoreboard_problems 1 end]

# Scoreboard instructions for an untimed contest.
# These make a scoreboard in the file
#
#	$judging_directory/scoreboard.web
#
# that has the format:
#
#   NAME               				    TIME
#
#   <contents of $judging_directory/scoreboard.head>
#
#   ==== ===== ===== ===== ===== ===== ===== ===== =====
#	   <scoreboard table>
#   ==== ===== ===== ===== ===== ===== ===== ===== =====
#
#   <contents of $judging_directory/scoreboard.tail>
#
# This file is then emailed or ssh'ed to the addresses
# in the scoreboard_addresses global variable.  If the
# scorebaord_account_type variable contains the word
# `local', this file is also copied to $judging_direc-
# tory/contest/scoreboard.1 which is given a+r permis-
# sions.
#
set scoreboard_account_type $account_type
set scoreboard_instructions {

    { OUTPUT scoreboard.web "" "" }
    SEND

    { LINE NAME "" TIME }
    BLANK
    { INPUT scoreboard.head }
    BLANK

    BAR
    BOARD
    BAR

    BLANK
    { INPUT scoreboard.tail }

    if { [regexp local $scoreboard_account_type] } {
	{ OUTPUT contest/scoreboard.1 "" "" }
	GRANT_ACCESS
	{ INPUT scoreboard.web }
    }
}

set scoring_mode auto
set reply_mode auto
set log_mode auto
set reply_manager $manager_address
set log_manager $manager_address
if { $cc_manager } {
    set response_manager $reply_manager
} else {
    set response_manager ""
}

# Compute response_list equal to the SORTED subset of
# {in inout solution} in response_mode, in order to
# compute this_contest.
#
set response_list {}
foreach response [split $response_mode +] {
    if {    [lcontain {in inout solution} $response] \
         && ! [lcontain $response_list $response] } {
        lappend response_list $response
    }
}
set response_list [lsort $response_list]

# Compute account_list equal to the SORTED subset of
# {email local} in account_type, in order to compute
# this_contest.
#
set account_list {}
foreach account [split $account_type +] {
    if {    [lcontain {email local} $account] \
         && ! [lcontain $account_list $account] } {
        lappend account_list $account
    }
}
set account_list [lsort $account_list]

# Compute description_list equal to the SORTED subset of
# {get paper web} in description_type, in order to
# compute this_contest.
#
set description_list {}
foreach description [split $description_type +] {
    if {    [lcontain {get paper web} $description] \
         && ! [lcontain $description_list \
	 		$description] } {
        lappend description_list $description
    }
}
set description_list [lsort $description_list]
set get_descriptions_only \
    [expr {      [lcontain $description_list get] \
            && ! [lcontain $description_list web] }]

# Compute feedback scoring data.
#
set sqf $scoreboard_qualifier_factors
set in_percent [expr 100 - 100 * [lindex $sqf 0]]
set in_percent [format {%.0f} $in_percent]
set inout_percent [expr 100 - 100 * [lindex $sqf 1]]
set inout_percent [format {%.0f} $inout_percent]
set ic_percent [expr 100 - 100 * [lindex $sqf 4]]
set ic_percent [format {%.0f} $ic_percent]

# Check that autojudge_address is set for email
# contest.
#
if {    [lcontain $account_list email] \
     && $autojudge_address == "" } {
    error "autojudge_address must be non-empty for\
           email accounts"
}

# Compute this_contest.
#
set this_contest "$this_contest_prefix
The important help and demonstration problem files
are available at

    $web_page_URL
[include_if { [lcontain $description_list web] } "
Problem descriptions are also on this web page.
"][include_if { [lcontain $account_list email] } "
You may use your own private accounts to solve problems
and submit solutions via email.  To send submissions and
requests to the autojudge, send email

	To: $autojudge_address
[include_if { $get_descriptions_only } "
To get problem descriptions, send an email whose
`Subject:' field is

	Subject: get problems
"]
To submit a problem solution file named pppp.ext, send
an email whose `Subject:' field is

	Subject: submit pppp.ext

and whose body contains nothing but the file itself.
To test this with a demonstration problem, get the
file named `demos/count/count1.c' from the help and
demos web pages, rename it `count.c', and submit it with

	Subject: submit count.c
	
Other solutions to demonstration problems are on the web
pages and can be submitted.
[include_if { [llength $response_list] > 1 } "
You can also use alternative submission emails with sub-
jects of any one of the forms:
"][include_if { [llength $response_list] == 1 } "
You can also use alternative submission emails with sub-
ject of the form:
"][include_if { [lcontain $response_list in] } "
    Subject: submit pppp.ext in"][
   include_if { [lcontain $response_list inout] } "
    Subject: submit pppp.ext inout"][
   include_if { [lcontain $response_list solution] } "
    Subject: submit pppp.ext solution"][
   include_if { [llength $response_list] > 0 } "
"][include_if {    0 < [llength $response_list] \
		&&     [llength $response_list] < 2 } "
But you CANNOT use the alternative submission emails
with subjects of any one of the forms:
"][include_if { [llength $response_list] == 2 } "
But you CANNOT use the alternative submission emails
with subject of the form:
"][include_if { [llength $response_list] == 0 } "
You CANNOT use the alternative submission emails with
subjects of any one of the forms:
"][include_if { ! [lcontain $response_list in] } "
    Subject: submit pppp.ext in"][
   include_if { ! [lcontain $response_list inout] } "
    Subject: submit pppp.ext inout"][
   include_if { ! [lcontain $response_list solution] } "
    Subject: submit pppp.ext solution"][
   include_if { [llength $response_list] == 0 } "
"]
The scoreboard is on the web page.  See the `scoreboard'
help file for details about interpreting the scoreboard.
If you appear on the scoreboard, and want to change your
`scoreboard name', email the web page manager, who can
map email addresses to scoreboard names.

See the `email_solving' help file for more details about
solving problems using your own personal account.
"][include_if { $account_list == "email local" } "
Alternatively you may get a contest account by applying
to
"][include_if { $account_list == "local" } "
You may get a contest account by applying to
"][include_if { [lcontain $account_list local] } "
    $local_account_manager
$local_account_conditions
Once you have an account, you can get all the demonstra-
tion and contest problems into that account by\
	executing[
 include_if { $get_descriptions_only } "
the command `hpcm_get'.  This will also get the problem
descriptions into the problem directories: see the
directory `~/problems/pppp' for the description of
the problem named pppp.  You can direct print commands
"][include_if { ! $get_descriptions_only } "
the command `hpcm_get'.  You can direct print commands
"]in this account to email you postscript files by\
	making
a `~/PRINTER' file in this account: execute `help print'
for details.  You can use the `scoreboard' command in
this account to see the scoreboard: execute `help
scores' and `help scoreboard' for details.
[include_if { [llength $response_list] > 1 } "
In this account you can also use alternative submission
commands:
"][include_if { [llength $response_list] == 1 } "
In this account you can also use alternative submission
command:
"][include_if { [lcontain $response_list in] } "
    make in-submit"][
   include_if { [lcontain $response_list inout] } "
    make inout-submit"][
   include_if { [lcontain $response_list solution] } "
    make solution-submit"][
   include_if { [llength $response_list] > 0 } "
"][include_if {    0 < [llength $response_list] \
		&&     [llength $response_list] < 2 } "
But you CANNOT use the alternative submission commands:
"][include_if { [llength $response_list] == 2 } "
But you CANNOT use the alternative submission command:
"][include_if { [llength $response_list] == 0 } "
In this account you CANNOT use the alternative submis-
sion commands:
"][include_if { ! [lcontain $response_list in] } "
    make in-submit"][
   include_if { ! [lcontain $response_list inout] } "
    make inout-submit"][
   include_if { ! [lcontain $response_list solution] } "
    make solution-submit"][
   include_if { [llength $response_list] < 3 } "
"]
Read the `solving' help file for more details on how to
solve and submit a problem using this account.
"][include_if { $javaok && $stlok } "
In this account the `javahelp' and `stlhelp' commands
give access to on-line Java and C++ STL documentation:
see `help java' and `help c++'.
"][include_if { $javaok && ! $stlok } "
In this account the `javahelp' command gives access to
on-line Java documenation: see `help java'.
"][include_if { ! $javaok && $stlok } "
In this account the `stlhelp' command gives access to
on-line C++ STL documenation: see `help c++'.
"][include_if { $scoring_type == "unscored" } "
The scoreboard contains the date of each correct sub-
mission.  Contestants appear alphabetically on the
scoreboard, regardless of the number of problems they
have correct.
"][include_if { $scoring_type == "unranked" } "
The scoreboard contains the date of each correct sub-
mission.  Contestants with the most correct problems
appear first on the scoreboard.  Among those with the
same number of correct problems, contestants appear
alphabetically.  See the `scoreboard' help file for
more details.
"][include_if { $scoring_type == "feedback" } "
Contestants with the most correct problems appear first
on the scoreboard.  Among those with the same number of
correct problems, a ranking score is computed from the
submission types (no-feedback, in, inout) for incorrect
submissions.  A correct submission with no previous in-
correct submissions will have a score of 100.0, and the
penalties for incorrect submissions depend on submission
type as follows:

    incorrect no-feedback submit    $ic_percent%[
 include_if { [lcontain $response_list in] } "
    incorrect `in' submit           $in_percent%"][
 include_if { [lcontain $response_list inout] } "
    incorrect `inout' submit        $inout_percent%"]

Penalties are applied only to incorrect submissions for
problems you eventually submit correctly.  See the
`scoreboard' help file, `Feedback Contests', for de-
tails.
"]$this_contest_postfix"

# Computed web page parameters.
#
if { $web_page_URL == "" } {
    error "web_page_URL must be non-empty"
} elseif { [lcontain $account_type email] \
           && $web_help_URL == "" } {
    error "web_help_URL is empty for\
           email contest"
} elseif { [lcontain $account_type email] \
           && $web_scoreboard_URL == "" } {
    error "web_scoreboard_URL is empty for\
           email contest"
}
set web_title $contest_name
set web_manager_address $manager_address
if { [regexp web $description_type] } {
    set web_problems yes
} else {
    set web_problems no
}

# Parameter Overrides
# --------- ---------

# Add parameter settings here to override parameters
# that are normally not changed above.
