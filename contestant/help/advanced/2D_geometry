2D GEOMETRY PROBLEM HELP    Tue Sep  4 09:31:48 EDT 2001

For some reason many young computer scientists think
that geometry problems are hard, and avoid them.  The
purpose of this short discussion is to demonstrate that
geometry problems are fairly easy after all.

We will restrict ourselves here to 2D geometry.

Basics
------

Let
	p = (px,py) and q = (qx,qy)
	
be points in the plane.  The difference

	v = (vx,vy) = p - q = (px-qx,py-qy)
	
is the vector from p to q.  Its length is

	|v| = sqrt( vx**2 + vy**2 )

The scalar product of two vectors

	u = (ux,uy) and v = (vx,vy)

is

	u.v = ux*vx + uy*vy

	    = |u| |v| cos(theta)

where theta is the angle between u and v.  The sign of
theta does not matter because cos(theta) = cos(-theta).
Note that

	|v| = sqrt (v.v)

Note that u.v = 0 iff u and v are orthogonal (at right
angles) to each other, i.e., if theta = + or - 90
degrees and cos(theta) = 0.

A `unit' vector v is a vector of length 1 ( |v| = 1 ).
If u and v are unit vectors at right angles to each
other, which is the same as saying that

	|u| = 1,  |v| = 1,  u.v = 0

then one can ask what the coordinates of a point p
would be in the coordinate system in which u is in
the positive direction of the x-axis and v is in the
positive direction of the y-axis.  The answer is

	(u.p, v.p)

Note that

	| u.p |   | ux  uy | | px |
	|     | = |        | |    |
	| v.p |   | vx  vy | | py |

so u and v are the rows of the 2x2 matrix which by left
multiplication translates from old xy coordinates to new
uv coordinates.

If u is a unit vector, we call (u.v)u the projection of
v onto u.  Taking vectors as denoting points (the ends
of the vectors if all have the same origin), then the
projection of v onto u is the point on the line along u
that is closest to the point v.  That is, u.v is the
number K which minimizes | v - Ku |.  You can check this
with a little algebra.

A clockwise rotation R(theta) of a vector v=(vx,vy) by
an angle theta is

	         |   cos(theta)   sin(theta) | | vx |
    R(theta).v = |                           | |    |
	         | - sin(theta)   cos(theta) | | vy |

	      |   vx cos(theta) + vy sin(theta) |
	    = |                                 |
	      | - vx sin(theta) + vy cos(theta) |

Most particularly, if theta = 90 degrees, then

		
	                |  0   1 |
	R(90 degrees) = |        |
	                | -1   0 |


        R(90 degrees).v =  (vy,-vx)

These are all the basics you need to know.  However,
you need to know these basics very well.


Lines Dividing Planes
----- -------- ------

The line through points p and q, oriented in the
direction from p to q (p != q is assumed), divides the
plane into three parts: points to the right of the
line (facing in the direction from p to q), points to
the left of the line, and points on the line.  How do
we find out whether a point r is to the right, left,
or on the line?

Simply compute:

    v = R(90 degrees).(q-p) = (qy-py,-qx+px)

    Note: then v.q = v.p.

    if v.r > v.p then r is to the right of the line;
    if v.r < v.p then r is to the left of the line;
    if v.r = v.p then r is on the line.

v is the vector from p to q rotated 90 degrees clock-
wise, so it points to the right of the line through p
and q.  Then

	 q - p                   v
	-------		and	---
	|q - p|                 |v|

are a pair of unit length vectors at right angles to
each other and form a coordinate system.  Therefore

	v.r
	---
	|v|

is the coordinate in this coordinate system in the
direction perpendicular to the line through p and q, and
this is >, =, or < to v.p/|v| according to whether r is
to the right, on, or to the left of this line.

Note that if p, q, and r have integer coordinates, then
v.r and v.p are integers and are exact, and the clas-
sification of r as to the right, on, or to the left of
the line is exact, with no chance of roundoff error.

Sometimes the distance from r to the line from p to q
is desired.  This is just the absolute value of

	    v.r 
	    ---
	    |v|


The Distance of a Point to a Finite Line
--- -------- -- - ----- -- - ------ ----

We just indicated how to find the distance between a
point r and an infinite line that runs through two
points p and q.  What if the line is finite with ends p
and q.

This can be readily solved if the line is parallel to
the x-axis.  Suppose it is and the x coordinates of p
and q are px < qx, and the x coordinate of r is rx.
Then if rx <= px, the distance from r to the line is the
distance from r to p.  Similarly if rx >= qx then the
distance from r to the line is the distance from r to q.
But if px < rx < qx, then distance from r to the line is
the distance from r to the point on the line with the
same x coordinate as r.  This is just the absolute value
of the y coordinate of r.

In order to find the distance when the line is not
parallel to the x-axis, we introduce new coordinates in
which the line will be parallel to the x-axis.  To do
this we find orthogonal unit vectors u and v such that
u is parallel to the line.  Then the new x coordinates
are u.p, u.q, u.r and the new y coordinate of r is v.r.


Intersection
------------

Suppose we are given four points, p1, p2, q1, q2.
Question: Does the interior of the finite line from p1
to p2 intersect the interior of the finite line from q1
to q2.  By the interior of a line we mean the part of
the line that excludes its end points.  Also, we do NOT
count as intersections parallel lines that overlap.

Answer: It does iff the infinite line through p1 and p2
splits q1 and q2, and the infinite line through q1 and
q2 splits p1 and p2, where for an infinite line to split
two points means that one point must be to the right of
the line and the other point must be to the left of the
line.  Note that we can assume p1 != p2 and q1 != q2, as
otherwise at least one of the two finite lines would
have no interior.

Suppose instead we wanted to know whether the finite
lines including end points intersect.  Then we change
the definition of split so that an infinite line splits
two points iff one point is on or to the right of the
line and the other point is on or to the left.  Also
we can mix our two definitions of `split' to test
whether one finite line, including its end points,
intersects the interior of another finite line.


Convex Hull
------ ----

The convex hull of a set of points V in a plane is a
sequence of points of V, p1, p2, p3, ..., p(N), such
that for every i, all the points of V are on or to the
right of the line through p(i) and p((i mod N)+1), and
such that no point p(j) is on this line except of course
p(i) and p((i mod N)+1).  Then the finite lines from
p(i) to p((i mode N)+1) for i = 1, ..., N are the sides
of the smallest convex polygon such that all the points
of V are inside this polygon or on its boundary.

To find the convex hull, first find some point p1 on the
hull, which can be done say by choosing a leftmost point
in V and given two leftmost points choosing the highest.
Then extend the hull recursively from p(i) to p(i+1)
by using the following.

Given a point p, define a relation among points q1, q2
that are not equal to p as follows:

    definition:  q1 > q2 iff q2 is to the right of
			     the line from p to q1
			     or q2 is on this line and
			     closer to p that q1 is.

If p is a hull point, this relation is antisymmetric and
transitive (proof to reader).  So given the hull up to
p(i), choose p(i+1) to be the maximum point in V accord-
ing to this relation.  Stop when p(i+1) = p1, in which
case N=i.

This is not the fastest algorithm, as it has time
O(|V|**2) where |V| is the number of points in V.  The
fastest algorithm is the Gram-Schmidt algorithm that
begins with a sort of V and has running time dominated
by the sort time, O(|V| log|V|).


Inside Convex Polygons
------ ------ --------

Suppose we have a convex hull p1, ..., p(N) in clockwise
order that defines a convex polygon.  So the sides of
the polygon with a clockwise orientation are the lines
from p(i) to p((i mod N)+1), for i = 1, ..., N.

Then a point r is inside the convex polygon but not on
the boundary of the polygon iff r is to the right of
each clockwise oriented side of the polygon.  Or more
specifically, r is to the right of the infinite line
that extends the side.

So when does the interior of a line from r1 to r2 inter-
sect the inside of a convex polygon?  It does if the
interior of the line from r1 to r2 intersects the inter-
ior of any side of the polygon.  It also does if r1 and
r2 are both inside or on the boundary of the polygon,
but both are not on the same side of the polygon (or
equivalently, on the infinite line extending that side).
These are the only two cases where the interior of the
line from r1 to r2 can intersect the interior of the
polygon, UNLESS some of the convex hull points p1, ...,
p(N) are in the interior of the line from r1 to r2.  In
this last case, divide the line up into segments whose
interiors do not contain any convex hull points, and
apply the above two cases to see if any of these seg-
ments intersect the interior of the polygon.

So all one has to do is take the clockwise sides of the
polygon and check that the interior of the finite line
from r1 and r2 intersects some side, or that for each
polygon side, r1 and r2 are both on or to the right of
the infinite line extending the side, and not both r1
and r2 are on that line.  During this process one must
check each side beginning point p to see if it is in
the interior of the line from r1 to r2, and if it is,
one then divides the line from r1 to r2 up into two
segments, one from r1 to p and one from p to r2, and
applies the algorithm recursively to see if either of
these segments intersects the interior of the polygon.


Polygon Maze
------- ----

Problem: Given a set of convex polygons in a plane, and
two points p and q outside any convex polygon, find the
shortest path from p to q that does not go inside any
convex polygon.  Paths may travel on the edges of a
polygon if these are not inside some other polygon.

Solution: Let V be the set of vertices of the polygons
plus the two points p and q.  Then the path to be found
can be represented as a sequence of straight line
segments with vertices in V (proof to reader).  So it
is a shortest path in an undirected graph whose vertices
are V such that given points r1 and r2 in V, there is
an edge in this undirected graph between r1 and r2 iff
the interior of the line from r1 to r2 does not inter-
sect the interior of any polygon.  Actually, we can make
the computation simpler by also deleting an edge from r1
to r2 if the interior of the line from r1 to r2 contains
any member of V, as the shortest path can be composed of
line segments between members of V that do not contain
other members of V.


Circular Anti-Maze
-------- ---------

Find the shortest path between two points in a plane
that has circular holes in it.  The part of a path
that transverses a hole does NOT count toward the
length of the path.


Robot Arms
----- ----

Suppose we have a planar robot arm.  Such an arm con-
sists of line segments in an order.  The beginning of
each segment is a pivot point, around which a servo can
rotate the segment and anything attached to its end.
The end of a segment is attached to the beginning of the
next segment, or to the robot hand if the segment is the
last segment of the arm.  We will define the end of the
last segment to also be a pivot point: it could have a
servo to rotate the hand.

The parameters of the arm are the lengths of the seg-
ments and the angular settings of the servos.  A servo
is typically set to have 0 angle if the segment follow-
ing it continues in the same direction as the segment
preceding it.  We will assume that a positive angle
means the arm following the servo is rotated clockwise
by that angle.  Particular robot arms may use other
conventions for servo angles.  We will also assume that
the first pivot point is at the origin, and that the
setting of 0 degrees for the first servo points the
first segment along the positive x-axis.

The position of the pivot points of such an arm can be
computed recursively by induction on the number of
segments in the arm.  If there are 0 segments, there is
only one pivot point (the hand's), and it is at the
origin.  Otherwise assume for the moment that the first
segment is such that its end (not its beginning) is at
the origin and its orientation is in the direction of
the positive x-axis, so its server setting is 0 degrees.
Next compute the positions of the pivot points at the
ends of the other segments by induction.

Now translate the origin to the beginning of the first
segment by adding the length of this segment to the
x coordinate of every pivot point.  The beginning of the
first segment is now the origin.  The setting of the
first servo is still 0 degrees.

Now rotate all the pivot points about the origin by the
amount indicated by the setting of the first servo.
This finishes the computation.

This computation is easy because we use induction to
build the arm from its end, and not from its beginning.
