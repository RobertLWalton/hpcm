Constrained Search          Fri Sep 10 10:31:48 EDT 2010
Problem Help

Constrained search is most commonly used to solve
puzzles that are based on constraints which force many
of the moves.  Constrained search combines brute force
search with `propagation' that checks constraints and
makes moves forced by constraints.

Constrained search as we view it here is a subclass of a
very important and large class of programming problems
called `constrained satisfaction problems' or CSP
problems.  CSP is a very broad class of problems because
constraints come in many forms, and there are corres-
pondingly many different algorithmic tricks that may be
deployed to solve CSP's.  In the parlance of the litera-
ture on CSP, brute force search is called `chronological
backtracking' and what we call `propagation' combines
what the literature refers to as `forward checking' and
aspects of what the literature calls `variable order-
ing'.

One CSP problem is graph coloring, and we will use that
problem here as an example application of our constrain-
ed search algorithm.

The graph coloring problem is simply this: given an
undirected graph and a small finite list of colors,
color each node of the graph so that no two adjacent
nodes have the same color.

A major application of graph coloring is register
assignment in a compiler: the colors are the available
registers, the graph nodes are the variables that must
be assigned to registers, and the edges indicate that
two variables exist at the same time and must therefore
be in different registers.


The Constrained Search with Propagate Algorithm
-----------------------------------------------

In a sense describing our algorithm is simple.  Take the
graph coloring case.  We merely need to execute the
following:

    search:
    	find a node i to which no color has been
	     assigned
	if there are no such nodes:
	    announce success
	    return
	else
	for each color c:
	    assign c to node i
	    check the constraints and
	        make any forced moves
	    if no constraints have failed:
		call search
	    undo the effects of assigning c to node i

If there are m colors, constraint failure occurs when
some unassigned node i has neighbors that have all m
colors so no assignment to node i is possible.  Similar-
ly a move is forced when some unassigned node i has
neighbors with m-1 colors so the color to be assigned to
node i is forced.

The difficulty is how to organize the code that does
constraint checking and move forcing, since every time
a forced move is made more constraints must be checked.
What we propose is to bundle much of this code into a
`propagate' function.

We start with the data needed by the brute force search.
This consists of the system state and an action stack,
also known as the `undo' stack.  In our example the
system state is simply a value for each graph node that
records the color assigned to the node or the value
UNKNOWN indicating no color has been assigned yet.  The
action stack records each action that changes the system
state so that action can be undone by the search func-
tion.

Thus in our example the search function uses the follow-
ing helper functions:

    set_color i c:
        push an action record into the action stack
	     containing i
	change the color of node i to c

    undo ap:
        while ap < end of stack
	    pop an action record ar off the end of the
	        action stack
	    reset the color of node i to UNKNOWN,
	          where i is taken from ar

and the last loop in the search becomes:

        ap = end of action stack
	for each color c:
	    set_color i c
	    check the constraints and
	        make any forced moves
	    if no constraints have failed:
		call search
	    undo ap

The only task left is to write the code that checks
the constraints and makes the forced moves.  We will
put some of the constraint checking into the search
function by changing

	for each color c:

in the code above to

	for each color c that is not the color of a
	         neighbor of node i:

Then our main idea is to encapsulate the rest of the
constraint checking and move forcing into a `propagate'
function that goes through the action stack from ap to
the end of the stack checking constraints that may be
affected by each action and making any forced moves.
The action stack may grow in this process when forced
moves are made, but eventually the propagate function
will catch up to the end of the stack.

Thus the last loop in the search becomes;

        ap = end of action stack
	for each color c that is not the color of a
	         neighbor of node i:
	    set_color i c
	    if ( propagate ap ):
		call search
	    undo ap

The propagate function returns true if it did not find
any constraint violation, and false if it did find a
constraint violation.

In our example we choose to keep an extra piece of data
for each node: the number of allowed colors.  This is
the number of colors not assigned to any of the node's
neighbors.  If this is 0 a constraint has been violated,
and if this is 1 the color of the node is forced.

Setting the number of allowed colors for a node becomes
another action.  So now we have:

    action record:
	type: SET_COLOR or SET_ALLOWED
	i
	old value

    set_color i c
	push a new action record with type SET_COLOR and
	     i into the action stack
	set the color of node i to c

    set_allowed n v
	push a new action record with type SET_ALLOWED,
	     i, and old_value = the previous allowed
	     value of node i, into the action stack
	set the allowed value of node i to v

    undo ap:
        while ap < end of stack
	    pop an action record ar off the end of the
	        action stack
	    switch on ar.type:
	        SET_COLOR:  reset color of node ar.i to
		            UNKNOWN
		SET_ALLOWED: reset allowed value of node
		             ar.i to ar.old_value

With this the propagate function becomes:

    propagate ap:
        while ap < end of stack
	    let ar be the action record pointed at by ap
	        and increment ap to the next action
		record
	    switch on ar.type:
	        SET_COLOR:
		    for each neighbor node i2 of node
		                                 ar.i:
		        computed new allowed value nav
			         of node i2
			if nav = 0 return false
			else if nav = 1:
			    let c2 be the only color
			        node i2's neighbors do
				not have
			    set_color i2 c2
			else if nav not = previous
			     allowed value of node i2:
			    set_allowed i2 nav
		SET_ALLOWED:
		    do nothing
	return true

Lastly we employ a trick to reduce the size of the
search tree.  In our search function we replace

    	find a node i to which no color has been
	     assigned
by
    	find a node i to which no color has been
	     assigned which has MINIMUM allowed value

This means the upper nodes of the search tree will have
fewer branches, and is a standard trick in brute force
search to keep the search tree size down and improve
running time.

The above code can be varied a lot.  If you do not want
to let the search function choose the node with minimum
allowed value, you do not have to make the allowed value
part of the system state, and can get rid of the set_
allowed function and SET_ALLOWED action records.  Or
you can check constraints and force moves when the pro-
pagate function processes the SET_ALLOWED record rather
than when it processes the SET_COLOR record.  And there
are other variants of the above code.


Application to Graph Coloring
-----------------------------

The observant reader may have noticed that if a graph
node i has fewer than m-1 neighbors, where m is the
number of colors, then a coloring of n can never be
forced.  So perhaps constraints are not so useful in
graph coloring.

Ahh!  There is a trick that removes nodes with fewer
than m neighbors from the graph and then after the graph
is colored puts them back.

Start with the graph and an empty stack.  If there is a
node i with fewer than m neighbors in the graph, remove
node i from the graph and push it on the stack.  Con-
tinue until no node in the graph has fewer than m neigh-
bors.

Then color the remaining graph.

Now while the stack is not empty, pop the top node i off
the stack.  Node i has fewer than m neighbors.  There-
fore there must be a color c that none of its neighbors
has.  Assign c to node i and put node i back in the
graph.  Continue until the stack is empty.

Now you are done coloring the original graph.




File:		constrained_search
Author:		Bob Walton <walton@seas.harvard.edu>
Date:		See top of file.

The authors have placed this file in the public domain;
they make no warranty and accept no liability for this
file.

RCS Info (may not be true date or author):

    $Author: walton $
    $Date: 2010/09/10 15:01:36 $
    $RCSfile: constrained_search,v $
    $Revision: 1.4 $
