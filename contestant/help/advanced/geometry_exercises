GEOMETRY EXERCISES HELP    Mon Aug  8 05:52:07 EDT 2005

These are programming exercises you can do to help
strengthen your geometry problem skills.

Problem: Find the shortest path between two points in a
plane that has circular holes in it.  The part of a path
that transverses a hole does NOT count toward the length
of the path.

    Solution: This is just a shortest path problem in an
    undirected graph where the set of points (graph
    nodes) is the original two points plus the centers
    of the circular holes, and the distance between two
    points is their total distance minus the radii of
    any holes centered at the points.

Problem: When does a point on a trajectory with rational
coordinates hit a corner of a rectangle, whose corners
have rational coordinates?

    Solution: You need a coordinate equality test of the
    form

    	bool equal ( double x, double y,
	             double accuracy )
	{
	    return x - accuracy < y
	           &&
		   y < x + accuracy;
	}

    and the question is, what is accuracy?

    Often the following artifice will suffice.  You
    might use rational numbers to do the computation,
    but then coordinates would have to have the form
    N/D, and since D would have to be an integer, by
    the limits of the computer D <= 3 * 10**9 if D is
    stored in a 32-bit unsigned integer.  So two coor-
    dinates that are unequal will differ by more than
    10**-10, and one can take accuracy <= 1e-10.

    Let B be a bound on the absolute size of all coor-
    dinates.  Then computation of coordinates will have
    a double precision error of B*10**-15, more or less.
    This must be noticeably less than accuracy, so you
    should take accuracy => B*1e-14.

    If B*1e-14 <= 1e-10 you can take either number as
    the accuracy.  Otherwise you had better use B*1e-14
    and pray, though you can compute B dynamically from
    the data.

    You can always compute what accuracy should be pre-
    cisely if you go to the trouble to bound the deno-
    minators of rational coordinates to be compared.
    Remember, however, that the difference N1/D1 - N2/D2
    for integers N1, D1, N2, D2 has denominator D1*D2,
    unless D1 and D2 have a common divisor.

Problem: Compute the distance between a point (x,y) and
an infinite line through points (x1,y1) and (x2,y2).

    Solution1: Compute (dx,dy) to be the displacement
    vector from (x1,y1) to (x2,y2), rotate (dx,dy) 90
    degrees clockwise to get (dy,-dx), normalize to a
    unit vector, use this vector to compute coordinates
    in the direction perpendicular to the line of the
    points (x,y) and (x1,y1), and take the difference.

    Solution2: As for method1 compute a unit vector in
    the direction of the line and another at right
    angles to the line.  Use these to change coordinates
    so the line is the x-axis (y = 0) and then compute
    the distance of the point in the new coordinates to
    the x-axis (its just the absolute value of the
    point's new y coordinate).
    
    Although Solution2 seems like more work than Solu-
    tion1, coordinate change is a unifying conceptual
    basis for solving complex distance problems.

Problem: Ditto for the finite line segment from (x1,y1)
to (x2,y2).

    Solution: Change coordinates so the finite line seg-
    ment is from (0,0) to (k,0) and the point coordi-
    nates are (x',y').  Then  divide into three cases:
    x' < 0, 0 <= x' <= k, k < x'.

Problem: Compute the distance between the finite line
segment from (xa1,ya1) to (xa2,ya2) and the finite line
segment from (xb1,yb1) to (xb1,yb2).

    Solution: Change coordinates so one finite line seg-
    ment is from (0,0) to (k,0).  Then divide the other
    segment into three segments at the intersections of
    the lines x = 0 and x = k.  For the middle segment
    the distance is the minimum of the absolute value
    of the y coordinates at the end points.  For the
    other segments it is the distance between the other
    segment and either (0,0) or (k,0).  Take the  min-
    imum of the three distances (some of which will be
    missing if their segment is missing).

Problem: Compute the distance between a point (x,y,z)
and an infinite line through points (x1,y1,z1) and
(x2,y2,z2).

    Solution1: We want to change coordinates so the
    infinite line becomes the x-axis.  We will need the
    cross product.
    
    Recall that the cross product of vectors is defined
    by

    	V1 = (X1,Y1,Z1)		V2 = (X2,Y2,Z2)

		V = V1 x V2 = (Y1*Z2 - Z1*Y2,
			       Z1*X2 - X1*Z2,
			       X1*Y2 - Y1*X2)

    V is always perpendicular to V1 and V2 and the
    length of V is the area of the trapezoid with sides
    V1 and V2.  If

    	UX = (1,0,0)    UY = (0,1,0)   UZ = (0,0,1)

    are unit vectors in the directions of the x, y, and
    z axis respectively, then

    	UX x UY = UZ	UY x UZ = UX	UZ x UX = UY

    and note that the vectors in these equations are all
    rotations of the order UX,UY,UZ.

    The definition of cross product can be rewritten as

    	(X1,Y1,Z1) x (X2,Y2,Z2) =
	      Y1*Z2*UX + Z1*X2*UY + X1*Y2*UZ
	    - Z1*Y2*UX - X1*Z2*UY - Y1*X2*UZ

    where the + terms, Y1*Z2*UX, Z1*X2*UY, X1*Y2*UZ,
    all involve rotations of the letter ordering `XYZ',
    while the - terms are just the + terms with the
    scalar factors reversed (or rotations of `YXZ').

    We want to change coordinates so that the infinite
    line becomes the x-axis.  Let U1 be the unit vector
    from (x1,y1,z1) to (x2,y2,z2).  Examine U1 x UX,
    U1 x UY, U1 x UZ and take the first of these that
    has length > 0.3 (at least one will qualify).  Nor-
    malize this to a unit vector, call it U2, and take
    U3 = U1 x U2.  Then U1, U2, U3 are an orthogonal
    basis and U1 is in the direction of the line.  By
    computing coordinates of the line and point in the
    directions U2 and U3, one can project both on a
    plane perpendicular to the line, in which case the
    line is projected to a point, and the distance
    required is the 2D distance of the two projection
    points.

    Solution2: The cross product V x W has the following
    geometrical definition: project V on the plane
    perpendicular to W, rotate the projection 90 degrees
    around the W axis, and multiply the projection by
    the length of W.  Therefore with U1 as in Solution1,
    the answer is just the 3D distance between

    	(x1,y1,z1) x U1   and   (x,y,z) x U1

    Note that - (V x U) x U is just the projection of
    V on the plane perpendicular to U, for any unit
    vector U.

Problem: Compute the distance between a point (x,y,z)
and an finite line from (x1,y1,z1) to (x2,y2,z2).

    Solution: Using the method of the last exercise,
    change coordinates so the line is from (0,0,0)
    to (k,0,0), and the point in these coordinates
    is (x',y',z').  Then divide into three cases:
    x' < 0, 0 <= x' <= k, k < x'.

Problem: Compute the distance between an infinite line
through the points (x1,y1,z1) to (x2,y2,z2) and a finite
line segment.

    Solution: Change coordinates so the infinite line is
    the x axis.  Then project the line segment on the
    (y,z) plane and find its distance to the origin in
    that plane.

Problem: Compute the distance between two finite 3D line
segments.

    Solution: Change coordinates so one segment is from
    (0,0,0) to (k,0,0).  Divide the other segment into
    three parts using the intersections of that segment
    with the x = 0 and x = k planes.  Compute the dis-
    tance from the three parts to (0,0,0), the x-axis,
    and (k,0,0) respectively and take the minimum of the
    three distances.

Problem: Find the intersection of a line segment B from
(x1,y1) to (x2,y2) with another line segment C from
(x3,y3) to (x4,y4), with `corner cases'.

    Solution: Compute (dx,dy) = (x2-x1,y2-x1) so that
    (dy,-dx) is perpendicular and pointing to the right
    of the directed segment from (x1,y1) to (x2,y2).
    Then you can compute whether any point is to the
    right of, on, or to the left of the infinite
    directed line extending B by comparing the dot
    product of the point with (dy,-dx) with the dot
    product of (x1,y1) (or equivalently (x2,y2)) with
    (dy,-dx).

    The computation of being `on' the line requires an
    equality test.  This requires that the coordinates
    must all be multiples of some quantum Q.  Then dot
    products of points and point differences are taken
    as equal if they are within Q**2/4 of each other,
    assuming the accuracy of computation is much better
    than Q**2.  If the coordinates are integers, you can
    dispense with Q and use integer arithmetic for the
    dot products and comparisons.

    In order for the line segments to intersect at an
    interior point of both segments, it is both neces-
    sary and sufficient that the end points of each seg-
    ment must be on opposite sides of the other segment.
    Interpolation using the values of dot products with
    (-dy,dx) can be used to determine the location of
    the intersection.

    Otherwise, if there is an intersection, it is at one
    of the end points of one of the segments.  The
    intersection end point must be exactly on the
    infinite line extending the other segment.  It must
    then be in the interior of the other segment, or
    must equal an end point of the other segment.

Definition: A simple (aka non-degenerate) polygon is a
sequence of vertices in clockwise (or counterclockwise)
order defining the line segments of the boundary of the
polygon, such that the only intersections of two seg-
ments are those at the endpoints of successive segments
in the circular list of segments.  Its is possible that
two successive segments will be parallel, hence the
middle vertex will be unnecessary.

Problem: Find all the intersections of a 2D line segment
and a boundary of a simple polygon.

    Solution: You can find all the intersections of the
    line segment and the polygon side segments.

Problem: Determine if a 2D line segment intersects the
interior of a simple polygon, if it is known that the
line segment is not completely inside the polygon.

    Solution: Find the intersections of the 2D line seg-
    ment L and each line segment B or vertex V in the
    boundary of the polygon, and investigate these
    intersections.

    The easy case is where L and some B intersect at a
    point in the interior of both L and B.  Then of
    course L intersects the interior of the polygon.

    All the other cases can be reduced to the case where
    the intersection is both a vertex V of the polygon
    and an end point of L.  If an end point of L is in
    the interior of some polygon boundary line B, divide
    B in two at that point to create an additional poly-
    gon vertex.  If a vertex V of the polygon is an in-
    terior point of L, divide L in two at V.
    
    So all the harder cases reduce to the case where the
    intersection is a vertex V of the polygon and an end
    point of L.

    You therefore have a vertex with 3 line segments
    leaving it: two polygon sides and L.  So is L going
    into the interior of the polygon?

    Treating polygon sides as clockwise directed, let
    OUT be the outgoing polygon side and IN the incoming
    polygon side.  Let LINE be L directed out from the
    vertex.  Let -IN be the incoming polygon side with
    direction reversed.  Measure the counterclockwise
    angles from OUT to the segments -IN and LINE, and
    normalize these angles to the range [0,2pi).  Then
    letting OUT, -IN, and LINE denote the angles, so
    OUT = 0 and -IN > 0, we have that LINE goes into the
    interior of the polygon iff LINE > -IN.

    This solves the problem, except that you have to
    decide when angles are exactly equal.

    Let point coordinates all have absolute value less
    than B and be exact multiples of Q with Q => B*A
    for some small enough A.  Then two angles that are
    different will differ by at least A**2, and two that
    are equal will differ by 0, so if the accuracy of
    computation is much better than A**2/10, we can
    declare two angles different if and only if they
    differ by at least A**2/10.

    [Proof:  tan X - tan Y = sin ( X - Y )
                           / (cos X * cos Y )

     Therefore

     	     | tan X - tan Y | <= | sin ( X - Y ) |

     We are interested in the case where X - Y is very
     small, so that | sin ( X - Y ) | <= | X - Y |, and

     	     | tan X - tan Y | <= | X - Y |

     Scaling coordinates by Q**-1, coordinates are all
     integers bounded by A**-1 >= B*(Q**-1), and the
     left side is

	    x1/y1 - x2/y2 = .../(y1*y2)

     where |y1| <= A**-1 and |y2| <= A**-1, so if the
     left side is not zero, it differs from zero by at
     least A**2.  Therefore X and Y differ by at least
     A**2.]

    With this in mind, the code to normalize an angle
    X to the range [0,2pi) is

	ACC = A*A/10
    	while ( X < - ACC ) X += 2pi
    	while ( X > 2pi - ACC ) X -= 2pi

Definition: A simple polygon is convex if and only if
every line segment between two points inside or on the
boundary of the polygon is completely inside or on the
boundary of the polygon.

Definition: The convex hull of a set of points V in a
plane is a sequence of points of V, p(1), ..., p(N),
such that for every i, all the points of V are on or to
the right of the line through p(i) and p((i mod N)+1),
and such that no three points of the set p(1), ..., p(N)
are on a straight line.  Then the finite lines from p(i)
to p((i mod N)+1) for i = 1, ..., N are the sides of the
smallest convex simple polygon such that all the points
of V are inside this polygon or on its boundary.

Problem: Find the convex hull of a set of 2D points.

    Solution: To find the convex hull, first find some
    point p(1) on the hull, which can be done say by
    choosing a leftmost point in V and given two
    leftmost points choosing the lowest.  Then extend
    the hull recursively from p(i) to p(i+1) by using
    the following.

    Given a point p, define a relation among points q1,
    q2 that are not equal to p as follows:

	definition:  q1 > q2
		     if and only if
		     q2 is to the right of the infinite
		     line directed from p to q1 or q2
		     is on this line and closer to p
		     than q1 is.

    If p is a hull point, this relation is antisymmetric
    and transitive (proof to reader).  Given the hull up
    to p(i), choose p(i+1) to be the maximum point in V
    according to this relation.  Stop when p(i+1) =
    p(1), in which case N=i.

    This is not the fastest algorithm, as it has time
    O(|V|**2) where |V| is the number of points in V.
    The fastest algorithm is the Gram-Schmidt algorithm
    that begins with a sort of V and has running time
    dominated by the sort time, O(|V| log|V|).

Problem: Find whether some point p is inside a convex
simple polygon.

    Solution: Suppose we have a convex hull p(1), ...,
    p(N) in clockwise order that defines a convex poly-
    gon.  So the polygon sides with a clockwise orienta-
    tion are the lines from p(i) to p((i mod N)+1), for
    i = 1, ..., N, and no three points lie on the same
    line.

    Then a point p is inside the convex polygon but not
    on the boundary of the polygon iff p is to the right
    of each clockwise oriented side of the polygon.  Or
    more specifically, p is to the right of the infinite
    line that extends the side.

Problem: Find whether the interior of the line segment
between points pa and pb intersects the interior of a
convex simple polygon.

    Solution: The line segment intersects the interior
    of the polygon if the interior of the line segment
    intersects the interior of any side of the polygon.
    It also does if pa and pb are both inside or on the
    boundary of the polygon, but are not both on the
    same single side of the polygon, assuming no two
    consecutive sides of the polygon are parallel.

    These are the only two cases where the interior of
    the line segment can intersect the interior of the
    polygon, UNLESS some of the convex hull points p(1),
    ..., p(N) are in the interior of the line segment.
    In this last case, use a convex hull point in the
    interior of the line segment to divide the line
    segment in two, and recursively ask if the interiors
    of either of the two new line segments intersect the
    interior of the polygon.

Problem: Given a set of convex simple polygons in a
plane, and two points p and q outside any of the
polygons, find the shortest path from p to q that does
not go inside any polygon.  Paths may travel on the
edges of a polygon if these are not inside some other
polygon.

    Solution: Let V be the set of vertices of the poly-
    gons plus the two points p and q.  Then the path to
    be found can be represented as a sequence of
    straight line segments with vertices in V (proof to
    reader).  So it is a shortest path in an undirected
    graph whose vertices are V such that given points pa
    and pb in V, there is an edge in this undirected
    graph between pa and pb iff the interior of the line
    from pa to pb does not intersect the interior of any
    polygon.

    Actually, we can make the computation simpler by
    also deleting an edge from pa to pb if the interior
    of the line from pa to pb contains any member of V,
    as the shortest path can be composed of line seg-
    ments between members of V that do not contain other
    members of V.

Problem: Intersect a horizontal infinite line with a
simple polygon to produce a set of line segments.
Include any part of the line that runs along a side of
the polygon.

    Solution: Consider a scan starting at negative
    infinity on the line and moving along the line to
    positive infinity.  The scan is initially in the
    OUTSIDE state, and as it moves, may transition to
    the INSIDE state and back, where OUTSIDE means
    outside the polygon and INSIDE means inside or on
    the boundary of the polygon.  The list of transition
    points is the list of line segment ends that needs
    to be computed.

    Sort the sides of the polygon by the x coordinate
    at which they cross the horizontal infinite line.
    If a side runs along the line, sort it by its
    minimum coordinate.  Then this is the order these
    sides will be encountered by the scan.

    If the scan encounters a side intersected in its
    interior by the infinite line, this is always a
    transition point, and the scan state flips, from
    OUTSIDE to INSIDE or vice versa.

    If the scan encounters a side intersecting at one
    of its ends, i.e., a polygon vertex, life is more
    interesting.  If the vertex is the low x vertex of
    a side running along and parallel to the scan line,
    the scan state becomes INSIDE.  Otherwise if the
    scan has not encountered another side with the same
    end point, the scan must move to the next side in
    the sorted list, which will NOT move the scan along
    its scan line, as the next side will share the end
    point with the current side.  Then when the scan has
    both sides with the end point, and at least one side
    is not parallel to the scan line, the scan must
    decide whether set its state to INSIDE or OUTSIDE.

    If the sides of the polygon are directed in clock-
    wise order, then one of the two sides that intersect
    in a common end which is the current scan point will
    be incoming and one will be outgoing.  Let OUT be
    the counterclockwise angle of the outgoing side with
    respect to the positive x-axis, and -IN be the
    counterclockwise angle of the direction reversed in-
    coming side with respect to the positive x-axis.
    Then -IN != OUT (else the polygon would be degener-
    ate), OUT != 0 (else the case where the scan is at
    the low x vertex of a side running along the scan
    line would apply), and IN != 0 (ditto).  Set the
    scan state to INSIDE if and only if -IN > OUT, and
    to OUTSIDE if -IN < OUT.

Problem: Compute the intersection of two simple
polygons.

    Solution: First compute the intersections of polygon
    sides, one side from each polygon, and put these in
    a list.  For each intersection, compute an incoming
    and an outgoing polygon side, which indicate the
    direction of travel when the intersection point is
    used as a vertex in an intersection polygon, and all
    polygons are traversed clockwise.

    This is easy if all intersections are at the mid-
    points of sides.  Assume this for the moment.

    For each intersection compute its distance DI from
    the origin of its incoming side and its distance
    DO from the origin of its outgoing side.

    Then run the following algorithm to find one inter-
    section polygon and remove from the list of inter-
    sections those used as vertices in that polygon.
    Repeat this algorithm until the list of intersec-
    tions is empty.

    Pick a point from the list of intersections, and
    call it the anchor vertex of a new intersection
    polygon.  Make the outgoing side of this intersect-
    tion the current side, and the DO value of the
    intersection the current DO value.  Then iteratively
    compute a next intersection polygon vertex as
    follows.  Find all intersections whose incoming
    sides are the current side, and whose corresponding
    DI values are greater than the current DO value.
    If there is more than one, choose the one with the
    smallest DI value; it becomes the next vertex of the
    intersection polygon, its outgoing side the new
    current side, and its DO value the new current DO
    value; also this intersection point is removed from
    the list of intersection points.  If there are no
    intersection points found meeting our criteria, take
    the target of the current side as the next vertex
    of the intersection polygon, take the side after the
    current side in the same polygon as the new current
    side, and take 0 as the new current DO value.  Keep
    finding intersection polygon vertices in this way
    until the anchor is removed from the list of inter-
    section points.

    The situation is more difficult when a vertex from
    one polygon can be on the boundary of the other
    polygon.  In this case, we compute intersections by
    considering all pairs of sides, IN and OUT, one from
    each polygon, and ask whether there is an intersec-
    tion with IN as the incoming side and OUT as the
    outgoing side.  There are several cases.

    If IN and OUT do not intersect at all, there is no
    intersection.  If they intersect in their interiors,
    there is an intersection.  If they are parallel,
    the only intersection that needs to be considered is
    the target of IN, and this might be an intersection
    if it is on OUT and not the target of OUT.  Other-
    wise the intersection is a single point that is the
    end of one or both sides.  It must be the target of
    IN or the origin of OUT or both to be a possible
    intersection.

    Possible intersections are screened as follows.  If
    the possible intersection is the target of IN, the
    continuation IN' of IN is the side after IN in the
    clockwise list of sides of IN's polygon.  If the
    possible intersection is not the target of IN, then
    IN' = IN.  Similarly the continuation of OUT, OUT',
    is the side before OUT in the clockwise list of the
    sides of OUT's polygon, if the possible intersection
    is the origin of OUT.  Otherwise OUT' = OUT.

    Now let IN, IN', OUT, OUT' denote the counter clock-
    wise angles of the directed sides of the same names
    measured from OUT, so OUT = 0.  Let -IN and -OUT'
    be the angles of the sides IN and OUT' with opposite
    direction.  Normalize all these angles to be in the
    range [0,2pi).  Then -IN != IN' and -OUT' != OUT,
    else the polygons would be degenerate.  Also by
    definition OUT = 0.

    A possible intersection point will be an actual
    intersection point with incoming side IN and out-
    going side OUT if and only if -IN >= -OUT' and
    -IN > IN'.

    There is a difficulty in determining when -IN =
    OUT'.  If the coordinates are all bounded by B and
    are all exact multiples of Q, let A = Q / B.
    Then if atan2 is used to measure angles, two
    unequal angles will differ by more than A**2/10,
    and hopefully the accuracy of computation is such
    that two equal angles will differ by much less
    than that value.

    There is a difficulty in removing intersection
    points properly from the intersection list.  If
    -IN = -OUT' then it is unknown whether the intersec-
    tion polygon using this point as a vertex will use
    part of IN or OUT' as a side.  If the intersection
    polygon passes from IN to OUT at the vertex, the
    intersection point will be consumed and removed from
    the list of intersection points.  If the intersec-
    tion polygon passes from OUT' to OUT at the vertex,
    it will not use the intersection point, and will
    merely be continuing along the boundary of one of
    the original polygons, but the intersection point
    must be removed somehow in this case too.  So if -IN
    = -OUT', then the vertices of the polygons that
    equal the intersection point should reference the
    intersection point and cause that to be removed from
    the intersection list whenever such a vertex is
    output to an intersection polygon.

    Note that if -IN != -OUT' and IN' != OUT then it is
    possible the vertex will generate two intersection
    points on the intersection list, and both will be
    used as two different vertices of different inter-
    section polygons.  So we don't want vertices to
    reference intersection points in this case, just
    because one vertex would have to reference two such
    points, and its not necessary to have the vertex
    reference any points.

    Now there is a secondary difficulty.  If both
    -IN = -OUT' and IN' = OUT as angles then the vertex
    will be recognized as an intersection point twice,
    but only removed once.  We can escape this problem
    by NOT accepting the vertex as an intersection point
    if -IN = -OUT' AND IN' = OUT as angles, since when
    traversing an intersection polygon it is unnecessary
    to switch polygons at such a vertex.

    Now there is a tertiary difficulty.  If the two
    polygons being intersected are identical, no inter-
    sections will be put on the intersection list.  We
    can handle this by setting a boolean flag if any
    segment intersections are found, including those
    not put on the intersection list, and if this flag
    is true but the intersection list is initially
    computed as being empty, then we know that the two
    polygons are identical.

Problem: Rotate 2D coordinates.

    Solution: A clockwise rotation R(theta) of a vector
    v=(vx,vy) by an angle theta is

		   |   cos(theta)   sin(theta) | | vx |
      R(theta).v = |                           | |    |
		   | - sin(theta)   cos(theta) | | vy |

		  |   vx cos(theta) + vy sin(theta) |
		= |                                 |
		  | - vx sin(theta) + vy cos(theta) |

    Most particularly, if theta = 90 degrees, then

		    
			    |  0   1 |
	    R(90 degrees) = |        |
			    | -1   0 |


	    R(90 degrees).v =  (vy,-vx)

Problem: Rotate in 3D coordinates.

    Solution: The following is the rotation Rz(theta)
    around the z-axis of a vector v=(vx,vy,vz) by an
    angle theta:

    Rz(theta).v =

           |   cos(theta)   sin(theta)  0 | | vx |
           |                              | |    |
           | - sin(theta)   cos(theta)  0 | | vy | =
           |                              | |    |
	   |   0            0           1 | | vz |

	   |   vx cos(theta) + vy sin(theta) |
	   |                                 |
	   | - vx sin(theta) + vy cos(theta) |
	   |                                 |
	   |               vz                |

    Most particularly, if theta = 90 degrees, then

		
	                 |  0   1  0 |
	                 |           |
	Rz(90 degrees) = | -1   0  0 |
	                 |           |
	                 |  0   0  1 |
	

        Rz(90 degrees).v =  (vy,-vx,vz)

    We can see from this last that the signs of the
    sin(theta) elements of the rotation matrix have been
    chosen so that if the x-axis goes toward your right,
    the z-axis goes up, and the y-axis goes away from
    you, then a rotation with theta > 0 is clockwise
    looking down on the xy-plane.

    One can also write matrices easily for rotations
    about the x-axis or y-axis.  The only issue is
    choosing the signs of the sin(theta) components.
    There are two choices, as the two sin(theta) com-
    ponents always have opposite signs.

Definition: A robot arm is a set of line segments con-
nected end to end, and at the origin of the first seg-
ment, the end of the last segment, and each connecting
point in between, a servo that can rotate everything
beyond the servo.  The servo at the last endpoint can
rotate a hand at the end of the last segment.  The hand
is conceptually an orthonormal basis, representable by
an matrix whose columns are the orthonormal vectors.
The line endpoints are conceptually just points.

The arm has a home position; e.g., all segments vertical
and the hand aligned with the coordinate system (repre-
sented by the unit matrix).  In this home position, each
servo is defined by the direction it can rotate.  In 2D
a servo can rotate clockwise or counterclockwise.  In 3D
the servo can rotate around any of the x, y, or z axes.

Problem: Compute the locations of the endpoints and
orientation of the hand of a robot arm given the segment
lengths and servo settings.

    Solution: The trick is to build the robot from the
    hand end up.  Assume the initial position of the
    robot is vertical with hand aligned with the
    coordinate axes.

    If the robot has no line segments and no servos,
    it has only an end point with a hand, and the hand
    is always oriented along the coordinate axes.  Thus
    the end point is the origin and the hand orientation
    is the unit matrix.

    If we add a servo that has a rotation matrix to the
    origin of the robot, all end points in the robot are
    rotated by the servo matrix, and the hand orienta-
    tion is rotated by multiplying by that matrix.

    If we add a line segment to beginning of the robot,
    all end points in the robot are translated vertical-
    ly by the length of the line segment, and the hand
    orientation does not change.

    By repeatedly adding servos and line segments we
    can get to the final robot arm state.


File:		geometry_exercises
Author:		Bob Walton <walton@deas.harvard.edu>
Date:		See top of file.

The authors have placed this file in the public domain;
they make no warranty and accept no liability for this
file.

RCS Info (may not be true date or author):

    $Author: hc3 $
    $Date: 2005/08/08 10:06:59 $
    $RCSfile: geometry_exercises,v $
    $Revision: 1.17 $
