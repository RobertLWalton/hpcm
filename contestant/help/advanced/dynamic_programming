Dynamic Programming         Thu Sep 28 19:42:22 EDT 2006
Problem Help

A dynamic programming algorithm is an algorithm with two
characteristics:

A.  A problem P is parameterized in such a way that the
    parametric set of subproblems can be solved recur-
    sively.  For example, the original problem P might
    be parameterized as P(i,M) for some integers 0 <= i
    < N, 0 <= M <= N.  And each problem P(i,m) for 0 <=
    i < N, 0 < m <= M might be solvable fairly quickly
    (say in time proportional to N) from the solutions
    to all the problems P(i,m-1) for 0 <= i < N,  while 
    the problems P(i,0) are readily solvable.

    An example is the problem of finding the length of
    the shortest path from node 0 to node N-1 in an un-
    directed graph with nodes 0, 1, ..., N-1 and edges
    each of which have some length > 0.  Then let P(i,m)
    be the problem of finding the length of the shortest
    path from node 0 to node i that has no more than m
    edges.  Treat two nodes that are NOT connected as if
    they were connected by an edge whose length was in-
    finity (or some number much larger than any possible
    shortest path).  Then P(0,0) == 0 and P(i,0) = in-
    finity for 0 < i < N.  And for m > 0, P(i,m) is the
    minimum of P(k,m-1)+edge_length(k,i) for all nodes
    0 <= k < N.

    Note that if the length of every present edge is 1,
    this problem is just the breadth first search
    problem with N-1 as the only goal node.  It can be
    modified to have a set of goal nodes, and is easier
    to program than breadth first search.  But dynamic
    programming does not generally work as well was
    breadth first search if the nodes cannot be organ-
    ized into a simple array.

B.  The solution to one of the parameterized problems
    (e.g. P(i,m)) is typically used very many times in
    computing the solution to the final problem recur-
    sively, so it is important to remember this solution
    as a table entry and not recompute it every time it
    is needed.

    Indeed, in our example P(k,m-1) is used to compute
    P(i,m) for every i, therefore it is used N times.


The word `programming' in `dynamic programming' refers
to describing the table of subproblem solutions and
the order in which the table will be computed.

Dynamic programming can also be used to compute an
actual shortest path, and not just the length of such a
path.  There are two ways of doing this:

C. For each P(i,m) record in P_previous(i,m) the last
   node j that is just before i on some shortest path
   from node 0 to node i.  This can be computed recur-
   sively when computing P(i,m):

	when setting P(i,m) = P(k,m-1)
	                    + edge_length(k,i)
	     also set P_previous(i,m) = k

D. After computing P(i,m) for all i and m, backtrack
   to build an end segment of the path as follows:

   	initially the end segment is just the node N-1
	while 0 is not the first node in the end
	      segment:
	    let i be the first node in the end segment
	    find a k such that
	    	P(i,m) = P(k,m-1) + edge_length(k,i)
	        and add k to the beginning of the end
		segment

The first step in solving any dynamic programming
problem is to parameterize the problem.  But notice
that in our example, the parameter m is not even hinted
at by the original problem statement, which is just to
find the distance between 0 and N-1.  We say that m is a
`hidden parameter'.  The essence of solving a dynamic
programming problem is to find the hidden parameter
(or parameters) that are needed to make a fast recursive
algorithm.


File:		dynamic_programming
Author:		Bob Walton <walton@deas.harvard.edu>
Date:		See top of file.

The authors have placed this file in the public domain;
they make no warranty and accept no liability for this
file.

RCS Info (may not be true date or author):

    $Author: walton $
    $Date: 2006/09/28 23:44:27 $
    $RCSfile: dynamic_programming,v $
    $Revision: 1.9 $
