Email UNIX Tools Help	    Wed Oct  5 07:55:52 EDT 2005

Before you read this file, read the `help/email_contest'
file up to the section in that file entitled `Getting
Started on a Non-UNIX System'.

Getting Started in a UNIX System
------- ------- -- - ---- ------

First make a `home directory' for the contest you wish
to enter.  You can enter many contests, and should have
a separate home directory for each.  In this home dir-
ectory place a file named `HPCM_ADDRESS' that contains
the email address of the contest (more specifically,
of the autojudge for the contest).  Thus if the contest
email address is `fee<fi@fo.fum>', execute in the
contest home directory:

	echo 'fee<fi@fo.fum>' >HPCM_ADDRESS

From now on work in this contest home directory.

Note that it is a bad idea to use your UNIX home direc-
tory `~' as a contest home directory.  Each contest you
enter should have its own unique home directory.

You will be running various HPCM programs written in the
UNIX Bourne shell (sh) language.  Some versions of sh do
not support the `-r' option to the `read' command, the
`-e' option to the `test' command, or the use of back-
slash as a non-interpreted output character by the
`echo' command.  If `/bin/sh' has any of these problems,
you have to choose one of two fixes.  If your system has
a GNU bash shell, be sure this is available using your
your PATH under the name `bash'.  Otherwise, if your
system has a TCL shell, be sure this is available using
your PATH under the name `tclsh'.  If our system has
neither, get either from:

    www.gun.org/software/bash/bash.html   for bash
    www.scriptics.com			  for tclsh

Next, send email to the contest email address with the
subject `get help' and an empty message body.  The
reply will contain many files (including the file you
are now reading).

Copy this reply into the file named help.email in your
contest home directory.  Manually extract either of the
files help/sh/hpcm_extract or help/tcl/hpcm_extract from
this help.email file into your contest home directory as
the hpcm_extract file.  Choose sh or tcl according to
whether you have bash or another adequate Bourne shell,
or you have chosen instead to use tclsh.  The files in
help.email are separated by lines that match the regular
expression `^---<>', that is, that begin with the char-
acters `---<>'.  Using this fact you can fairly easily
extract the correct hpcm_extract file with an editor.

Next execute the following UNIX commands in your contest
home directory:

	chmod 700 hpcm_extract
	./hpcm_extract < help.email
	chmod 700 help/sh/* help/tcl/*

This should extract all the files into the `help' subdi-
rectory and make the files in `help/sh' and `help/tcl'
executable.  The hpcm_extract file, when it executes,
will log its actions to the standard output.

At this point you can remove the files help.email and
hpcm_extract from the contest home directory.  There
will be other copies of hpcm_extract in the `help/sh'
and `help/tcl' subdirectories.

Next add the `help/sh' subdirectory to your PATH so you
can execute the programs in this directory.  Assuming
your contest home directory is named `~/hpcm/practice',
and assuming you use the `csh' shell, add

	set path=(~/hpcm/practice/help/sh $path)

in your `~/.cshrc' file.  If instead you use the Bourne
shell, add

	PATH=$HOME/hpcm/practice/help/sh:$PATH

in your `~/.profile' file.

Next, if you chose to use tclsh, add `help/tcl' to your
PATH just as you added `help/sh'.  Be sure `help/tcl'
is BEFORE `help/sh' in the path.

In any case, after editing the relevant file, log out
and log back in again, and then check for errors by
typing the UNIX command:

	hpcm_get -doc | more

This should output the documentation for the hpcm_get
program.  You can output the documentation of the other
programs in `help/sh' or `help/tcl' by executing them
with just the `-doc' option, if you wish, but this
should not be necessary.  If you chose to use tclsh,
the command `which hpcm_get' should return the name of
the hpcm_get file in the `help/tcl' subdirectory.

Lastly, to automatically extract files from email
replies to requests generated by hpcm_get, add a copy
of `~/hpcm/help/sh/procmailrc' to your `~/.procmailrc'
file, and edit the copy according to the instructions
in what you copied.  This is all you need to do if your
UNIX system uses the procmail program to deliver mail
(as does RedHat Linux).  If your system delivers mail
using a different mailer (as does SUN UNIX), you may
have to put the following line in your `~/.forward'
file:

    "| exec /usr/bin/procmail"

to cause your `~/.procmailrc' file to be used (include
the "'s in the `~/.forward' file).  Here `/usr/bin/
procmail' should be identical to the output of the UNIX
command `which procmail'.

If you cannot arrange for automatic extraction of files
gotten by hpcm_get, you will have to manually input each
reply containing files to the `hpcm_extract' UNIX
command.  E.g., copy a reply into a file `foo' and
execute the command:
				hpcm_extract < foo

within the contest home directory.

To add more contests later, you merely create a contest
home directory for each contest, and a HPCM_ADDRESS
file within that directory.  You do NOT have to repeat
any of the other actions described above.

Programs like hpcm_extract, hpcm_get, and hpcm_submit
work by searching the current directory and its ances-
tors for a readable HPCM_ADDRESS file, and using the
first directory they find as the contest home directory.
Thus if hpcm_submit is executed in the `problems/ppp'
subdirectory of the contest home directory, it will
identify `../..' as the contest home directory.

If you want more up to date versions of the files ob-
tained by `get help' or `get demos', use the command

	hpcm_get -force
	
to repeat these messages.  Then read the output from
hpcm_extract's processing of the reply.  This output
will tell you which files have changed and therefore
been updated.  You then delete your local versions of
these changed files and execute `hpcm_get -force' one
more time to get the updated versions of these files.

If you get an updated version of any file in the
`help/sh' or `help/tcl' subdirectories, re-execute:

	chmod 700 help/sh/* help/tcl/*

Commands that Do NOT Work
-------- ---- -- --- ----

The following commands do NOT work for an email contest.

    print, print2,	Use your favorite file print
    fprint, printer	program instead.

    scoreboard		See the scoreboard URL instead.

    help		Instead you can print the email
		        reply to `get help' or files
			extracted therefrom.


Testing the Demo in a UNIX System
------- --- ---- -- - ---- ------

The UNIX command `hpcm_get', executed in the contest
home directory, will get all the demonstration files
into the `demos' subdirectory of the contest home di-
rectory.  If you go to the `/demos/count' subdirectory,
you will find a demonstration problem complete with
solutions in all the supported programming languages.
The README file in this directory will tell you how to
install any of these solutions and practice running it
and submitting it.


Working Problems in a UNIX System
------- -------- -- - ---- ------

You can find out what problems are available by looking
at the contest file `help/problems'.  Suppose you decide
to attempt a problem named `ppp' in the C++ language.
Then within the contest home directory execute the UNIX
command `hpcm_get problems/ppp' which will send email to
the autojudge to get that problem.  After files are
extracted from the reply, the problem will be in the
`problems/ppp' subdirectory of the contest home direc-
tory.  A `ppp.txt', `ppp.html', `ppp.ps' (postscript),
or similar file in that directory will describe the
problem.  The `Makefile' in that directory will permit
you to compile, run, and submit the problem, and will
contain the resource limits applied to the problem
during judging.

For example, to write a solution to the problem in C++,
you need to write the file `problems/ppp/ppp.cc'.
See `help/solving' for more details.




File:		email_unix_tools
Author:		Bob Walton <walton@deas.harvard.edu>
Date:		See top of file.

The authors have placed this file in the public domain;
they make no warranty and accept no liability for this
file.

RCS Info (may not be true date or author):

    $Author: hc3 $
    $Date: 2005/10/05 11:51:16 $
    $RCSfile: email_unix_tools,v $
    $Revision: 1.17 $
