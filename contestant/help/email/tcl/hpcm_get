#!/bin/sh
#
# Get demos, problems, etc for the contestant.
#
# File:		hpcm_get
# Author:	Bob Walton <walton@deas.harvard.edu>
# Date:		Sat Mar  9 17:02:29 EST 2002
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: hc3 $
#   $Date: 2002/03/09 22:03:02 $
#   $RCSfile: hpcm_get,v $
#   $Revision: 1.3 $
#
# The next line starts tclsh \
exec tclsh "$0" "$@"

set document "
hpcm_get \[-force\] \[name ...\]

    When used without a name, gets all help and demos
    files.

    When used with a name, gets the named files or
    directories.  Getting a directory recursively gets
    the contents of that directory.

    Everything gotten is installed in the `contest
    home' directory.  This directory is found by sear-
    ching the current directory and its ancestors for
    the first directory to contain a readable HPCM_
    ADDRESS file.

    So for example,
    			hpcm_get demos

    gets files named `demos/...' and puts them in the
    directory ../../demos if ../.. is the contest home
    directory because it contains a readable HPCM_
    ADDRESS file while . and .. do not.

    Without the -force option, hpcm_get refuses to
    get things that seem to be already gotten.  With
    -force, it will get them anyway, which is useful
    if the version gotten is more recent or more
    complete than what was previously gotten.

    Files are gotten by sending email requests and get-
    ting email replies.  If the hpcm_extract program is
    called automatically for the replies (say because
    it is invoked by .procmailrc), the gotten files are
    automatically installed within the contest home
    directory.  Otherwise the files in the reply mail
    must be manually extracted, and hpcm_get assumes
    these files will be extracted into the contest home
    directory."

# Check for and consume -* options.
#
set force no
if { [regexp {^-force} [lindex $argv 0]] } {
    set force yes
    set argv [lrange $argv 1 end]
} elseif { [regexp {^-} [lindex $argv 0]] } {
    puts $document
    exit 1
}

# Look for HPCM_ADDRESS file to find home.
#
if { [file readable HPCM_ADDRESS] } {
    set home .
} elseif { [file readable ../HPCM_ADDRESS] } {
    set home ..
} elseif { [file readable ../../HPCM_ADDRESS] } {
    set home ../..
} elseif { [file readable ../../../HPCM_ADDRESS] } {
    set home ../../..
} else {
    puts "ERROR: Cannot find HPCM_ADDRESS file."
    exit 1
}

# Loop through the name arguments, or use `help demos'
# as names if there are no name arguments.
#
if { [llength $argv] == 0 } {
    set argv {help demos}
}

foreach name $argv {

    if { [regexp {^help(|/.*)$} $name] } {
	set dir help
    } elseif { [regexp {^demos(|/.*)$} $name] } {
	set dir demos
    } elseif { [regexp {^problems(|/.*)$} $name] } {
	set dir problems
    } else {
	puts "IGNORING `$name';"
	puts "    first component of name is\
	      not `help', `demos', or `problems'."
	continue
    }


    # Get $name by email if it has not already been
    # gotten or if -force option given.
    #
    if { [file exists "$home/$name"] \
         && $force == "no" } {
    	puts "IGNORING `$name';"
	puts "    it has been gotten already;"
    	puts "    use -force to get it again."
    } else {
	puts "Sending email to get `$name'."
        exec hpcm_sendmail << "Subject: get $name\n" \
	     		   >@ stdout 2>@ stderr
	exec sleep 2
    }
}

exit 0
