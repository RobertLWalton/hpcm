Untimed Practice Help	    Sat Oct 19 03:13:20 EDT 2013


Introduction
------------

An untimed practice is a facility for solving program-
ming problems.  The problems may be similar to those
found in programming contests, hence the facility may
be used to practice for such contests.  Or the problems
may be designed to further the solver's practical know-
lege of algorithms or programming methods, according to
the general rule that to understand something well you
must write about it, and not simply read about it.

Sometimes untimed practice facilities give prizes to
students who solve a certain number of problems, and
such facilities are called `prize contests'.  These
typically have extra rules concerning how much help
you can get solving problems.


Your Account
---- -------

You will be given an account name and a password, and
the practice will have a web page which points at help
files.  You can look at the `terminals' help file to
get advice on logging in.

Here are some help files that may be of use:

    mail
        Gives information about how the read email in
	the account.

    terminals
        Gives information about making extra terminal
	windows.

    print
        Gives information about printing files.  You
	may set the account up to email postscript
	files to you or in some cases to print directly
	to your own printer.

    c
    c++
    java
    commonlisp
	For each programming language you might use (C,
	C++, JAVA, COMMONLISP), there is a help file
	that gives information about how to structure
	your program and do input/output in the contest
	environment.

In your account a non-algorithmic help file xxx can be
displayed by the `help xxx' command, and the `help'
command gives an index of available non-algorithm help
files.  Algorithmic help files are pdf files and must
be displayed or printed from the web.

As soon as you are logged in, you should get and test
the demo problems as described below.


What Problems?
--------------

Problems are solved in problem directories.  When you
are first logged in, these do not yet exist.  You have
to get them by executing

	hpcm_get

There are two kinds of problems: demo problems and
`contest' problems (i.e., problems you are to solve).
Solutions to demo problems are given to you if you want
to look at them or use them to try out the facility
tools.

A directory for a demo problem named `pppp' is named
`~/demos/pppp'.  Problem directories are where you write
your solutions, and they each contain an important file
named `Makefile' that defines operations you will need
in order to solve and submit the problem.  Solutions to
the demo problems are put by `hpcm_get' into the
`~/demos/solutions' directory.  You can display an index
of demo problems with the `help demos' command.

You should test the contest tools on the demo problems.
You can copy solutions from `demos/solutions' to demo
problem directories and try submitting them (see below
for how to do this).

A contest problem with name `pppp' has a directory named
`~/problems/pppp'.  You can display an index of contest
problems with `help problems'.


Asking Questions
----------------

The best way to ask a question is to send it to the
judge.  While submission judging is done exclusively by
an autojudge, the autojudge is monitored by a human
`judge', who will respond to a email query sent in the
following somewhat weird way.

First, edit your email query into a file of your own
choosing in you practice account.  If your first line
has the form

	Subject: ....

and the next line is completely empty (no spaces),
then the first line will be the subject line of the
message.  Be sure the subject does not begin with the
words `submit' or `get'.

Then execute

	hpcm_sendmail < filename

to send the file as email to the judge.  You will
get a reply as email in your facility account.


Working on a Problem
--------------------

For a problem named `pppp' you should write a file named
`pppp.c', `pppp.cc', `pppp.java', or `pppp.lsp' in your
`~/problems/pppp' directory.  The suffix of the file you
write determines the programming language you are using:

	.c 	for C		   see `help c'
	.cc	for C++		   see `help c++'
	.java	for JAVA	   see `help java'
	.lsp	for COMMONLISP	   see `help commonlisp'

You must write only ONE of these files; you CANNOT have
a solution in two different languages at once.  For each
language there is a language specific help file detail-
ing how to write solutions in that language.

After you write your program, execute the `make' command
in the problem directory.  This will compile your pro-
gram, create a file named `pppp.in', run your program
with `pppp.in' as input and `pppp.out' as output, and
display `pppp.out'.  You can test this by copying a
solution from `~/demos/solutions' into some demonstra-
tion problem directory `~/demos/pppp' and running `make'
and then `make test' in that directory.  Initially
`pppp.in' is a copy of `sample.in' in the problem direc-
tory, and if your program is correct, the `pppp.out'
produced should be essentially the same as the file
`sample.test' in the problem directory.

The `make test' command will make a file `pppp.test'
that is a copy of `sample.test', and then display the
difference between `pppp.test' and `pppp.out'. You can
then edit additional test data into `pppp.in' and run
`make', and after verifying the output you can copy
`pppp.out' to `pppp.test', so that whenever you change
your program you can use `make test' to check that it
has not changed previously correct results.  Also,
when you have an incorrect submission, the judge will
return to you the input and output of the judge's first
failed test case.  Add these respectively to `pppp.in'
and `pppp.test' and use `make test' to test.


Make Commands
---- --------

The full set of `make' commands you can execute in a
problem directory is:

    make
    	Same as `make pppp.out' (see below).

    make pppp
    	Makes the binary program file `pppp' by running
	gcc on pppp.c, or g++ on pppp.cc, or javac on
	pppp.java, etc.  Does nothing if `pppp' is more
	up to date than pppp.c, pppp.cc, etc.

	In addition to making `pppp', other files may be
	made for some languages, e.g., pppp.class for
	JAVA.

    make pppp.in
	If the file pppp.in does NOT already exist and
	the file sample.in does exist, this copies
	sample.in to pppp.in and makes the copy writable
	(editable) so you can add to pppp.in.  If
	pppp.in already exists this does nothing (even
	if sample.in is more recent than pppp.in).

	sample.in is the `Sample Input' from the problem
	description.

    make pppp.out
	Makes `pppp' and `pppp.in' as above and then
	runs pppp with standard input coming from the
	file pppp.in.  Puts the standard output in the
	file pppp.out, and also copies that to the
	screen.  Also outputs any standard error output
	to the screen.  Does nothing, however, if
	pppp.out is more recent than both pppp.in and
	pppp.

    make pppp.debug
	Ditto but runs `pppp debug' instead of `pppp'
	and puts the standard output in the file
	`pppp.debug' instead of `pppp.out'.  You should
	write your program to output debugging
	information to the standard output if the
	program is given any arguments.

    make debug	Same as `make pppp.debug'.

    make submit
	Makes `pppp.out' just to be sure that nothing
	crashes, and then e-mails pppp.c, pppp.cc,
	pppp.java, or pppp.lsp to the judges.  Note the
	pppp.in file MUST exist to submit (in order to
	make pppp.out), but pppp.in can be the minimum
	needed to keep your program from crashing.

    make pppp.test
	If the file pppp.test does NOT already exist and
	the file sample.test does exist, this copies
	sample.test to pppp.test and makes the copy
	writable (editable) so you can add to pppp.test.
	If pppp.test already exists this does nothing
	(even if sample.test is more recent than
	pppp.test).

	sample.test is the `Sample Output' from the
	problem description.

    make test
    	Makes pppp.out and pppp.test as above and then
	displays their differences using the command
	`diff -u pppp.out pppp.test'.  If the files are
	copies of sample.in and sample.test, they should
	be essentially the same, but need not be exactly
	the same: see the `scores' help file.

    make clean
        Removes `pppp', pppp.out, pppp.debug,
	pppp.class, etc.

The `make' UNIX commands work because of the way the
`Makefile' file in the problem directory is written.
The `Makefile' file contains some oddities resulting
from the fact that judges, who use the same `Makefile'
as contestants, run solutions in a sandbox account that
has permission problems accessing judge's files. 


Resource Limits
-------- ------

Some problems have resource limits that require their
solutions to be time and space efficient.

If you look at the `Makefile' in the problem directory
you will see that it contains memory and time resource
limits which constrain your problem.  Memory limits
are typically a few tens of megabytes and time limits
are typically 10 to 30 seconds.


Scoring
-------

Solutions are submitted to an autojudge, which runs test
cases against the solutions, grades the solutions cor-
rect or not, and returns an email to the submitter con-
taining the grade.  If incorrect, the email includes the
input and output of the judge's first failed test case,
and a little bit of other information that can be inter-
preted by using `help scores'.  For an incorrect submis-
sion the submitter loses 5% of the submitter's remaining
score on the problem.  The maximum score, obtainable if
the submitter's first submission for the problem is cor-
rect, varies with the difficulty of the problem, but is
typically 100, 200, or 300.  The autojudge is monitored
by a human judge and maintains a complete audit trail of
its actions in case it misbehaves.

For incorrect submissions, the judge's return email will
contain the judge's input and output for the first
failed test case.  You should add these to your pppp.in
and pppp.test files and continue debugging your program.
For a correct solution the email will contain the
judge's solution for you to look at, either in the
same programming language you used, or in the language
most related to that for which the judge has a solution.

The `scoreboard' command displays the scoreboard which
contains an entry for each account and problem.  The
entry is `.....' if the account has not submitted any
solution for the problem, `.../N' if the account has
submitted N incorrect solutions, and `SSS/N' if the
account has submitted a correct solution and N previous
incorrect solutions, where SSS is the problem score, and
is equal to `MMM * 0.95^N' rounded to the nearest
integer, where MMM is the maximum possible score for the
problem.

Account scores are reported in either the form TTT/P or
the form P/TTT, where TTT is the sum of solved problem
scores and P is the number of problems solved by the
account (note P is always a much smaller number than
TTT unless both are 0).  If the score is reported as
P/TTT, accounts are ranked so those with the highest P,
number of problems solved, are best, and among those
with equal P, those with highest TTT are best.  This
is usually the case for prize contests and for practices
that are derived from ACM contests.  If the score is
reported as TTT/P, accounts are ranked so those with
the highest TTT are best, and among those with equal
TTT, those with highest P are best.  This is usually
the case for practices derived from contests where
untimed scoring was done with problems with different
maximum scores (e.g., some problems with maximum score
of 100 and some with 200).

If the scoreboard is too long for its display window,
you can scroll down and up with the down and up arrow
keys.  If the scoreboard changes the display will be
updated and will go back to the top of the scoreboard.


Prizes
------

Some untimed contests are prize contests.  This section
applies to those contests if they use the `typical'
prize, which consists of computer related books order-
able from the web whose total value including shipping
does not exceed a given amount.

If you win such a prize, you will be contacted via email
by the prize granter, who will ask you to find on the
web the books you want to order.  The granter will then
order the books for you and have them sent directly to
you.  No money will be sent, even though the book and
shipping contest may be less than the prize amount.

Though the prizes are small, you may be surprised by
the number of high quality computer science books
available cheaply as used books at sites like

	www.abebooks.com
	www.amazon.com

If you want advice about which books are good for a
particular computer science topic, the granter will
either give such advice or solicit advice from others
knowledgeable in the topic.


File:		untimed_practice
Author:		Bob Walton <walton@seas.harvard.edu>
Date:		See top of file.

The authors have placed this file in the public domain;
they make no warranty and accept no liability for this
file.

RCS Info (may not be true date or author):

    $Author: walton $
    $Date: 2013/10/19 07:13:43 $
    $RCSfile: untimed_practice,v $
    $Revision: 1.11 $
