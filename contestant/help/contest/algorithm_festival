Algorithm Festival Help	    Tue Feb 19 05:19:53 EST 2013


General Contest Rules
------- ------- -----

An algorithm festival is a low-key not too competative
programming contest in which teams of 3 students try to
solve simple somewhat practical programming problems.
Teams may enter in either of two catagories, novice or
experienced, according to whether team members have
previously participated in programming contests.

Teams get accounts days before the contest and can use
their accounts to practice on demonstration problems.
On the day of the contest teams congregate at one of
several host sites, and at 10am the phase I problems
are handed out and work begins.  From noon till 1pm
all programming is suspended to have lunch, during which
teams may talk with other teams anyone else about the
problems, as long as they talk in person and use no
writing or code printouts.  At 1pm the phase II problems
are handed out and teams resume work on either phase I
or phase II problems.  The results as of 4pm are used
to award prizes - and teams may wish to quit then, but
in fact teams can continue to work on the problems using
their accounts for may weeks afterwards, if they wish.

Solutions are submitted to an autojudge, which runs test
cases against the solutions, and grades the solutions
correct or not.  If not, the autojudge returns to the
submitter the input and output of the first failed test
case, and the submitter loses 3% of the submitter's
remaining score on the problem.  The maximum score,
obtainable if the submitters first submission for the
problem is correct, varies with the difficulty of the
problem, but is usually between 100 and 300.  The auto-
judge is monitored by human judges and maintains a
complete audit trail of its actions in case it mis-
behaves.

Only one terminal may be logged into a team account
during the festival, in order to encourage team members
to program cooperatively.  Teams may consult the web
using other terminals or their one terminal however.
A printer will be available.

Teams are on their honor not to log more than one
terminal into their account during the contest, not to
read other team printouts that appear at the common
printer, and not to communicate with anyone except the
official host site advisors or the judges about the
contest, except while at lunch.  Teams are on their
honor not to show or read code during lunch.


What Problems?
--------------

Problems are solved in problem directories.  When you
are first logged in, these do not yet exists.  You have
to get them by executing

	hpcm_get

Before the contest starts this will just get problem
directories for demo problems.  The directory for a demo
problem named `pppp' is named `~/demos/pppp'.  Problem
directories are where you write your solutions, and they
each contain an important file named `Makefile' that
defines operations you will need in order to solve and
submit the problem.  Solutions to the demo problems are
put by `hpcm_get' into the `~/demos/solutions' direc-
tory.  You can display an index of demo problems with
the `help demos' command.

Then after the contest starts you need to execute
`hpcm_get' again, JUST ONCE, to get all the problem dir-
ectories.  A contest problem with name `pppp' has a dir-
ectory named `~/problems/pppp'.  You can display an index
of contest problems with the `help problems' command.


Asking Questions:
----------------

There are advisors at your host site who will answer
questions.  If you are an `experienced' team, answers to
questions about particular problems are restricted to
just pointing at documentation or giving keywords to
google.  If you are an `novice' team, the advisors will
give you as brief an answer as they can while getting
you unstuck from whatever difficulty you are having.

You can use the web or printed matterials to try to
answer your questions.

You can also ask any questions and get any answers
during lunch, but, of course, only on Phase I problems.


Working on a Problem
--------------------

For a problem named `pppp' you should write a file named
`pppp.c', `pppp.cc', `pppp.java', or `pppp.lsp' in your
`~/problems/pppp' directory.  The suffix of the file you
write determines the programming language you are using:

	.c 	for C		   see `help c'
	.cc	for C++		   see `help c++'
	.java	for JAVA	   see `help java'
	.lsp	for COMMONLISP	   see `help commonlisp'

You must write only ONE of these files; you CANNOT have
a solution in two different languages at once.  For each
language there is a language specific help file detail-
ing how to write solutions in that language.

After you write your program, execute the `make' command
in the problem directory.  This will compile your pro-
gram, create a file named `pppp.in', run your program
with `pppp.in' as input and `pppp.out' as output, and
also send the output to our terminal.  You can test this
by copying a solution from `~/demos/solutions' into some
demonstration problem directory `~/demos/pppp' and run-
ning `make' in that directory.  Initially `pppp.in' is
a copy of `sample.in' in the problem directory, and if
your program is correct, the `pppp.out' produced should
be the essentually the same as the file `sample.test in
the problem directory.  You can then edit additional
test data into `pppp.in' do test your program further.


Make Commands
---- --------

The full set of `make' commands you can execute in a
problem directory is:

    make	Same as `make pppp.out' (see below).

    make pppp	Makes the binary program file `pppp' by
                running gcc on pppp.c, or g++ on
		pppp.cc, or javac on pppp.java, etc.
		Does nothing if `pppp' is more up to
		date than pppp.c, pppp.cc, etc.

		In addition to making `pppp', other
		files may be made for some languages,
		e.g., pppp.class for JAVA.

    make pppp.in
		If the file pppp.in does NOT already
		exist and the file sample.in does
		exist, this copies sample.in to pppp.in
		and makes the copy writable (editable)
		so you can add to pppp.in.  If pppp.in
		already exists this does nothing (even
		if sample.in is more recent than
		pppp.in).

		sample.in is provided for more recent
		problems and is the `Sample Input' from
		the problem description.

    make pppp.out
		Makes `pppp' and `pppp.in' as above and
		then runs pppp with standard input com-
		ing from the file pppp.in.  Puts the
		standard output in the file pppp.out,
		and also copies that to the screen.
		Puts any standard error output to the
		screen before the standard output from
		pppp.out.  Does nothing, however, if
		pppp.out is more recent than both
		pppp.in and pppp.

		Note that the sample.test file, if it
		exists, is the `Sample Output' from the
		problem description, and may be compared
		to pppp.out if pppp.in is a copy of the
		sample.in file.  The match can be made
		with the

			diff sample.test pppp.out

		command, but may not need to be exact:
		see the `scores' help file.

    make pppp.debug
    		Ditto but runs `pppp debug' instead of
		`pppp' and puts the standard output in
		the file `pppp.debug' instead of
		`pppp.out'.  You should write your
		program to output debugging information
		to the standard output if the program is
		given any arguments.

    make debug	Same as `make pppp.debug'.

    make submit
		Makes `pppp.out' just to be sure that
		nothing crashes, and then e-mails
		pppp.c, pppp.cc, pppp.java, or pppp.lsp
		to the judges.  Note the pppp.in file
		MUST exist to submit, to make pppp.out,
		but pppp.in can be the minimum needed to
		keep your program from crashing (often
		pppp.in can be empty).

    make clean	Removes `pppp', pppp.out, pppp.debug,
    		pppp.class, etc.

The `make' UNIX commands work because of the way the
`Makefile' file in the problem directory is written.
The `Makefile' file contains some oddities resulting
from the fact that judges, who use the same `Makefile'
as contestants, run solutions in a sandbox account that
has permission problems accessing judge's files.  Any
file, directory, or program that must be accessed from
the sandbox account may need permissions making it
accessible to everyone.


Resource Limits
-------- ------

If you look at the `Makefile' in the problem directory
you will see that it contains memory and time resource
limits which constrain your problem.  Memory limits
are typically a few tens of megabytes and time limits
are typically 10 to 30 seconds.  Harder problems require
care to be sure you stay within these limits.


Scoreboard
----------

The `scoreboard' command displays the scoreboard which
contains an entry for each team and problem.  The entry
is `.....' if the team has not submitted any solution
for the problem, `.../N' if the team has submitted N
incorrect soltions, and `TTT/N' if the team has submit-
ted a correct solution and N incorrect solutions, where
TTT tells the time the team needed to solve the problem.
Each team also has a total score beneath its name, which
has the form M/RRR.  M is the number of problems the
team has solved - more is better - and RRR is the sum in
seconds of the M times the team took to solve these pro-
blems - more is WORSE.  See `help scoreboard' for more
details about problem times.

If the scoreboard is too long for its display window,
you can scroll down and up with the down and up arrow
keys.  If the scoreboard changes the display will be
updated and will go back to the top of the scoreboard.
Teams are named by their accounts, but you can use the
`who_where' command to find which accounts belong to
which teams.

For each problem you submit, the judge returns an email
with the submission score, and for incorrect submissions
this may have a little bit more detail as to the nature
of the failure: see `help scores'.  In fact you get two
emails per submission, one from the autojudge, and one
from a human judge who manually reviews and confirms the
work of the autojudge.


Other Issues
----- ------

The following help commands may be useful for:

    Printing files:			help print

    Making new terminal windows:	help terminals

    Understanding problem scores:	help scores

    Understanding the scoreboard:	help scoreboard

After the contest ends and the results have been saved,
the contest is converted into an untimed practice and
your coach is emailed account names and passwords to use
in accessing this practice.  The work you have done
remains in your account and you can continue by practic-
ing on the problems you failed to solve.  See `help
untimed_practice' for more details.


File:		algorithm_festival
Author:		Bob Walton <walton@seas.harvard.edu>
Date:		See top of file.

The authors have placed this file in the public domain;
they make no warranty and accept no liability for this
file.
