Algorithm Festival Help	    Fri Feb 22 21:34:54 EST 2013


Introduction
------------

An algorithm festival is a low-key not too competative
programming contest in which teams of 3 students try to
simple programming problems that are greatly simplified
versions of real-world problems.  Teams may enter in
either of two catagories, novice or experienced, accord-
ing to their prior experience with programming contests.

Teams get accounts days before the contest and can use
their accounts to practice on demonstration problems.
On the day of the contest teams congregate at one of
several host sites, and at 10am the phase I problems
are handed out and work begins.  From noon till 1pm
all programming is suspended to have lunch, during which
teams may talk with other teams and anyone else about
the problems, as long as they talk in person and do not
access their accounts or reference code printouts.  At
1pm the phase II problems are handed out and teams
resume work on either phase I or phase II problems.  The
results as of 4pm are used to award prizes - and teams
may wish to quit then, but in fact teams can continue to
work on the problems using their accounts for weeks
afterwards, for fun or education, if they wish.

Solutions are submitted to an autojudge, which runs test
cases against the solutions, and grades the solutions
correct or not.  If not, the autojudge returns to the
submitter the input and output of the first failed test
case, and the submitter loses 5% of the submitter's
remaining score on the problem.  The maximum score,
obtainable if the submitter's first submission for the
problem is correct, varies with the difficulty of the
problem, but is typically 100 or 200.  The autojudge is
monitored by human judges and maintains a complete audit
trail of its actions in case it misbehaves.

Only one terminal may be logged into a team account when
the team is working on problems, in order to encourage
team members to program cooperatively.  Teams may
consult the web using other terminals or their one
terminal, however.  A printer will be available.


Honor Rules
----- -----

During the 10am to 4pm contest period teams are on their
honor not to log more than one terminal into their
account, not to read other team printouts that appear at
any common printer, and not to communicate with anyone
except team members and official host site advisors,
except during lunch.  Teams are on their honor not to
access their accounts or code printouts during lunch.


What Problems?
--------------

Problems are solved in problem directories.  When you
are first logged in, these do not yet exist.  You have
to get them by executing

	hpcm_get

Before the contest starts this will just get problem
directories for demo problems.  The directory for a demo
problem named `pppp' is named `~/demos/pppp'.  Problem
directories are where you write your solutions, and they
each contain an important file named `Makefile' that
defines operations you will need in order to solve and
submit the problem.  Solutions to the demo problems are
put by `hpcm_get' into the `~/demos/solutions' direc-
tory.  You can display an index of demo problems with
the `help demos' command.

Then after the contest starts at 10am you need to exe-
cute `hpcm_get' again, JUST ONCE, to get all the problem
directories.  A contest problem with name `pppp' has a
directory named `~/problems/pppp'.  You can display an
index of contest problems with the `help problems'
command.


Asking Questions:
----------------

There are advisors at your host site who will answer
questions.  If you are an `experienced' team, answers to
questions about particular problems are restricted to
just pointing at documentation or giving keywords for
google.  If you are an `novice' team, the advisors will
give you as brief an answer as they can that will get
you unstuck from whatever difficulty you are having.

You can use the web or printed materials to try to
answer your questions.  You can access the web from any
computer, not just the one logged into your account.

You can also ask any questions, get any answers, from
anyone, during lunch, but, of course, only on Phase I
problems, and during lunch you must not access accounts
or reference code printouts.


Working on a Problem
--------------------

For a problem named `pppp' you should write a file named
`pppp.c', `pppp.cc', `pppp.java', or `pppp.lsp' in your
`~/problems/pppp' directory.  The suffix of the file you
write determines the programming language you are using:

	.c 	for C		   see `help c'
	.cc	for C++		   see `help c++'
	.java	for JAVA	   see `help java'
	.lsp	for COMMONLISP	   see `help commonlisp'

You must write only ONE of these files; you CANNOT have
a solution in two different languages at once.  For each
language there is a language specific help file detail-
ing how to write solutions in that language.  For
example, use the `help java' command to how to write
solutions in JAVA.

After you write your program, execute the `make' command
in the problem directory.  This will compile your pro-
gram, create a file named `pppp.in', run your program
with `pppp.in' as input and `pppp.out' as output, and
also send the output to our terminal.  You can test this
by copying a solution from `~/demos/solutions' into some
demonstration problem directory `~/demos/pppp' and run-
ning `make' in that directory.  Initially `pppp.in' is
a copy of `sample.in' in the problem directory, and if
your program is correct, the `pppp.out' produced should
be essentially the same as the file `sample.test' in the
problem directory.  You can then edit additional test
data into `pppp.in' to test your program further.


Make Commands
---- --------

The full set of `make' commands you can execute in a
problem directory is:

    make	Same as `make pppp.out' (see below).

    make pppp	Makes the binary program file `pppp' by
                running gcc on pppp.c, or g++ on
		pppp.cc, or javac on pppp.java, etc.
		Does nothing if `pppp' is more up to
		date than pppp.c, pppp.cc, etc.

		In addition to making `pppp', other
		files may be made for some languages,
		e.g., pppp.class for JAVA.

    make pppp.in
		If the file pppp.in does NOT already
		exist and the file sample.in does
		exist, this copies sample.in to pppp.in
		and makes the copy writable (editable)
		so you can add to pppp.in.  If pppp.in
		already exists this does nothing (even
		if sample.in is more recent than
		pppp.in).

		sample.in is the `Sample Input' from the
		problem description.

    make pppp.out
		Makes `pppp' and `pppp.in' as above and
		then runs pppp with standard input com-
		ing from the file pppp.in.  Puts the
		standard output in the file pppp.out,
		and also copies that to the screen.
		Also outputs any standard error output
		to the screen.  Does nothing, however,
		if pppp.out is more recent than both
		pppp.in and pppp.

		Note that the sample.test file, if it
		exists, is the `Sample Output' from the
		problem description, and may be compared
		to pppp.out if pppp.in is a copy of the
		sample.in file.  The match can be made
		with the

			diff sample.test pppp.out

		command, but may not need to be exact:
		see the `scores' help file.

    make pppp.debug
    		Ditto but runs `pppp debug' instead of
		`pppp' and puts the standard output in
		the file `pppp.debug' instead of
		`pppp.out'.  You should write your
		program to output debugging information
		to the standard output if the program is
		given any arguments.

    make debug	Same as `make pppp.debug'.

    make submit
		Makes `pppp.out' just to be sure that
		nothing crashes, and then e-mails
		pppp.c, pppp.cc, pppp.java, or pppp.lsp
		to the judges.  Note the pppp.in file
		MUST exist to submit (in order to make
		pppp.out), but pppp.in can be the
		minimum needed to keep your program from
		crashing.

    make clean	Removes `pppp', pppp.out, pppp.debug,
    		pppp.class, etc.

The `make' UNIX commands work because of the way the
`Makefile' file in the problem directory is written.
The `Makefile' file contains some oddities resulting
from the fact that judges, who use the same `Makefile'
as contestants, run solutions in a sandbox account that
has permission problems accessing judge's files.  Any
file, directory, or program that must be accessed from
the sandbox account may need permissions making it
accessible to everyone.


Resource Limits
-------- ------

Problems intended for novice teams do not have important
resource limits, but problems intended for experienced
teams often have limits that require solutions to be
time and space efficient.

If you look at the `Makefile' in the problem directory
you will see that it contains memory and time resource
limits which constrain your problem.  Memory limits
are typically a few tens of megabytes and time limits
are typically 10 to 30 seconds.  Harder problems require
care to be sure you stay within these limits.


Scoreboard
----------

The `scoreboard' command displays the scoreboard which
contains an entry for each team and problem.  The entry
is `.....' if the team has not submitted any solution
for the problem, `.../N' if the team has submitted N
incorrect soltions, and `SSS' if the team has submitted
ted a correct solution which was given score SSS.  A
problem has a maximum score MMM, and each incorrect
solution deducts 5% from the current score, so

	SSS = MMM * 0.95^N

Problem maximum scores are typically 100 for problems
intended for novice teams and 200 for problems intended
for experienced teams.

If the scoreboard is too long for its display window,
you can scroll down and up with the down and up arrow
keys.  If the scoreboard changes the display will be
updated and will go back to the top of the scoreboard.

For each problem you submit, the judge returns an email
with the submission score.  For incorrect submissions
this email contains the judge's input and output for the
first failed test case; you should add these to your
ppp.in and pppp.test files and continue debugging your
program.  For a correct solution the email will contain
the judge's solution for you to look at, either in the
same programming language you used, or in the language
most related to that for which the judge has a solution.

There are actually two scoreboards, one for novice teams
and one for experienced teams.  You can display the
scoreboard that is NOT your team's by the commands
`scoreboard novice' and `scoreboard experienced'.


Prizes
------

Prizes are awarded to the members of high placing
teams.  Prizes are awarded separately in the novice
and experienced catagories.  A list of prizes for
a particular contest is given on the contest web
page.

A prize consists of computer related books orderable
from the web whose total value including shipping does
not exceed a given amount.  If you win a prize, you will
be contacted via email by a prize grantor, who will ask
you to find on the web the books you want to order.  The
grantor will then order the books for you and have them
sent directly to you.  No money will be sent, even
though the book and shipping contest may be less than
the prize amount.

Though the prizes are small, you may be surprised by
the number of high quality computer science books
available cheaply as used books at sites like

	www.abebooks.com
	www.amazon.com

If you want advice about which books are good for a
particular computer science topic, the grantor will
either give such advice or solicit advice from others
knowlegable in the topic.


Other Issues
----- ------

The following help commands may be useful for:

    Printing files:			help print

    Making new terminal windows:	help terminals

    Understanding problem scores:	help scores

    Understanding the scoreboard:	help scoreboard


File:		algorithm_festival
Author:		Bob Walton <walton@seas.harvard.edu>
Date:		See top of file.

The authors have placed this file in the public domain;
they make no warranty and accept no liability for this
file.

RCS Info (may not be true date or author):

    $Author: walton $
    $Date: 2013/02/24 06:56:24 $
    $RCSfile: algorithm_festival,v $
    $Revision: 1.5 $
