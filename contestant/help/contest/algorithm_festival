Algorithm Festival Help	    Mon Feb 23 04:22:18 EST 2015


Introduction
------------

An algorithm festival is a low-key not too competitive
programming contest in which teams of 1 to 3 students
try to solve programming problems that are simplified
versions of real-world problems.

Teams get accounts days before the contest and can use
their accounts to practice on demonstration problems.
On the day of the contest teams congregate at one of
several host sites, and at 10am the problems are handed
out and work begins.  From noon till 1pm all programming
is suspended to have lunch, during which teams may talk
with other teams or anyone else about the problems, as
long as they do not access their accounts or reference
code printouts.  The contest resumes and ends at 4pm,
though you can leave early, and your accounts remain
active for many weeks, so you can continue to work on
the problems using your accounts for weeks afterwards,
for fun or for education, as you wish.

Solutions are submitted to an autojudge, which runs test
cases against the solutions, and grades the solutions
correct or not.  If not, the autojudge returns to the
submitter the input and output of the first failed test
case.  The autojudge is loosely monitored by human
judges and maintains a complete audit trail of its
actions in case it misbehaves.

A team may use only two computers during the festival
(this is mostly to limit the internet load on the host
sites).  Either or both may be logged into the account,
and either or both may be used to access the web.
A printer will be available at the host site.


Your Account
---- -------

You will be given an account name and a password, and
the festival will have a web page which points at help
files.  You can look at the `terminals' help file to
get advice on logging in.

Here are some help files that may be of use:

    mail
        Gives information about how the read email in
	the account.

    terminals
        Gives information about making extra terminal
	windows.

    print
        Gives information about printing files.

    c
    c++
    java
    commonlisp
	For each programming language you might use (C,
	C++, JAVA, COMMONLISP), there is a help file
	that gives information about how to structure
	your program and do input/output in the contest
	environment.

In your account a help file xxx can be displayed by the
`help xxx' command, and the `help' command gives an
index of available help files.

There is also a festival-specific algorithmic help wiki
under development at

    problems1.seas.harvard.edu/wiki-hpcm

that may be of help if your difficulty happens to
coincide with one of the topics explained there.

As soon as you are logged in, you should get and test
the demo problems as described below.


What Problems?
--------------

Problems are solved in problem directories.  When you
are first logged in, these do not yet exist.  You have
to get them by executing

	hpcm_get

Before the contest starts this will just get problem
directories for demo problems.  The directory for a demo
problem named `pppp' is named `~/demos/pppp'.  Problem
directories are where you write your solutions, and they
each contain an important file named `Makefile' that
defines operations you will need in order to solve and
submit the problem.  Solutions to the demo problems are
put by `hpcm_get' into the `~/demos/solutions' direc-
tory.  You can display an index of demo problems with
the `help demos' command.

You should test the contest tools on the demo problems
before the contest starts.  You can copy solutions from
`demos/solutions' to demo problem directories and try
submitting them (see below for how to do this).

Then after the contest starts at 10 am you need to exe-
cute `hpcm_get' AGAIN, JUST ONCE, to get all the problem
directories.  A contest problem with name `pppp' has a
directory named `~/problems/pppp'.  You can display an
index of contest problems with the `help problems'
command.


Asking Questions
----------------

Advisers are available during the festival.  You can ask
for either of two kinds of advice.  If you ask for a
hint you will be told `go look up algorithm ...' or
`go look at web page ...'.  If you say you are stuck,
the adviser will (attempt to) do whatever is necessary
to unstick you.

You can use the web or printed materials to try to
answer your questions.

During lunch, you can ask any questions, get any
answers, from anyone, as long as you do not use your
accounts or reference code printouts.


Working on a Problem
--------------------

For a problem named `pppp' you should write a file named
`pppp.c', `pppp.cc', `pppp.java', or `pppp.lsp' in your
`~/problems/pppp' directory.  The suffix of the file you
write determines the programming language you are using:

	.c 	for C		   see `help c'
	.cc	for C++		   see `help c++'
	.java	for JAVA	   see `help java'
	.lsp	for COMMONLISP	   see `help commonlisp'

You must write only ONE of these files; you CANNOT have
a solution in two different languages at once.  For each
language there is a language specific help file detail-
ing how to write solutions in that language.  For
example, use the `help java' command for how to write
solutions in JAVA.

After you write your program, execute the `make' command
in the problem directory.  This will compile your pro-
gram, create a file named `pppp.in', run your program
with `pppp.in' as input and `pppp.out' as output, and
display `pppp.out'.  You can test this by copying a
solution from `~/demos/solutions' into some demonstra-
tion problem directory `~/demos/pppp' and running `make'
and then `make test' in that directory.  Initially
`pppp.in' is a copy of `sample.in' in the problem direc-
tory, and if your program is correct, the `pppp.out'
produced should be essentially the same as the file
`sample.test' in the problem directory.

The `make test' command will make a file `pppp.test'
that is a copy of `sample.test', and then display the
difference between `pppp.test' and `pppp.out'. You can
then edit additional test data into `pppp.in' and run
`make', and after verifying the output you can copy
`pppp.out' to `pppp.test', so that whenever you change
your program you can use `make test' to check that it
has not changed previously correct results.  Also,
when you have an incorrect submission, the judge will
return to you the input and output of the judge's first
failed test case.  Add these respectively to `pppp.in'
and `pppp.test' and use `make test' to test.


Make Commands
---- --------

The full set of `make' commands you can execute in a
problem directory is:

    make
    	Same as `make pppp.out' (see below).

    make pppp
    	Makes the binary program file `pppp' by running
	gcc on pppp.c, or g++ on pppp.cc, or javac on
	pppp.java, etc.  Does nothing if `pppp' is more
	up to date than pppp.c, pppp.cc, etc.

	In addition to making `pppp', other files may be
	made for some languages, e.g., pppp.class for
	JAVA.

    make pppp.in
	If the file pppp.in does NOT already exist and
	the file sample.in does exist, this copies
	sample.in to pppp.in and makes the copy writable
	(editable) so you can add to pppp.in.  If
	pppp.in already exists this does nothing (even
	if sample.in is more recent than pppp.in).

	sample.in is the `Sample Input' from the problem
	description.

    make pppp.out
	Makes `pppp' and `pppp.in' as above and then
	runs pppp with standard input coming from the
	file pppp.in.  Puts the standard output in the
	file pppp.out, and also copies that to the
	screen.  Also outputs any standard error output
	to the screen.  Does nothing, however, if
	pppp.out is more recent than both pppp.in and
	pppp.

    make pppp.debug
	Ditto but runs `pppp debug' instead of `pppp'
	and puts the standard output in the file
	`pppp.debug' instead of `pppp.out'.  You should
	write your program to output debugging
	information to the standard output if the
	program is given any arguments.

    make debug	Same as `make pppp.debug'.

    make submit
	Makes `pppp.out' just to be sure that nothing
	crashes, and then e-mails pppp.c, pppp.cc,
	pppp.java, or pppp.lsp to the judges.  Note the
	pppp.in file MUST exist to submit (in order to
	make pppp.out), but pppp.in can be the minimum
	needed to keep your program from crashing.

    make pppp.test
	If the file pppp.test does NOT already exist and
	the file sample.test does exist, this copies
	sample.test to pppp.test and makes the copy
	writable (editable) so you can add to pppp.test.
	If pppp.test already exists this does nothing
	(even if sample.test is more recent than
	pppp.test).

	sample.test is the `Sample Output' from the
	problem description.

    make test
    	Makes pppp.out and pppp.test as above and then
	displays their differences using the command
	`diff -u pppp.out pppp.test'.  If the files are
	copies of sample.in and sample.test, they should
	be essentially the same, but need not be exactly
	the same: see the `scores' help file.

    make clean
        Removes `pppp', pppp.out, pppp.debug,
	pppp.class, etc.

The `make' UNIX commands work because of the way the
`Makefile' file in the problem directory is written.
The `Makefile' file contains some oddities resulting
from the fact that judges, who use the same `Makefile'
as contestants, run solutions in a sandbox account that
has permission problems accessing judge's files. 


Resource Limits
-------- ------

Problems intended for novice teams do not have important
resource limits, but problems intended for experienced
teams often have limits that require solutions to be
time and space efficient.

If you look at the `Makefile' in the problem directory
you will see that it contains memory and time resource
limits which constrain your problem.  Memory limits
are typically a few tens of megabytes and time limits
are typically 10 to 30 seconds.


Scoring
-------

Solutions are submitted to an autojudge, which runs test
cases against the solutions, grades the solutions cor-
rect or not, and returns an email to the submitter con-
taining the grade.  If incorrect, the email includes the
input and output of the judge's first failed test case,
and a little bit of other information that can be inter-
preted by using `help scores'.

For incorrect submissions, the judge's return email will
contain the judge's input and output for the first
failed test case.  You should add these to your pppp.in
and pppp.test files and continue debugging your program.
For a correct solution the email will contain the
judge's solution for you to look at, either in the
same programming language you used, or in the language
most related to that for which the judge has a solution.

A festival typically has multiple problem sequences each
with its own scoreboard.  For `topic' sequences, such as
a `geometry' sequence, the scoreboard is only of use to
see which other teams are working on a problem.  However
there may be one or two `contest' sequences which are
competitive, and for which a winner will be declared
either implicitly or explicitly.

For all scoreboards, problems have a base score of 100
(in some cases the base score may be different).  You
lose 5% of your score on a problem for each incorrect
submission.  Unsolved problems do not count.

So if you submit N incorrect submissions followed by
a correct submission for a problem, your score is

	(base score) * (100% - 5%)^N

All scoring is by an autojudge.  The autojudge is
loosely monitored by a human judge and maintains a
complete audit trail of its actions in case it
misbehaves.

The `scoreboard' command lists the available score-
boards.  The `scoreboard TOPIC' command displays the
scoreboard for the given TOPIC (or other problem sequ-
ence).  A scoreboard contains an entry for each team and
problem (ignoring teams that have not submitted for any
problems on the scoreboard).  This entry is `.....' if
the account has not submitted any solution for the pro-
blem, `.../N' if the account has submitted N incorrect
solutions, and `SSS/N' if the account has submitted a
correct solution and N previous incorrect solutions,
where SSS is the problem score, and is equal to
`BBB * 0.95^N' rounded to the nearest integer, where
BBB is the base score for the problem.

The account with the highest total score (sum of scores
of all problems the account solved) is the best account.
Account scores are reported in the form TTT/P where TTT
is the sum of solved problem scores and P is the number
of problems solved by the account.

If the scoreboard is too long for its display window,
you can scroll down and up with the down and up arrow
keys.  If the scoreboard changes the display will be
updated and will go back to the top of the scoreboard.



File:		algorithm_festival
Author:		Bob Walton <walton@seas.harvard.edu>
Date:		See top of file.

The authors have placed this file in the public domain;
they make no warranty and accept no liability for this
file.
