ACM Contest Help	    Mon Sep 19 03:16:45 EDT 2016


General Contest Rules
------- ------- -----

An ACM contest has 3-person teams but only one terminal
per team.  The problem descriptions are on paper only,
and are handed out at the start of the contest.  The
contest starts at 10am and stops at 3pm.  Scoring is by
the number of problems solved, with ties broken by the
times required to solve problems, as explained in more
detail below.

All contestant programs run on the same fast computer
and are therefore subject to the same load.  There may
be differences in terminals assigned to contestants, so
to ensure fairness, terminals are assigned to contes-
tants at random (e.g., by using dice throws).

You participate in an ACM contest by going to a contest
host site.  There the contest managers will give you a
terminal and an account name, and log in for you.  You
will NOT be given any password.

You can print out files.  Your printouts will be brought
to you.  Do NOT try to find the printer.  If a printout
has not been brought to you promptly, ask the contest
support personnel to check the printer.

During an ACM contest:

  1. You may NOT use web browsers.

  2. You may NOT communicate electronically with anyone
     but the contest judge.

  3. You may NOT use calculators or computers other than
     the one provide to you for logging into your
     account.

  4. You may NOT communicate verbally with anyone except
     members of your team and contest support personnel.

These rules are VERY IMPORTANT.

Of course purely personal communications not about
contest details are exempt from these rules.

You may bring and use any printed material you like.
There are contest commands to display some language
specific documentation, and some documentation about
some of the algorithms you will need: see below.

Teams can declare themselves to be finished early.
After a team declares itself done electronically,
`*DONE*' appears by the team's total score on the score-
board, further submissions by the team are ignored by
the scoreboard, and the team may receive substantial
help from the host site managers; see Early Finishing
below for details.


Your Account
---- -------

After you have been logged in, PLEASE CHECK TO BE SURE
your team account name matches the account logged into
the terminal you are given.

Here are some commands that may be of use to you:

    who_where
        Lists the association between team names and
	account names.

    help xxx
        Displays the help file named xxx.  However this
	may not work for algorithm help files.

    help
        Displays the index of non-algorithm help files.

    help mail
        Gives info about how the read your email.

    help terminals
        Gives info about making extra terminal windows.

    help print
        Gives info about printing files.

    help c
    help c++
    help java
	For each programming language you might use (c,
	c++, java), there is a help file that gives
	information about how to structure your program
	and do input/output in the contest environment.

    help algorithms
        Lists algorithm help files and tells how to
	print them.

As soon as you are logged in, you should get and test
the demo problems as described below.


Editors
-------

The editors are `nano', `vi', and `emacs'.  If you are
not familiar with any of these, use `nano', which is
self documenting and very easy to learn.  `help vi' is
available for the more ambitious.  `emacs' should only
be used by those who know it (or have a knowledgeable
friend leaning over their shoulder).


What Problems?
--------------

Problems are solved in problem directories.  When you
are first logged in, these do not yet exist.  You have
to get them by executing

	hpcm_get

Before the contest starts this will just get problem
directories for demo problems.  The directory for a demo
problem named `pppp' is named `~/demos/pppp'.  Problem
directories are where you write your solutions, and they
each contain an important file named `Makefile' that
defines operations you will need in order to solve and
submit the problem.  Solutions to the demo problems are
put by `hpcm_get' into the `~/demos/solutions' direc-
tory.  You can display an index of demo problems with
the `help demos' command.

You should test the contest tools on the demo problems
before the contest starts.  You can copy solutions from
`demos/solutions' to demo problem directories and try
submitting them (see below for how to do this).

Then after the contest starts at 10am you need to exe-
cute `hpcm_get' AGAIN, JUST ONCE, to get all the problem
directories.  A contest problem with name `pppp' has a
directory named `~/problems/pppp'.  After the contest
starts, you can display an index of contest problems
with the `help problems' command.


Asking Questions
----------------

In an ACM contest you can ask contest support people
at your host site about programming tools, but not about
particular problems.  If you have a question about a
particular problem, you must email the judge using a
method that is slightly weird.  First, edit your email
into a file of your own choosing.  If your first line
has the form

	Subject: ....

and the next line is completely empty (no spaces),
then the first line will be the subject line of the
message.  Be sure that that the subject does NOT begin
with the words `submit' or `get'.

Then execute

	hpcm_sendmail < filename

to send the file as email to the judges.

Email to the judge by other means during an ACM contest
will not be seen by the judge during the contest.

If the judge chooses to clarify a problem, the clarifi-
cation will be posted on the scoreboard so everyone can
see it, rather than returned to you by email.


Working on a Problem
--------------------

In order to understand the following it may be helpful
to start by doing something like

	cd ~/demos/summer
	cp ../solutions/summer/summer.java .
	make

(don't forget the `.' at the end of the second line)
which will first put you in the problem directory for
the `summer' demos problem and copy the demonstration
`java' solution to that directory.  Then the `make'
command will copy the directory's `sample.in' file to
`summer.in', compile and run the solution against the
`summer.in' input file to make the `summer.out' output
file, and print this output file on the terminal.  After
you read the following try the `make test' and then
`make submit' commands in this `summer' directory.

For a problem named `pppp' you should write a file named
`pppp.c', `pppp.cc', or `pppp.java' in your `~/problems/
pppp' directory (or for a demonstration problem, in your
`~/demos/ppp' directory).  The suffix of the file you
write determines the programming language you are using:

	.c 	for C		   see `help c'
	.cc	for C++		   see `help c++'
	.java	for JAVA	   see `help java'

You must write only ONE of these files; you CANNOT have
a solution in two different languages at once.  For each
language there is a language specific help file detail-
ing how to write solutions in that language.

After you write your program, execute the `make' command
in the problem directory.  This will compile your pro-
gram, create a file named `pppp.in', run your program
with `pppp.in' as input and `pppp.out' as output, and
display `pppp.out'.  You can test this by copying a
solution from `~/demos/solutions' into some demonstra-
tion problem directory `~/demos/pppp' and running `make'
in that directory.

Initially `pppp.in' is a copy of `sample.in' in the
problem directory, and if your program is correct, the
`pppp.out' produced should be essentially the same as
the file `sample.test' in the problem directory.

The `make test' command will make a file `pppp.test'
that is a copy of `sample.test', and then display the
difference between `pppp.test' and `pppp.out'.

You can then edit additional test data into `pppp.in'
and run `make test', and after verifying the output you
can copy `pppp.out' to `pppp.test', so that whenever you
change your program you can use `make test' to check
that it has not changed previously correct results.

The `make submit' command will submit your solution
after first doing a `make' to be sure your solution
does not crash on sample input.  Results are returned
in your email; see `help mail'.  More details are 
given in the following sections.

Also, for some of the easiest problems in some ACM
contests, when you have an incorrect submission the
autojudge will return to you the input and output of
the judge's first failed test case.  See `Problem
Scores' below for more information on this.


Make Commands
---- --------

The full set of `make' commands you can execute in a
problem directory is:

    make
    	Same as `make pppp.out' (see below).

    make pppp
    	Makes the binary program file `pppp' by running
	gcc on pppp.c, or g++ on pppp.cc, or javac on
	pppp.java, etc.  Does nothing if `pppp' is more
	up to date than pppp.c, pppp.cc, etc.

	In addition to making `pppp', other files may be
	made for some languages, e.g., pppp.class for
	JAVA.

    make pppp.in
	If the file pppp.in does NOT already exist and
	the file sample.in does exist, this copies
	sample.in to pppp.in and makes the copy writable
	(editable) so you can add to pppp.in.  If
	pppp.in already exists this does nothing (even
	if sample.in is more recent than pppp.in).

	sample.in is the `Sample Input' from the problem
	description.

    make pppp.out
	Makes `pppp' and `pppp.in' as above and then
	runs pppp with standard input coming from the
	file pppp.in.  Puts the standard output in the
	file pppp.out, and also copies that to the
	screen.  Also outputs any standard error output
	to the screen.  Does nothing, however, if
	pppp.out is more recent than both pppp.in and
	pppp.

    make pppp.debug
	Ditto but runs `pppp debug' instead of `pppp'
	and puts the standard output in the file
	`pppp.debug' instead of `pppp.out'.  You should
	write your program to output debugging
	information to the standard output if the
	program is given any arguments.

    make debug	Same as `make pppp.debug'.

    make submit
	Makes `pppp.out' just to be sure that nothing
	crashes, and then e-mails pppp.c, pppp.cc, or
	pppp.java to the judges.  Note the pppp.in file
	MUST exist to submit (in order to make
	pppp.out), but pppp.in can be the minimum needed
	to keep your program from crashing.

    make pppp.test
	If the file pppp.test does NOT already exist and
	the file sample.test does exist, this copies
	sample.test to pppp.test and makes the copy
	writable (editable) so you can add to pppp.test.
	If pppp.test already exists this does nothing
	(even if sample.test is more recent than
	pppp.test).

	sample.test is the `Sample Output' from the
	problem description.

    make test
    	Makes pppp.out and pppp.test as above and then
	displays their differences using the command
	`diff -u pppp.out pppp.test'.  If the files are
	copies of sample.in and sample.test, they should
	be essentially the same, but need not be exactly
	the same: see the `scores' help file.

    make clean
        Removes `pppp', pppp.out, pppp.debug,
	pppp.class, etc.

The `make' UNIX commands work because of the way the
`Makefile' file in the problem directory is written.
The `Makefile' file contains some oddities resulting
from the fact that judges, who use the same `Makefile'
as contestants, run solutions in a sandbox account that
has permission problems accessing judge's files. 


Resource Limits
-------- ------

Some problems have resource limits that require their
solutions to be time and space efficient.

If you look at the `Makefile' in the problem directory
you will see that it contains memory and time resource
limits which constrain your problem.  Memory limits
are typically a few tens of megabytes and time limits
are typically 10 to 30 seconds.


Problem Scores
------- ------

For each problem you submit, the judge returns an email
with the submission score, and for incorrect submissions
this may have a little bit more detail as to the nature
of the failure.

See `help mail' for details on reading e-mail and
`help scores' for details on interpreting scores.

In fact you get two emails per submission, one from the
autojudge, and one from a human judge who manually
reviews and confirms the work of the autojudge.

For some of the easier problems in some ACM contests,
the autojudge's returned email may include the input and
output of the judge's first failed test case.  Append
the returned test case input to your pppp.in file and
the failed test case output to your pppp.test file,
so `make test' will include these test cases.

If you are making use of judge's first failed test case
input/output, you should be careful that your program
does not make certain mistakes, least the autojudge
return to you the wrong test case.  If the problem has
only one line of output per test case, be sure your
solution outputs only one line per test case.  If the
problem has test case name lines, be sure your solution
begins a test case by correctly reading and outputting
the test case name line, before doing anything else.


Scoreboard
----------

The `scoreboard' command displays the scoreboard which
contains an entry for each team and problem.  The entry
is `.....' if the team has not submitted any solution
for the problem, `.../N' if the team has submitted N
incorrect solutions, and `TTT/N' if the team has submit-
ted a correct solution and N-1 previous incorrect solu-
tions, where TTT tells the time the team needed to solve
the problem.  For example,  TTT/N might be 25:12s/2
which means the team submitted 1 incorrect submission
and then a correct submission and the latter was 25
minutes and 12 seconds after the start of the contest.
More information about how TTT/N is formatted and how
to manage problem times is given separately below.

Each team also has a total score beneath its name, which
has the form P/RRR.  P is the number of problems the
team has solved - more is better.  RRR is the sum in
seconds of the `problem times' (explained below) of the
P problems that were correctly solved - more is WORSE.

If the scoreboard is too long for its display window,
you can scroll down and up with the down and up arrow
keys.  If the scoreboard changes the display will be
updated and will go back to the top of the scoreboard.
Teams are named by their accounts, but you can use the
`who_where' command to find which accounts belong to
which teams.

At 2pm the scoreboard will `freeze' and not display
submissions made between 2pm and 3pm, although these
submissions will count in the final score.  A separate
invisible scoreboard will continue to track submissions
made before 3pm, at which time this invisible scoreboard
will become the final scoreboard, though it will still
be invisible until it is passed out at the post contest
meeting during which the winners will be announced.

All submissions, even those ignored by the scoreboard,
such as those submitted after 3pm, receive email scores
from the autojudge.  Only submissions made before 3pm
will be verified by a human judge.


Problem Times
------- -----

The time TTT for a problem and team is the number of
seconds between the starting time of the contest and
the time the team submits its first solution to the
problem (once a team submits a solution to a problem,
further submissions by that team for the problem are
ignored).  Because it is necessary to pack TTT/N into a
small number of characters, the information is encoded
in one of the following ways:

    MM:SSs/N	MM minutes and SS seconds
    HH:MMm/N	HH hours and MM minutes
    DD:HHh/N	DD days and HH hours

Here N is the number of submissions including the cor-
rect submission, and N-1 is the number of incorrect
submissions before the first correct submission.

When problem times are important, as they are for the
better teams, it is best to do the easiest problems
first.  Suppose two `identical' teams each solve just
two problems, one easy that takes 20 minutes, and one
hard that takes 100 minutes.  A team that solves the
easy one first will submit the solutions at 20 minutes
after contest start and at 120 minutes after contest
start, having a total time score of 140 minutes.  A
team that solves the hard problem first will submit
solutions at 100 minutes and 120 minutes, for a score
of 220 minutes, much worst than 140 minutes.


Early Finishing
----- ---------

If you decide you are not going to be able to complete
any more problems, but you would like to get extra
help with some of the problems you are stuck on, you
can declare your team finished with the contest proper
and then get extra help.  However, you should try not
to do this unless you have correctly submitted at least
one problem, and you should not assume that extra help
will be available on the harder problems.

To declare your team finished, type the command
`hpcm_finish' and follow the instructions it gives.
You will need assistance from a host site manager.
After you have finished `*DONE*' will appear by your
total score on the scoreboard and any additional
submissions you make will be ignored by the scoreboard,
though you will get the results from the autojudge by
email.  Note that there is no point in doing this unless
you want to continue to work on the problems for fun or
profit while getting help not otherwise available.


After the Contest
----- --- -------

After the contest ends and the results have been saved,
the contest is converted into an untimed practice and
your coach is emailed account names and passwords to use
in accessing this practice.  The work you have done
remains in your account and you can continue by practic-
ing on the problems you failed to solve.  See `help
untimed_practice' for more details.



File:		acm_contest
Author:		Bob Walton <walton@seas.harvard.edu>
Date:		See top of file.

The authors have placed this file in the public domain;
they make no warranty and accept no liability for this
file.
