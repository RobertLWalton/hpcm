Timed Practice Help	    Thu Feb 28 13:14:10 EST 2013


Introduction
------------

A timed practice mimics an ACM contest (described in the
acm_contest help file).  The differences are that a team
can set its own starting time, all judging is automatic,
there is no one available to answer questions in a
timely manner, and the team is completely on its honor
to follow the rules.  And, of course, it is just a
practice.

The contest has a web page with problem descriptions
and a pointer to the help files on the web.  You are
given an account name and password.


General Contest Rules
------- ------- -----

The contest has 3-person teams but only one terminal
per team.  You must print the problem descriptions
but MUST NOT LOOK AT THEM until you start the contest.
You will be given an account name and password and must
log in from your own terminal.  You type a command in
the account to start the contest, and the contest
scoreboard stops accepting your submissions 5 hours
later.  Scoring is by the number of problems solved,
with ties broken by the times required to solve
problems, as explained in more detail below.

During the contest you are on your honor to obey the
following rules:

  1. You may NOT use web browsers.
  
  2. You may NOT communicate electronically with anyone.
     
  3. You may NOT use calculators or computers other than
     the one you use for logging into your account.
     
  4. You may NOT communicate verbally with anyone except
     members of your team.

Of course purely personal communications not about
contest details are exempt from these rules.

You may use any printed material you like, but should
identify what you will use before you begin the contest.
There are contest commands to display some language
specific documentation; see the language specific help
files (e.g., the `c++' and `java' help files). 	You may
also print algorithmic help files, see the `algorithms'
help file.


Connecting to Your Account
---------- -- ---- -------

You will be given an account name and password, and web
page that describes the contest, gives a means of print-
ing the problem descriptions, and points at the contest
`help' files on the web.  You can connect to your
account using the methods of the `terminals' help file.

In your account `help xxx' will display the xxx help
file (unless it is an algorithms help file: see `help
algorithms').  Or you can access the file from the web.

You can set the account up so that print commands email
you postscript files, and in some cases, the print
commands can be set up to print remotely on your
printer.  See `help print'.

Once you are in your account you should check out the
demo problems as described below before you start
the contest.  The files involved are accessible from
the contest web page or can be printed.


What Problems?
--------------

Problems are solved in problem directories.  When you
are first logged in, these do not yet exist.  You have
to get them by executing

	hpcm_get

Before you start the contest this will just get problem
directories for demo problems.  The directory for a demo
problem named `pppp' is named `~/demos/pppp'.  Problem
directories are where you write your solutions, and they
each contain an important file named `Makefile' that
defines operations you will need in order to solve and
submit the problem.  Solutions to the demo problems are
put by `hpcm_get' into the `~/demos/solutions' direc-
tory.  You can display an index of demo problems with
the `help demos' command.

You should test the contest tools on the demo problems
before you start the contest.  You can copy solutions
from `demos/solutions' to demo problem directories and
try submitting them, for example.

You START THE CONTEST by typing the command

	hpcm_get problems


to get all the problem directories.  A contest problem
with name `pppp' has directory named `~/problems/pppp'.
You can display an index of contest problems with the
`help problems' command.  After you start the contest
you can look at the problem descriptions.


Asking Questions
----------------

There is no one to ask questions of who is likely to
respond during the contest.  However, your submissions
and the autojudge replies are CC'ed to a person, and
if you use the following slightly weird method of send-
ing an email question to the autojudge, the person will
see it and respond, though very possibly not until the
contest is long over.

First, edit your question email into a file of your own
choosing.  If your first line has the form

	Subject: ....

and the next line is completely empty (no spaces),
then the first line will be the subject line of the
message.  Then

	hpcm_sendmail < filename

to send the file as email to the autojudge.

Note that the subject must NOT begin with the words
`submit' or `get'.


Working on a Problem
--------------------

For a problem named `pppp' you should write a file named
`pppp.c', `pppp.cc', `pppp.java', or `pppp.lsp' in your
`~/problems/pppp' directory.  The suffix of the file you
write determines the programming language you are using:

	.c 	for C		   see `help c'
	.cc	for C++		   see `help c++'
	.java	for JAVA	   see `help java'
	.lsp	for COMMONLISP	   see `help commonlisp'

You must write only ONE of these files; you CANNOT have
a solution in two different languages at once.  For each
language there is a language specific help file detail-
ing how to write solutions in that language.

After you write your program, execute the `make' command
in the problem directory.  This will compile your pro-
gram, create a file named `pppp.in', run your program
with `pppp.in' as input and `pppp.out' as output, and
display `pppp.out'.  You can test this by copying a
solution from `~/demos/solutions' into some demonstra-
tion problem directory `~/demos/pppp' and running `make'
and then `make test' in that directory.  Initially
`pppp.in' is a copy of `sample.in' in the problem direc-
tory, and if your program is correct, the `pppp.out'
produced should be essentially the same as the file
`sample.test' in the problem directory.

The `make test' command will make a file `pppp.test'
that is a copy of `sample.test', and then display the
difference between `pppp.test' and `pppp.out'. You can
then edit additional test data into `pppp.in' and run
`make', and after verifying the output you can copy
`pppp.out' to `pppp.test', so that whenever you change
your program you can use `make test' to check that it
has not changed previously correct results.


Make Commands
---- --------

The full set of `make' commands you can execute in a
problem directory is:

    make
    	Same as `make pppp.out' (see below).

    make pppp
    	Makes the binary program file `pppp' by running
	gcc on pppp.c, or g++ on pppp.cc, or javac on
	pppp.java, etc.  Does nothing if `pppp' is more
	up to date than pppp.c, pppp.cc, etc.

	In addition to making `pppp', other files may be
	made for some languages, e.g., pppp.class for
	JAVA.

    make pppp.in
	If the file pppp.in does NOT already exist and
	the file sample.in does exist, this copies
	sample.in to pppp.in and makes the copy writable
	(editable) so you can add to pppp.in.  If
	pppp.in already exists this does nothing (even
	if sample.in is more recent than pppp.in).

	sample.in is the `Sample Input' from the problem
	description.

    make pppp.out
	Makes `pppp' and `pppp.in' as above and then
	runs pppp with standard input coming from the
	file pppp.in.  Puts the standard output in the
	file pppp.out, and also copies that to the
	screen.  Also outputs any standard error output
	to the screen.  Does nothing, however, if
	pppp.out is more recent than both pppp.in and
	pppp.

    make pppp.debug
	Ditto but runs `pppp debug' instead of `pppp'
	and puts the standard output in the file
	`pppp.debug' instead of `pppp.out'.  You should
	write your program to output debugging
	information to the standard output if the
	program is given any arguments.

    make debug	Same as `make pppp.debug'.

    make submit
	Makes `pppp.out' just to be sure that nothing
	crashes, and then e-mails pppp.c, pppp.cc,
	pppp.java, or pppp.lsp to the judges.  Note the
	pppp.in file MUST exist to submit (in order to
	make pppp.out), but pppp.in can be the minimum
	needed to keep your program from crashing.

    make pppp.test
	If the file pppp.test does NOT already exist and
	the file sample.test does exist, this copies
	sample.test to pppp.test and makes the copy
	writable (editable) so you can add to pppp.test.
	If pppp.test already exists this does nothing
	(even if sample.test is more recent than
	pppp.test).

	sample.test is the `Sample Output' from the
	problem description.

    make test
    	Makes pppp.out and pppp.test as above and then
	displays their differences using the command
	`diff -u pppp.out pppp.test'.  If the files are
	copies of sample.in and sample.test, they should
	be essentially the same, but need not be exactly
	the same: see the `scores' help file.

    make clean
        Removes `pppp', pppp.out, pppp.debug,
	pppp.class, etc.

The `make' UNIX commands work because of the way the
`Makefile' file in the problem directory is written.
The `Makefile' file contains some oddities resulting
from the fact that judges, who use the same `Makefile'
as contestants, run solutions in a sandbox account that
has permission problems accessing judge's files. 


Resource Limits
-------- ------

Some problems have resource limits that require their
solutions to be time and space efficient.

If you look at the `Makefile' in the problem directory
you will see that it contains memory and time resource
limits which constrain your problem.  Memory limits
are typically a few tens of megabytes and time limits
are typically 10 to 30 seconds.  Some problems require
efficient algorithms to be sure you stay within these
limits.


Scoreboard
----------

The `scoreboard' command displays the scoreboard which
contains an entry for each team and problem.  The entry
is `.....' if the team has not submitted any solution
for the problem, `.../N' if the team has submitted N
incorrect solutions, and `TTT/N' if the team has submit-
ted a correct solution and N previous incorrect solu-
tions, where TTT tells the time the team needed to solve
the problem.  Each team also has a total score beneath
its name, which has the form M/RRR.  M is the number of
problems the team has solved - more is better - and RRR
is the sum in seconds of the M times the team took to
solve these problems - more is WORSE.  To see details
about problem times use `help scoreboard'.

If the scoreboard is too long for its display window,
you can scroll down and up with the down and up arrow
keys.  If the scoreboard changes the display will be
updated and will go back to the top of the scoreboard.
Teams are named by their accounts, but you can use the
`who_where' command to find which accounts belong to
which teams.

For each problem you submit, the judge returns an email
with the submission score, and for incorrect submissions
this may have a little bit more detail as to the nature
of the failure: see `help scores'.  In fact you get two
emails per submission, one from the autojudge, and one
from a human judge who manually reviews and confirms the
work of the autojudge.


Other Issues
----- ------

The following help commands may be useful for:

    Printing files:			help print

    Making new terminal windows:	help terminals

    Understanding problem scores:	help scores

    Understanding the scoreboard:	help scoreboard


File:		timed_practice
Author:		Bob Walton <walton@seas.harvard.edu>
Date:		See top of file.

The authors have placed this file in the public domain;
they make no warranty and accept no liability for this
file.

RCS Info (may not be true date or author):

    $Author: walton $
    $Date: 2013/02/28 18:20:44 $
    $RCSfile: timed_practice,v $
    $Revision: 1.6 $

