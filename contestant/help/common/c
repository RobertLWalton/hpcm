C Help			    Fri Nov 23 15:10:44 EST 2012

Program Structure 
------- ---------

Typical program structure including end of file detect-
ion, finding symbols such as `*' that end a string of
numbers, and debugging is:

	// Standard libraries.
	//
	#include <stdlib>
	#include <stdio>   // scanf, printf

	// String and character computation.
	//
	#include <string>
	#include <ctype>

	// Math.
	//
	#include <math>
	#include <limits>
	#include <float>

	// Checking.
	//
	#include <assert>

	int debug;
	#define dprintf if ( debug ) printf

	char line[81];
	    // You can assume lines longer than
	    // 80 characters will not be read by
	    // `gets' below, UNLESS the problem
	    // statement says otherwise.

	int main ( int argc, char * argv[] )
	{
	    // argc - 1 == number of program arguments.
	    //
	    debug = ( argc > 1 );
	    . . . .
	    while ( gets ( line ) )
	    {
		// Print test case name.
		//
	        printf ( "%s\n", line );

		// Read input.
		//
		scanf ( ... );
		. . . . .
		// Read a string of numbers ending
		// in `*'.
		//
		while ( scanf ( "%d...", ... ) != 0 )
		{
		   . . . . .
		}

		// Skip `*' and preceeding whitespace.
		//
		scanf ( " *" );
		. . . . .

		// After reading test case data with
		// scanf, input will be just before the
		// line feed at the end of the test case
		// data.  This must be skipped or else
		// it will be erroneously read as an
		// empty next test case name.  Note:
		// you CANNOT use scanf ("\n") to do
		// this!
		//
		gets ( line );
		    // The line read consists of just a
		    // line feed and is discarded.

		// Compute.
		//
		dprintf ( ... );  // Print if debug.
		. . . . .

		// Output.
		//
		printf ( ... );
	    }

	    // Return 0 from `main' to tell system there
	    // is no error.
	    //
	    return 0;

	}

Input
-----

Input is read from the standard input; you MUST NOT open
any file for input.

Test cases begin with a test case name line that is
read by the first `gets'.  `gets' returns NULL on an
end of file, which is interpreted as `false', so the
outer loop processes one test case at a time.  As soon
as the test case name is successfully read into `line',
it is printed by `printf ( "%s\n", line )'.  All test
case name lines are 80 characters or less, so `line' as
enough room for 80 characters plus a `\0' NUL character
supplied by `gets' to end the input line.

After reading and printing the test case name line, the
rest of the test case data is read with `scanf'.  This
data may consist of numbers, perhaps with a few
characters like `*' thrown in to indicate the end of a
sequence of numbers.  The lines containing numbers may
be very long, so they should be read one number at a
time with `scanf', and NOT read in first with `gets'.
A `*' may be detected by looking at the return value
of `scanf', which is the number of numbers actually
read.  If you are expecting 4 integers or a `*', use
`scanf ( "%d%d%d%d", ... )' which returns 4 if it read
4 integers and 0 if it encountered a `*'.  Then in the
latter case you must skip the `*', which can be done
by `scanf ( " *" )' which skips first the whitespace
between the last number read and the input `*', and
then skips the input `*'.

Floating point numbers can be read by `scanf' by using
%lf instead of %d, and non-numbers can be read by using
%s or %c - see below for synopsis.  Sometimes a problem
will specifically ask you to read lines to be processed
as character strings, in which case use `gets' and be
sure your line buffer is long enough.


Output
------

Output is written to the standard output; you MUST NOT
open any file for input; you MUST NOT write to the
standard error output.

Output can be done with printf.  Some formats that may
be useful are "%.3f" to print a double with exactly 3
decimal places in as few columns as possible, "%10.3f"
to do the same in 10 columns padding with spaces on the
left, "%10s" to print a string right adjusted in 10
columns, and "%-10s" to pirnt a string LEFT adjusted in
10 column.  Here the numbers 3 and 10 are merely repre-
sentative, and can be replaced by any other non-zero
positive integer.


Debugging
---------

When your program is executed by the judge, it will
NOT be passed ANY arguments.  One standard debugging
technique is to output extra debugging information if
and only if your program is passed an argument.

The above program defines `debug' to be true if and
only if the program is called with one or more argu-
ments, and defined dprintf to do what printf does if
and only if `debug' is true.  Thus dprintf can be used
to print debugging information.

Debugging is best done with information printed by
`dout', and not with a debugger like `gdb'.  The excep-
tion is debugging programs that crash or go into an
infinite loop, which is best done with a debugger.

It is also a good idea to use `assert' statements
to check that assumptions you have made are valid during
actual program execution.


Numeric Constants
------- ---------

The following code imports useful constants, which are
the minimum and maximum values of various number types,
and the values of PI and E.

    INCLUDE			IMPORTS

    #include <limits.h>		int INT_MAX;
				int INT_MIN;
				long LONG_MAX;
				long LONG_MIN;
				unsigned long ULONG_MIN;

    #include <float,h>		double DBL_MAX;
				double DBL_MIN;
				float FLT_MAX;
				float FLT_MIN;

    #include <math.h>		double M_PI;
				double M_E;



Include Files
------- -----

The following are typical includes in modern C:


Occassionally one has a conflict with some name defined
in the includes.  E.g., you may have trouble naming a
global variable `time'.   To fix this, change the name
of your variable.  A simple way of doing this is to put
the following right after the includes:

	#define time Time










Function and Macro Specifications
-------- --- ----- --------------

You can get full documentation of the function mentioned
above by using the commands:

	man scanf
	man gets
	man 3 printf
	man assert

The following is an extract from `man' pages of the
details needed to use the functions mentioned above.
Here we assume you already know something about how to
use `scanf' and `printf', so we do not have to explain
them from scratch.

scanf ( const char * format, ... )

    Format can contain the following directives:

    %d		Scans an `int' after ignoring any
    		preceeding whitespace.

    %lld	Scans a `long long int' after ignoring
    		any preceeding whitespace.

    %lf		Scans a `double' after ignoring any
    		preceeding whitespace.

    %s		Scans a string of non-whitespace charac-
    		ters, after ignoring any preceeding
		whitespace.

    %c		Scans a single character.  Does NOT
    		ignore preceeding whitespace.

    whitespace	Matches any amount of whitespace,
    		including none.

    other	Matches the given character.  E.g., if
    character	`*' is in the format, then `*' must be
    		next in the input if the input is to
		match.  If you want to skip whitespace
		followed by `*', you MUST put ` *' and
		NOT just `*' in the format.

    Scanf returns the number of items successfully read
    by %... format directives.



File:		c
Author:		Bob Walton <walton@seas.harvard.edu>
Date:		See top of file.

The authors have placed this file in the public domain;
they make no warranty and accept no liability for this
file.

RCS Info (may not be true date or author):

    $Author: walton $
    $Date: 2012/11/24 00:23:19 $
    $RCSfile: c,v $
    $Revision: 1.2 $
