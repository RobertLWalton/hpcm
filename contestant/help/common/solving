Solving Problems Help	    Mon Sep 18 18:12:38 EDT 2000

What Problems?
--------------

The problems are in your `problems' subdirectory.  There
is one subdirectory of that for each problem, e.g., the

	problems/demo

subdirectory holds the `demo' problem.  Note, by the
way, that the demo problem is really a demo problem,
and not one of the regular contest problems.

You can get an index of the problems and a guess at
their relative difficulty by using the command:

	help

This command also gives any information particular to
the current contest.


Working on a Problem
--------------------

For a problem named `pppp' you should write a file
named `pppp.c', `pppp.cc', `pppp.java', or `pppp.p'
in the directory named `problems/pppp'.

The description of a problem named `pppp' is in a file
named `pppp.txt'.

You should write an input file named `pppp.in' in the
problem directory.

Then the following UNIX commands can be executed in the
problem directory.  You can try them out using the demo
directory.  You can try `make submit' in this demo
directory, and the judges will `judge' the demo submis-
sion, though of course it will not count.  See the
README file in the demo directory.

    make	Same as `make pppp.out' (see below).

    make pppp	Makes the binary program file `pppp' by
                running gcc on pppp.c, or g++ on
		pppp.cc, etc., depending upon which of
		pppp.c, pppp.cc, or pppp.p exist.  Does
		nothing if `pppp' is more up to date
		than pppp.c, pppp.cc, etc.

    make pppp.out
		Makes `pppp' as above and then runs it
		with standard input coming from the file
		pppp.in.  Puts the standard output in
		the file pppp.out, and then copies that
		to the screen.  Puts any standard error
		output to the screen before the standard
		output from pppp.out.  Does nothing,
		however, if pppp.out is more recent than
		both pppp.in and pppp.

    make submit
		Makes `pppp.out' just to be sure that
		nothing crashes, and then e-mails
		pppp.c, pppp.cc, etc.  pppp.p to the
		judges.  Note the pppp.in file MUST
		exist to submit, to make pppp.out, but
		pppp.in can be empty.

    make clean	Removes `pppp' and pppp.out.

To debug, you do not have to use pppp.in and make
pppp.out.  You can just make pppp and run it as a UNIX
command, typing input at it.  BUT, to submit you must
have some pppp.in file, though it can be a zero length
file.

The gdb debugger works for C and C++.  Both gdb and dbx
work well under EMACS.

For java, making pppp also makes pppp.class, which can
be run with the debugger jdb.

The contest staff will answer questions about debuggers
and editors as best they can.
