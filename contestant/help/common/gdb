Debugging with GDB          Mon Nov 26 17:32:51 EST 2012


Introduction
------------

It is recommended that a debugger like GDB not be used
unless your program crashes or goes into an infinite
loop.  In all other cases it is better to put print
statements (such as dprintf, dout, or dprintln - see
language specific help files) into your code to print
just exactly what you need to see.

So in this help file we assume you are debugging a
crash or infinite loop.


Running the Program
------- --- -------

Assume the program you are debugging is named PPPP and
its input file is PPPP.in.  Then

	% gdb PPPP
	(gdb) run <PPPP.in

If the program is going to crash, it will do so.  Other-
wise if the program loops infinitely, wait until it is
so looping, and type control-C to stop the program.


Examining a Crashed or Stopped Program
--------- - ------- -- ------- -------

Once stopped execute

	(gdb) back

to see the backtrace of functions that have been called.
Each function call is referred to as a `frame'.  The
frames are numbered, 0, 1, 2, ..., with 0 being the
frame that was executing at the time of the crash or
control-C, and the highest number frame being the
`main()' function.

You can see what the current instruction and variables
of frame N are by executing

	(gbd) frame N
	(gdb) p VARIABLE

Here `p' stands for `print' and variables that can be
printed in a frame are the local variables of the frame
plus any global variables visible to the code that
executes the frame.
