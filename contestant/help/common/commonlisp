Commonlisp Help		    Wed Feb 13 03:55:26 EST 2013


Commonlisp Language Program Stucture
---------- -------- ------- --------

Typical program structure including end of file detect-
ion, finding symbols such as `*' that end a string of
numbers, and debugging is:

    (defvar *debug* (rest *posix-argv*))

    (defun dformat (&rest r)
      (if *debug* (apply #'format t r)))

    (defvar *line*)

    ; Main loop
    ;
    (loop while (setf *line* (read-line nil nil)) do

      ; Print test case name.
      ;
      (format t "~A~%" *line*)

      (let token

        ; Read input.
	;
	(setf token (read))
        . . . . .

	; Read a string of integers ending in `*'.
	;
	(loop while (numberp (setf token (read))) do
	  . . . . .)

	; Skip `*'.
	;
	(assert (equal token '*))

	; After reading the last token of a line, read
	; throws away the whitespace character that
	; terminated the token, and this disposes of
	; the line feed that ends the last line of at
	; test case.

	; Compute.

	(dformat ... )  ; Print if debug.
	. . . . .

	; Output.

	(format t ... )

    ))

All too frequently one has a conflict between a defvar
or defun defined name and a name already defined by
the COMMONLISP standard, which gives an error message
about trying to redefine a name that is already defined
in the `COMMON-LISP' package (this error message may
mention a `lock' on the COMMON-LISP package).  There are
two ways around this: changing your name, or shadowing.
One good rule is to always begin and end defvar names
with `*', so we use `*debug*' which is not defined by
the standard, instead of `debug' which IS defined by the
standard.  Shadowing is done as follows:

    (shadow 'error)
    (defun error ...)

Without the `shadow' the defun will fail because it
tries to redefine the COMMON-LISP package symbol
`ERROR'.  You should be aware, however, that shadowing
is not a good solution when writing large packages of
commercial code, as one tends to forget what one has
shadowed and get confused.  But this is not the situa-
tion of a programming contest solution where you are
working in the default COMMON-LISP-USER package (which
imports the COMMON-LISP package).


Input
-----

Input is read from the standard input; you MUST NOT open
any file for input.  For read functions, `nil' can be
used to denote the standard input stream.

You may assume that input is correctly formatted, except
for the rare problem where you are told to produce
special output if the input contains a formatting error.
Do not waste time checking for input errors when you do
not have to.

Test cases begin with a test case name line that is
read by the `(read-line nil nil)'.  The extra arguments
`nil nil' cause read-line to return nil on an end of
file, so the outer loop above processes one test case at
a time.  As soon as the test case name is successfully
read into `*line*', it is printed by `(format t "~A"
*line*)'.  Notice that this is the only read statement
that has the extra `nil t' arguments, as it is the only
one where you expect to have an end of file.

After reading and printing the test case name line, the
rest of the test case data is read with `read'.  This
data may consist of numbers, perhaps with a few
characters like `*' thrown in to indicate the end of a
sequence of numbers.  The non-numbers read as symbols.

See the `summer' demonstration problem solution which
reads numbers.

For some problems there are no test case name lines but
instead each test case has one input line containing
text and one output line containing text.  For these
the test case input line is read the same way as the
test case name line is read above.

See the `reverser' demonstration problem solution which
reads text lines.

Sometimes it is necessary to read input one character
at a time.  This is done with code like

    (defvar *NUL* (code-char 0))
    . . . .
    (setf c (read-char nil nil *NUL*))

in which `read-char' reads one character and returns
that character or returns *NUL* on end of file.  Another
useful function call is

    (setf c (peek-char t nil nil *NUL*))

which skips whitespace and returns the next character
WITHOUT skipping that character in the input.  *NUL*
is returned on end of file.

See the `vcalc' demonstration problem solution which
reads characters one at a time.


Output
------

Output is written to the standard output; you MUST NOT
open any file for output; you MUST NOT write to the
standard error output.

In general, to be correct your program must produce
EXACTLY the one and only correct sequence of output
characters.  The main exception is that when floating
point numbers are output with a given number of decimal
places, you are permitted to output numbers which differ
from other correct output by one unit in the last
decimal place.  You must use the correct upper or lower
case and use only a single space character as a separa-
tor unless instructed to line things up in columns.

Output can be written with `(format t ...)' using the
`~A' format to print non-numbers.  Some other useful
formats are "~,3F" to print a number with exactly 3
decimal places in as few columns as possible, "~10,3F"
to print the number right adjusted in 10 columns, "~10A"
to print a string right adjusted in 10 columns, and
"~10@A" to print a string LEFT adjusted in 10 columns.
Here the numbers 3 and 10 are merely representative, and
can be replaced by any other non-zero positive integers.

See the `summer' demonstration problem solution which
outputs floating point `double's.


Execution
---------

We use `Steel Bank Commonlisp', sbcl.  The Makefile
entry for .lsp file in the problem `pppp' directory
creates the file `pppp' whose contents are

	#! /bin/sh
	exec sbcl --script pppp.lsp

which compiles and evaluates the `pppp.lsp' COMMONLISP
code file.


Debugging
---------

When your program is executed by the judge, it will
NOT be passed ANY arguments.  A standard debugging
technique is to output extra debugging information if
and only if your program is passed an argument.

The above program defines `debug' to be true if and
only if the program is called with one or more argu-
ments, and defines dprintf to do what printf does if
and only if `debug' is true.  Thus dprintf can be used
to print debugging information.

Debugging is best done with information printed by
`dformat', and not with the builtin lisp debugger.  The
exception is debugging programs that crash or go into
an infinite loop, which is best done with the debugger
and with the program running in non-compiled interpre-
tive mode.  A special program, `ldebug', makes this
easier: see `help ldebug' for details.

It is also a good idea to use `assert' statements
to check that assumptions you have made are valid during
actual program execution.  For example, if you are
certain that the next thing to be read is a number,
instead of writing

    (setf n (read))

it might be better to write

    (assert (numberp (setf n (read))))

See the `summer' demonstration problem solution which
uses dformat and assert.


Function and Macro Synopsis
-------- --- ----- --------

A good reference is `COMMON LISP, The Language', 2nd
edition www.cs.cmu.edu/Groups/AI/html/cltl/clm/clm.html

The following is an extract from this reference of
details needed to use the functions mentioned above,
and also a few numeric constants.  Here we assume you
already know something about how to use `scanf' and
`printf', so we do not have to explain them from
scratch.

(read-line nil nil)

    Reads and returns the next line as a string, or
    returns nil if at end of file.

(read)
(read nil nil)

    Reads the next input token which should be either
    a symbol or a number.  If a symbol, it will be
    converted to upper case.  The form with two nil
    arguments returns nil on end of file, while the
    form with no extra arguments may signal an error
    on end of file (or may not).  If a whitespace
    characters such as a single space or line feed
    terminates the token, that space character will be
    skipped over.

(read-char)
(defvar *NUL* (code-char 0))
(read-char nil nil *NUL*)

    Reads one character; the form with extra arguments
    returns a NUL character (ASCII code 0) on end of
    file, while the form without arguments may signal
    an error on end of file (or may not).

(peek-char)
(peek-char nil nil *NUL*)
    Ditto but does not skip over the character read.

(format t f ...)

    Prints the format f with replacements for ~...
    control sequences.  Some useful control sequences
    are the following, in which w and p stand for
    sequences of decimal digits, where w is used for
    `widths' and p for `precisions':

    ~D		Outputs an value as a decimal integer
    		with no spaces before or after.

    ~wD		Outputs a value as a decimal integer
    		right adjusted in w columns.

    ~F		Outputs a value as floating point with
    		as many decimal places as needed to
		express the precision of the number;
		for double-floats this is about 15
		digits of precision; but always outputs
		at least one decimal place and never
		uses exponential notation.

    ~,pF	Ditto but with exactly p decimal places.

    ~wF		Ditto but right adjusts in a field of w
    		columns.  If this can be done with as
		many decimal places as needed to express
		the precision, that number of decimal
		places will be used.  Otherwise as many
		decimal places as will fit in w columns
		is used.

    ~w,pF	Ditto but right adjusted in w columns
                with exactly p decimal places.

    ~A		Outputs a symbol or string with no
    		spaces before or after (and no escape
		or quote characters).

    ~wA		Ditto but outputs the string or symbol
    		RIGHT adjusted in w columns.

    ~w@A	Ditto but outputs the string or symbol
    		LEFT adjusted in w columns.

    ~C		Outputs a characteras an ASCII character
    		with no spaces before or after.

    ~%		Outputs a line feed.
    		

*most-negative-fixnum*
*most-positive-fixnum*
*most-negative-double-float*
*most-positive-double-float*

    These are the maximum and minimum numbers that can
    be stored respectively in a `fixnum' or `double'.

pi

    The mathematical constant PI.


File:		c
Author:		Bob Walton <walton@seas.harvard.edu>
Date:		See top of file.

The authors have placed this file in the public domain;
they make no warranty and accept no liability for this
file.

RCS Info (may not be true date or author):

    $Author: walton $
    $Date: 2013/02/13 13:30:57 $
    $RCSfile: commonlisp,v $
    $Revision: 1.11 $

sbcl --eval '(setf *evaluator-mode* :interpret)' --load reverser.lsp <sample.in

File:		commonlisp
Author:		Bob Walton <walton@deas.harvard.edu>
Date:		See top of file.

The authors have placed this file in the public domain;
they make no warranty and accept no liability for this
file.

RCS Info (may not be true date or author):

    $Author: walton $
    $Date: 2013/02/13 13:30:57 $
    $RCSfile: commonlisp,v $
    $Revision: 1.11 $
