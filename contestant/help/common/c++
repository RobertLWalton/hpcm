C++ Help		    Wed Jan 16 20:16:21 EST 2013

C++ Language Program Structure 
--- -------- ------- ---------

Typical program structure including end of file detect-
ion, finding symbols such as `*' that end a string of
numbers, and debugging is:

    // Standard Libraries.

    #include <iostream>
    #include <iomanip>	 // ws
    #include <cstdio>	 // printf
    using std;

    // String and character computation.

    #include <cstring>   // strcmp, strcpy, ...
    #include <cctype>    // isalpha, islower, ...

    // Math and Number Limits.

    #include <cmath>     // M_PI, atan2, ...
    #include <climits>   // INT_MIN, INT_MAX, ...
    #include <cfloat>    // DBL_MIN, DBL_MAX

    // Debugging.

    #include <cassert>   // assert

    bool debug = false;
    #define dout    if ( debug ) cout
    #define dprintf if ( debug ) printf

    char line[81];
	// You can assume lines longer than 80 charac-
	// ters will not need to be read, UNLESS the
	// problem statement says otherwise.  You need 1
	// extra character for string ending '\0'.

    int main ( int argc, char * argv[] )
    {
	// argc == number of program arguments + 1.

	debug = ( argc > 1 );
	. . . .
	while ( cin.getline ( line, sizeof ( line ) ),
	        cin.good() )
	{
	    // Print test case name. */

	    cout << line << endl;

	    /* Read input. */

	    cin >> ...
	    . . . . .

	    // Read a string of integers ending in `*'.
	    //
	    while ( cin >> ..., cin.good() )
	    {
	       . . . . .
	    }
	    cin.clear();
		// After returning a false value for
		// cin.good(), we MUST cin.clear()
		// to continue reading.

	    // Skip `*' and preceding whitespace.
	    //
	    char c;
	    cin >> ws >> c;
	    assert ( c == '*' );

	    . . . . .

	    // After reading test case data with cin,
	    // input will be just before the line feed
	    // at the end of the test case data.  This
	    // must be skipped or else it will be
	    // erroneously read as an empty next test
	    // case name.

	    cin.getline ( line, sizeof ( line ) );
		// The line read here consists of just a
		// line feed and is discarded.
	    assert ( line[0] == 0 );

	    // Compute.

	    dout << ... << endl;  // Print if debug.
	    dprintf ( ... );      // Print if debug.
	    . . . . .

	    // Output.

	    cout << ... << endl;
	    printf ( ... );
	}

	// Return 0 from `main' to tell system there
	// is no error.
	//
	return 0;

    }


Occasionally one has a conflict with some name defined
in the `#include's.  E.g., you may have trouble naming a
global variable `time'.   To fix this, change the name
of your variable.  A simple way of doing this is to put
the following right after the `#include's:

	#define time Time


Input
-----

Input is read from the standard input `cin'; you MUST
NOT open any file for input.

Test cases begin with a test case name line that is
read by the first `getline'.  When any input method call
fails, `cin.good()' becomes false, so the `while' loop
test consists of `cin.getline ( ... ), cin.good()' and
is true if and only the `cin.getline ( ... )' succeeded.
Thus the outer loop above processes one test case at a
time.  As soon as the test case name is successfully
read into `line', it is printed by `cout << line <<
endl'.  All test case name lines are 80 characters or
less, so `line' has enough room for 80 characters plus
the string ending '\0' supplied by `cin.getline'.

After reading and printing the test case name line, the
rest of the test case data is read with `cin >>'.  This
data may consist of numbers, perhaps with a few
characters like `*' thrown in to indicate the end of a
sequence of numbers.  The lines containing numbers may
be very long, so they should be read one number at a
time with `cin >>', and NOT read in first with 
`cin.getline'.  A `*' may be detected by looking at
`cin.good()' which will be true if a number was success-
fully read by `cin >>' and false if it was not because
the next non-whitespace character in the input was, say,
a `*'.  If this last is the case, then you must skip
the `*', which is done by the `cin >> ws >> c' that
skips first the whitespace between the last number read
and the input `*', and then skips the input `*'.

See the `summer' demonstration problem solution which
reads numbers.

Sometimes a problem will specifically ask you to read
lines to be processed as character strings, in which
case use `cin.getline' and be sure your line buffer is
long enough.

For some problems there are no test case name lines but
instead each test case has one input line containing
text and one output line containing text.  For these
the test case input line is read the same way as the
test case name line is read above.

See the `reverser' demonstration problem solution which
reads text lines.


Output
------

Output is written to the standard output `cout'; you
MUST NOT open any file for output; you MUST NOT write to
the standard error output, `cerr'.

Output can be written with `cout << ... << endl'.  Out-
put that has special formating requirements may be
written with `printf'.  Some `printf' formats that may
be useful are "%.3f" to print a double with exactly 3
decimal places in as few columns as possible, "%10.3f"
to print the double right adjusted in 10 columns, "%10s"
to print a string right adjusted in 10 columns, and
"%-10s" to print a string LEFT adjusted in 10 columns.
Here the numbers 3 and 10 are merely representative, and
can be replaced by any other non-zero positive integers.

See the `summer' demonstration problem solution which
outputs floating point `double's using printf.


Debugging
---------

When your program is executed by the judge, it will
NOT be passed ANY arguments.  A standard debugging
technique is to output extra debugging information if
and only if your program is passed an argument.

The above program defines `debug' to be true if and only
if the program is called with one or more arguments, and
defines dout (or dprintf) to do what cout (or printf)
does if and only if `debug' is true.  Thus dout and
dprintf can be used to print debugging information.

Debugging is best done with information printed by
`dout' and `dprintf', and not with a debugger like
`gdb'.  The exception is debugging programs that crash
or go into an infinite loop, which is best done with a
debugger like `gdb'.  See `help gdb' for how to use
`gdb' on programs that crash or go into an infinite
loop.

It is also a good idea to use `assert' statements
to check that assumptions you have made are valid during
actual program execution.  For example, if you are
certain that `cin >> c' should read a `*', then follow
this with

	assert ( c == '*' );

See the `reverser' and `summer' demonstration problem
solutions for uses of dout, dprintf, and assert.


Function and Macro Synopsis
-------- --- ----- --------

You can get full documentation of the functions
mentioned above plus other useful information by using
the UNIX commands:

	man 3 printf
	man assert
	man math.h
	man limits.h
	man float.h

and looking for web documentation for

	istream::operator>>
	istream::getline
	istream::good
	istream::clear
	iomanip::ws
	ostream::operator<<
	ostream::endl

The following is an extract from `man' and web pages of
details needed to use the functions mentioned above, and
also a few numeric constants.  Here we assume you
already know something about how to use `cin', `cout',
and `printf', so we do not have to explain them from
scratch.

Note that an `int' is guaranteed to be at least 32 bits
and a `long long int' is guaranteed to be at least 64
bits.  Floating point computations should always be done
using `double's, and NOT `float's, to avoid having too
little precision.

int i; long long li; double d; char name[1000];
cin >> i >> li >> d >> name
cin.good()
cin.clear()
    cin >> v skips whitespace and reads a value into v
    provided that one or more characters after the
    whitespace can be interpreted as a value for v.  For
    a char array like `name', any string of non-white-
    space characters is considered to be a value.  After
    successfully reading into v, cin.good() will be
    true.  After unsuccessfully reading into v, v will
    not be changed and flags in cin will be set so
    cin.good() returns false, but even in this case
    whitespace will be skipped.  When cin is set so
    cin.good() returns false, attempts to read more
    input will see an end of file.  To clear cin from
    this state so more input can be read, call
    cin.clear().

char c; cin >> c
    Similar to the above except that no whitespace is
    skipped and the only failure possible would be the
    case where cin.good() returns false before the
    cin >> c.

cin >> ws
    This just skips any whitespace in the input.  It
    is mostly of use in the context of wanting to read
    just the next non-whitespace character.

cin.getline ( char * buffer, sizeof ( buffer ) )
    Read a line into the buffer, assuming the line plus
    a string terminating '\0' will fit into the buffer.
    Fails if cin is at the end of file position, in
    which case cin is set so that cin.good() returns
    false.

int i; long long li; double d; char name[1000]; char c;
cout << i << li << d << name << "..." << c
    cout << v outputs v.  Strings are '\0' terminated
    and the '\0' is not output.  The output of numbers
    does not output any supperfluous characters, and
    may output scientific notation for floating point
    numbers. If you want to format output more
    precisely, use printf.

cout << endl
    Output an end of line.

int printf ( const char * format, ... )

    Format can contain the following directives, in
    in which W and P stand for sequences of decimal
    digits, where W is used for `widths' and P for
    `precisions':

    %d		Outputs an `int' as a decimal integer
    		with no spaces before or after.

    %Wd		Outputs an `int' as a decimal integer
    		right adjusted in W columns.

    %lld	Outputs a `long long int' as a decimal
    		integer with no spaces before or after.

    %Wlld	Outputs a `long long int' as a decimal
    		integer right adjusted in W columns.

    %f		Outputs a `double' as a floating point
    		number with 6 decimal places and no
		spaces before or after.

    %.Pf	Ditto but with P decimal places instead
    		of 6 decimal places.

    %Wf		Outputs a `double' as a floating point
    		number with 6 decimal places right
		adjusted in W columns.

    %W.Pf	Ditto but with P decimal places instead
    		of 6 decimal places.

    %s		Outputs a `const char *' or `char *'
    		string with no spaces before or after.

    %Ws		Ditto but outputs the string RIGHT
    		adjusted in W columns.

    %-Ws	Ditto but outputs the string LEFT
    		adjusted in W columns.

    %c		Outputs a `char' as an ASCII character
    		with no spaces before or after.
    		

INT_MAX, INT_MIN, LLONG_MAX, LLONG_MIN, DBL_MAX, DBL_MIN

    These are the maximum and minimum numbers that can
    be stored respectively in an `int', `long long int',
    or `double'.  The integer values are from `climits'
    and the floating point values from `cfloat'.

M_PI, M_E

    The mathematical constants PI and e from cmath.


Writing Your Own << And >> Operators
------- ---- --- -- --- -- ---------

It is often convenient to define your own << operator
to output something.  Some examples are:

    ostream & operator <<
	    ( ostream & out, mytype & value )
    {
	. . .
	out << . . .
	. . .
	return out;
    }

Suppose you want to output integers in a distinctive
format.  A simple way is

    struct myformat {
        int value;
	myformat ( int value ) : value ( value ) {}
    };
    ostream & operator <<
	    ( ostream & out, myformat s )
    {
    	out << ( ... s.value ... );
	. . .
	return out;
    }
    . . .
    cout << myformat ( 99 );

Here we have invented a typed structure to encapsulate
the value when it is to be printed.  Note the argument
to << may NOT be `myformat & s' because here s is not
constant, and in use the `myformat' value is a temporary
and temporaries are read-only.  However, the argument
may be `const myformat & s'.

Input operators can be define by:

    istream & operator >>
	    ( istream & in, mytype & value )
    {
	. . .
	in >> . . .
	. . .
	return in;
    }


STL API Documentation
--- --- ------------

Standard Template Library (STL) API documentation is
usually available on-line during a formal contest.  The
command to access it is:

	stlhelp

In a formal contest, you should NOT use other means to
access such documentation, as using the internet is a
violation of formal contest rules.



File:		c++
Author:		Bob Walton <walton@deas.harvard.edu>
Date:		See top of file.

The authors have placed this file in the public domain;
they make no warranty and accept no liability for this
file.

RCS Info (may not be true date or author):

    $Author: walton $
    $Date: 2013/01/17 09:49:50 $
    $RCSfile: c++,v $
    $Revision: 1.16 $
