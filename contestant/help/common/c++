C++ Help		    Fri Mar  3 12:58:14 EST 2006

Include Files
------- -----

The following are typical includes in modern C++:

	#include <iostream>
	#include <iomanip>
	#include <cmath>
	#include <cstring>
	#include <cctype>
	#include <cassert>

	using namespace std;

It is common to have a conflict with some name defined
in the includes.  E.g., you may have trouble naming a
global variable `time'.   To fix this, change the name
of your variable.  A simple way of doing this is to put
the following right after the includes:

	#define time Time

If you want your code to last as include files change,
replace the using statement above with statements such
as the following:

	using std::cin;
	using std::cout;
	using std::endl;
	using std::ws;
	using std::setprecision;
	using std::ios;



Detecting End of File
--------- --- -- ----

Typical program structure including end of file detect-
ion is:

	int main ( )
	{
	    . . . .
	    while ( true )
	    {
		. . . . .
		cin >> x >> y >> z;
		if ( cin.eof() ) break;
		. . . . .
	    }
	}

After reading with `cin >> ...', cin.eof() is true
if and only if an end of file has occurred on cin.
No other error indication is given.

Many problems require you to detect certain input
values as end of data markers, instead of looking for
eof.  E.g., the problem might specify that x, y, and z
are all 0 to indicate end of data, in which case you
replace the above `if' statement by

	if ( x == 0 && y == 0 && z == 0 ) break;


Numeric Constants and Rounding
------- --------- --- --------

The following code imports useful constants, which are
the minimum and maximum values of various number types,
and the values of PI and E.

    INCLUDE			IMPORTS

    #include <climits>		int INT_MAX;
				int INT_MIN;
				long LONG_MAX;
				long LONG_MIN;
				unsigned long ULONG_MIN;

    #include <cfloat>		double DBL_MAX;
				double DBL_MIN;
				float FLT_MAX;
				float FLT_MIN;

    #include <cmath>		double M_PI;
				double M_E;



Fixed Width Output
------------------

The following is useful for producing fixed width format
numbers.

To output a right adjusted integer I in N columns use:

		cout << setw (N) << I;

Setw sets the width of the next output; but each output
resets this to 0 so you must reset the width just before
outputting each N column number.  The width of 0 means
`use as many columns as necessary'.

To output a right adjusted floating point number F in N
columns with P decimal places use:

    cout << setiosflags ( ios::showpoint | ios::fixed);
    cout << setprecision (P);
    cout << setw (N) << F;

The precision P and flags do not get reset after the
number is output.  They can be reset to defaults by

   cout << resetiosflags ( ios::showpoint | ios::fixed);
   cout << setprecision (6);

To use setw etc. you need to:

    #include <iomanip.h>


Inputting Lines
--------- -----

To input a line use the getline function, as in 

	char buffer [SOME_SIZE];
	cin.getline ( buffer, sizeof ( buffer ) );

The new line at the end of the line is NOT stored in the
buffer; a NUL character is stored at the end of the line
in the buffer.  Do NOT try to use the `get' function in
place of `getline': its behavior is similar but it does
NOT skip over the new line in the input stream, and
therefore after reading the first line it reads empty
lines forever.

You can parse a line after it is input by code such as

	#include <sstream>
	using std::istringstream;

	istringstream in ( buffer );

Here in.eof() will be true at the end of the string.
This is likely to be a problem because immediately after
reading a number at the end of the buffer in.eof() will
be true.  To compensate, check for eof BEFORE reading
the next value by first executing in >> ws, then testing
in.eof(), and only then reading the next value.


Character Input
--------- -----

You can use the following for character input:

	int c = cin.get();
	int c = cin.peek();

These return EOF on end of file.

File:		c++
Author:		Bob Walton <walton@deas.harvard.edu>
Date:		See top of file.

The authors have placed this file in the public domain;
they make no warranty and accept no liability for this
file.

RCS Info (may not be true date or author):

    $Author: hc3 $
    $Date: 2006/03/03 18:05:55 $
    $RCSfile: c++,v $
    $Revision: 1.8 $
