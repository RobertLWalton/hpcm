#!/bin/sh
#
# Setup prototype account home directory.
#
# File:		SETUP_PROTOTYPE
# Author:	Bob Walton <walton@deas.harvard.edu>
# Date:		Thu Sep 20 23:48:27 EDT 2001
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: hc3 $
#   $Date: 2001/09/21 03:35:25 $
#   $RCSfile: SETUP_PROTOTYPE,v $
#   $Revision: 1.13 $

# List of files always added implicitly to .hpcm_keep
# and .hpcm_exclude.  Note each line feed is to be
# followed by a tab.
#
always='home bin .hpcm_contest
	.hpcm_keep .hpcm_exclude .snapshot'

# List of files and directories to exclude from tar
# and that are NOT to be moved to home.
#
exclude=".Xauthority .history"

# Default list of files and directories that are NOT
# to be moved to home but are to be included in tar.
#
keep=".ssh .procmailrc"

# Process first argument.
#
case "$1" in

    * )
	echo "
~JJJ/hpcm/contestant/bin/SETUP_PROTOTYPE
or
SETUP_PROTOTYPE

    Sets up the prototype account home directory,
    ~/home.  The current account must be a prototype
    contestant account.  The first form of invocation
    must be used the first time SETUP_PROTOTYPE is
    called, but the second form can be used thereafter
    as long as the ~JJJ/hpcm/contestant/bin directory
    remains.

    The specific procedure for setting up a prototype
    contestant account is as follows:

    1. Install HPCM in some account, say the judging
       account JJJ: see hpcm/judge/bin/installing_hpcm.
       We will assume it is installed as ~JJJ/hpcm.

    2. Make a brand new account, which we will refer to
       as ~PPP, which is to be the contestant prototype
       account.

    3. Working in the ~PPP account execute:

	cd
	cp ~JJJ/hpcm/contestant/procmailrc .procmailrc
	chmod 600 .procmailrc

       This installs the .procmailrc file needed by
       informal contests.

    4. If you want to use .ssh to log into contestant
       accounts, prepare an appropriate ~JJJ/.ssh/
       identity.pub file in the ~JJJ account, and then
       working in the ~PPP account execute:

	cd
	mkdir .ssh
	chmod 700 .ssh
	scp JJJ@localhost:.ssh/identity.pub \\
	    .ssh/authorized_keys
	chmod 600 .ssh/authorized_keys

       The scp command will request that you type the
       password of JJJ.

       This sets up the PPP account so that ssh from the
       JJJ account can log into the PPP account without
       knowing the password of the PPP account.

    5. In the PPP account edit .cshrc, adding:

    	set path=(~/.hpcm_contest/bin \$path)
        alias ll -lL
	set autologout=180

      Then edit .profile (or .bash_profile) by adding:

        PATH=\"\$HOME/.hpcm_contest/bin:\$PATH\"

      You may want to edit other files in the prototype
      account to make them suitable for contestant
      accounts.

    6. In the PPP account execute:

    	~JJJ/hpcm/contestant/bin/SETUP_PROTOTYPE

       The main effects of this are to move files like
       .cshrc to home/.cshrc and make a tar file named
       home/setup.tar that is used when TRASH_ACCOUNT
       is run in a contestant directory to initialize
       the files of the contestant directory.  See below
       for details.

    This is the last step.  After this step, you can
    set up contestant accounts, and run TRASH_ACCOUNT
    in each contestant account.  This will copy files
    from the prototype account into the contestant
    account, and will link other files indirectly
    through the contest directory to copies of the
    files that are now in the ~PPP/home directory.

    Prototype ~/home directories are typically shared
    among many different contests, which may also have
    different judging accounts JJJ.  For each contest,
    the file ~JJJ/contest_foo/home is symbolically
    linked to ~PPP/home, and in each contestant account,
    the file .hcpm_contest is symbolically linked to
    ~JJJ/contest_foo.  Thus for each contestant account,
    .hpcm_contest/home is effectively linked to ~PPP/
    home.  Contestant accounts are set up so that files
    like .cshrc are symbolically linked to .hpcm_
    contest/home/.cshrc, thus effectively linking them
    to ~PPP/home/.cshrc.  What SETUP_PROTOTYPE does is
    move ~PPP/.cshrc to ~PPP/home/.cshrc and make a
    symbolic link from ~PPP/.cshrc to .hcpm_contest/
    home/.cshrc, with this symbolic link being copied
    via the setup.tar file and TRASH_ACCOUNT to each
    contestant account.

    If you need to make changes in the prototype account
    files, you should do the following:

    C1.  If you need to change a file like .cshrc, you
         will find that it is now in ~PPP/home/.cshrc.
	 Simply edit this file in the PPP account.  You
	 can do this anytime, even AFTER contest
	 accounts have been set up.  This is because
	 contestant account .cshrc is symbolically
	 linked to ~PPP/home/.cshrc.  Note, however,
	 that if a contestant has already logged in,
	 the change in .cshrc will have no effect until
	 the contestant logs out and relogs in.

    C2.  If you need to change a file like .procmailrc,
         or .ssh/authorized_keys which has NOT been
	 moved to ~PPP/home because for security reasons
	 these files cannot be symbolically linked; or
	 if you need to add a file or delete a file, you
	 can do so in the PPP account, but you must then
	 execute

	 	SETUP_PROTOTYPE

	in the PPP account, and then rerun TRASH_ACCOUNT
	in each contestant account.

    C3. If you move the directory ~JJJ/hpcm/contestant/
        bin, then the next time you want to run SETUP_
	PROTOTYPE in the prototype account, you will
	have to execute

	 ~JJJ/newhpcm/contestant/bin/SETUP_PROTOTYPE

	instead of simply SETUP_PROTOTYPE.  This will
	relink the ~/bin directory in the prototype
	account.  This directory is NOT used in any way
	by the contestant accounts, so they are not
	affected by relinking ~/bin.


    In the remainder of this document we will describe
    in detail what SETUP_PROTOTYPE does.

    First, SETUP_PROTOTYPE does a \`cd' to the home
    directory of the current (prototype) account.

    Then SETUP_PROTOTYPE takes all ordinary files and
    directories that it finds in ~ (the prototype
    account home directory) and moves then to the
    ~/home/ directory.  For every file or directory
    foo moved, SETUP_PROTOTYPE links ~/foo to .hpcm_
    contest/home/foo.  There are some exceptions that
    are NOT moved, which are normally:

    	$keep
	$exclude
	$always

    After moving files and directories, SETUP_PROTOTYPE
    makes the following files in ~/home/:

    	empty.ls	Ls -a of empty account directory
			after all files are rm -f'ed.
	setup.tar	Tar file used to restore all
			files into a contestant account
			home directory after all files
			are rm -f'ed.
    	setup.ls	Ls -aR of contestant account
			home directory right after
			setup.tar is used to restore
			files to that directory.

    These files are to be used by TRASH_ACCOUNT to
    reinitialize the home directories of contestant
    accounts.

    The following files in ~ are normally NOT included
    in setup.tar (and not moved to ~/home):

        $exclude
	$always

    It is possible to change this list of files not in-
    cluded in setup.tar or moved to ~/home.  If the file
    ~/.hpcm_exclude is present, its contents replace
    the list of files just given, except that the files

    	$always

    are always implicitly added to the contents of
    ~/.hpcm_exclude.

    By default, the files

    	$keep

    are not moved to ~/home, but if not listed in
    ~/.hpcm_exclude, will be included in setup.tar.  But
    if the file ~/.hpcm_keep exists, the contents of
    this file replace this default list of files.

    SETUP_PROTOTYPE also manages permissions of ~/home
    and the things it contains.  It sets the permission
    of ~ to a+x and ~/home to a+rx, and sets the permis-
    sion of any file or directory moved to ~/home to
    a+r or a+rx depending upon whether the file or
    directory has u+x permissions.  It sets the per-
    mission of empty.ls, setup.tar, and setup.ls in
    ~/home to a+r.

    Whenever SETUP_PROTOTYPE runs, it links ~/.hpcm_
    contest in the prototype account home directory to
    \`.', so that ~/.cshrc will refer to ~/home/.cshrc
    and the prototype account will still work.  It also
    links ~/bin to the directory containing the SETUP_
    PROTOTYPE program if this directory beings with
    \`/', so after the above changes to .cshrc and
    .profile the contents of this bin directory will
    be in the PATH after login when you are in the
    prototype account.  Note that neither .hpcm_contest
    or bin are copied into the setup.tar file and
    therefore they are NOT transfered to contestant 
    accounts."

	exit 1
	;;
esac

# Change to this account's home directory.
#
cd

# Check that we are in fact in the home directory of
# our account.
#
if test `pwd` != "/home/`id -un`"
then
	echo Home directory is not "/home/`id -un`"
	exit 1
fi

# Make home.
#
if test ! -d ~/home
then
	do_nothing=
elif mkdir ~/home
then
	echo "mkdir ~/home"
else
	echo "ERROR in mkdir ~/home"
	exit 1
fi

if chmod 755 ~/home
then
	echo "chmod 755 ~/home"
else
	echo "ERROR in chmod 755 ~/home"
	exit 1
fi

if chmod a+x .
then
	echo "chmod a+x ."
else
	echo "ERROR in chmod a+x ."
	exit 1
fi


# Read ~/.hpcm_keep and ~/.hpcm_exclude if they exist.
#
if test -f .hpcm_keep
then
	keep=`cat .hpcm_keep`
fi
if test -f .hpcm_exclude
then
	exclude=`cat .hpcm_exclude`
fi

# List of files to be tarred:
#
files=

# Move everything in the home directory that is not a
# symbolic link already, except things listed in `keep',
# `exclude', or `always'.  Add everything to tar list
# that is not in `exclude' or `always'.
#
for i in .[^.]* *
do
	found=no
	for j in $exclude $always
	do
		if test "$i" = "$j"
		then
			found=yes
			break
		fi
	done

	if test $found = yes
	then
		continue
	fi

	files="$files $i"

	found=no
	for j in $keep
	do
		if test "$i" = "$j"
		then
			found=yes
			break
		fi
	done

	if test $found = yes
	then
		continue
	fi

	if test -L "$i"
	then
		continue
	fi

	if test ! -d "$i" -a ! -f "$i"
	then
		continue
	fi

        if test -r "$i"
	then
	    if chmod a+r "$i"
	    then
		    echo "chmod a+r $i"
	    else
		    echo ERROR in chmod a+r "$i"
		    exit 1
	    fi
	fi

        if test -x "$i"
	then
	    if chmod a+x "$i"
	    then
		    echo "chmod a+x $i"
	    else
		    echo ERROR in chmod a+x "$i"
		    exit 1
	    fi
	fi

	if mv "$i" ~/home
	then
		echo "moved $i to ~/home"
	else
		echo ERROR in mv "$i" ~/home
		exit 1
	fi

	if ln -s ".hpcm_contest/home/$i" "$i"
	then
		echo "linked $i to" \
		     ".hpcm_contest/home/$i"
	else
		echo ERROR in ln -s \
		     ".hpcm_contest/home/$i" "$i"
		exit 1
	fi
done

echo "Files to be tar'ed are:"
echo "   $files"
echo ""

# Link ~/.hpcm_contest to `.'.
#
rm -f .hpcm_contest

if ln -s . .hpcm_contest
then
	echo "linked .hpcm_contest to \`.'"
else
	echo "ERROR in ln -s . .hpcm_contest"
	exit 1
fi

# Link ~/bin to `dirname $0` if that begins with /
#
dir=`dirname $0`

case "$dir" in
    /*)
	rm -rf bin

	if ln -s $dir bin
	then
		echo "linked bin to $dir"
	else
		echo "ERROR in ln -s $dir bin"
		exit 1
	fi
    	;;
esac

# Create empty.ls.
#
rm -f ~/home/empty.ls

if (echo >~/home/empty.ls "."; \
    echo >>~/home/empty.ls ".."; \
    chmod a+r ~/home/empty.ls)
then
	echo "created ~/home/empty.ls"
else
	echo "ERROR in creating ~/home/empty.ls"
	exit 1
fi

# Create setup.tar.
#
rm -f ~/home/setup.tar
if (tar cf ~/home/setup.tar $files; \
    chmod a+r ~/home/setup.tar)
then
	echo "created ~/home/setup.tar"
else
	echo "ERROR in creating ~/home/setup.tar"
	exit 1
fi

# Create setup.ls
#
rm -f ~/home/setup.ls
if (ls -aR >~/home/setup.ls $files; \
    chmod a+r ~/home/setup.ls)
then
	echo "created ~/home/setup.ls"
else
	echo "ERROR in creating ~/home/setup.ls"
	exit 1
fi

exit 0
