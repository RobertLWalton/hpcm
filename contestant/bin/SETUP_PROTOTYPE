#!/bin/sh
#
# Setup prototype account home directory.
#
# File:		SETUP_PROTOTYPE
# Author:	Bob Walton <walton@deas.harvard.edu>
# Date:		Thu Sep 30 07:38:26 EDT 2010
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: walton $
#   $Date: 2010/09/30 11:38:53 $
#   $RCSfile: SETUP_PROTOTYPE,v $
#   $Revision: 1.26 $

# List of files added to `ls -a /etc/skel` that are
# not in `keep'.
#
include="NONE"

# List of files and directories to exclude from tar
# and NOT move to home.
#
exclude="NONE"

# List of files and directories that are NOT to be moved
# to home but are to be included in tar.
#
keep=".ssh .procmailrc .emacs"

# List of files and directories that are to be moved to
# home but NOT linked from ~ and NOT included in tar.
#
move="RCS"

# Process first argument.
#
case "$1" in

    -* )
	echo "
~JJJ/hpcm/contestant/bin/SETUP_PROTOTYPE
or
SETUP_PROTOTYPE

    Sets up the prototype account home directory,
    ~/home.  The current account must be a prototype
    contestant account.  The first form of invocation
    must be used the first time SETUP_PROTOTYPE is
    called, but the second form can be used thereafter
    as long as the ~JJJ/hpcm/contestant/bin directory
    remains.

    The specific procedure for setting up a prototype
    contestant account is as follows:

    1. Install HPCM in some account, say the judging
       account JJJ: see hpcm/judge/bin/installing_hpcm.
       We will assume it is installed as ~JJJ/hpcm.

    2. Make a brand new account, which we will refer to
       as ~PPP, which is to be the contestant prototype
       account.  It is very desirable for the name PPP
       to end with either \`-proto' or \`_proto' as then
       makecontest will find it automatically (see the
       -home option to makecontest).

    3. Working in the ~PPP account execute:

	cd
	cp ~JJJ/hpcm/contestant/bin/procmailrc \\
	   .procmailrc
	chmod 400 .procmailrc

       This installs the .procmailrc file needed by
       informal contests.

       Note that instead of doing this, you can put a
       .procmailrc file in the extra_setup.tar file
       specific to a particular contest.  See the doc-
       umentation of TRASH_ACCOUNT.  However, the
       .procmailrc file is itself NOT contest specific,
       so you might as well put it in the PPP account.

    4. If you want to use .ssh to log into contestant
       accounts, and for some reason you do not want
       to use a contest specific extra_setup.tar file,
       prepare an appropriate ~JJJ/.ssh/id_rsa.pub
       file in the ~JJJ account, and then working in
       the ~PPP account execute:

	cd
	mkdir .ssh
	chmod 700 .ssh
	scp JJJ@localhost:.ssh/id_rsa.pub \\
	    .ssh/authorized_keys
	rm -f .ssh/random_seed .ssh/known_hosts
	chmod 400 .ssh/authorized_keys

       The scp command will request that you type the
       password of JJJ.

       This sets up the PPP account so that ssh from the
       JJJ account can log into the PPP account without
       knowing the password of the PPP account.

       Your usage of ssh may differ from the norm in
       which case you will have to adjust the above.
       For example, if you use dsa keys instead of rsa
       keys change id_rsa above to id_dsa.

       It is better, however, use the extra_setup.tar
       file documented by TRASH_ACCOUNT to get the same
       effect, as then ssh keys can be contest specific,
       and NOT putting them in the PPP account permits
       the PPP account to be non-contest-specific.  See
       the -ssh option to makecontest.

    5. In the PPP account edit .cshrc, adding:

    	   set path=(~/.hpcm_contest/bin \$path)

       or
           setenv PATH \\
	       \"\${PATH}:\${HOME}/.hpcm_contest/bin\"

       and

	   set autologout=600
       or
	   unset autologout

       and

	   alias ll='ls -lL'
           alias help='~/.hpcm_contest/bin/help'

       Then edit .bashrc by adding:

           PATH=\"\$PATH:\$HOME/.hpcm_contest/bin\"
	   alias ll='ls -lL'
           alias help='~/.hpcm_contest/bin/help'

       You may want to edit other files in the prototype
       account to make them suitable for contestant
       accounts.

    6. In the PPP account execute:

    	~JJJ/hpcm/contestant/bin/SETUP_PROTOTYPE

       The main effects of this are to move files like
       .cshrc to home/.cshrc and make a tar file named
       home/setup.tar that is used when TRASH_ACCOUNT
       is run in a contestant directory to initialize
       the files of the contestant directory.  See below
       for details.

    This is the last step.  After this step, you can
    set up contestant accounts, and run TRASH_ACCOUNT
    in each contestant account.  This will copy files
    from the prototype account into the contestant
    account, and will link other files to copies of the
    files that are now in the ~PPP/home directory.

    Prototype ~/home directories are typically shared
    among many different contests, which may also have
    different judging accounts JJJ.  For each contest,
    the name ~JJJ/contest_foo/home is symbolically
    linked to ~PPP/home, and in each contestant account,
    the file .hpcm_contest is symbolically linked to
    ~JJJ/contest_foo.  Thus for each contestant account,
    .hpcm_contest/home is effectively linked to ~PPP/
    home.  Contestant accounts are set up so that files
    like .cshrc are symbolically linked to .hpcm_
    contest/home/.cshrc, thus effectively linking them
    to ~PPP/home/.cshrc.  What SETUP_PROTOTYPE does is
    move ~PPP/.cshrc to ~PPP/home/.cshrc and make a
    symbolic link from ~PPP/.cshrc to .hpcm_contest/
    home/.cshrc, with this symbolic link being copied
    via the setup.tar file and TRASH_ACCOUNT to each
    contestant account.

    If you need to make changes in the prototype account
    files, you should do the following:

    C1.  If you need to change a file like .bashrc, you
         will find that it is now in ~PPP/home/.bashrc.
	 Simply edit this file in the PPP account.  You
	 can do this anytime, even AFTER contest
	 accounts have been set up.  This is because
	 contestant account .bashrc is symbolically
	 linked to ~PPP/home/.bashrc.  Note, however,
	 that if a contestant has already logged in,
	 the change in .bashrc will have no effect until
	 the contestant logs out and relogs in.

    C2.  If you need to change a file like .procmailrc,
         or .ssh/authorized_keys which has NOT been
	 moved to ~PPP/home (because for security rea-
	 sons these files cannot be symbolically link-
	 ed), or if you need to add a file or delete a
	 file, you can do so in the PPP account, but you
	 must then execute

	 	SETUP_PROTOTYPE

	in ~PPP to remake ~PPP/home/setup.tar, and then
	rerun TRASH_ACCOUNT in each contestant account.

    C3. If you move the directory ~JJJ/hpcm/contestant/
        bin, then the next time you want to run SETUP_
	PROTOTYPE in the prototype account, you will
	have to execute

	 ~JJJ/hpcm/contestant/bin/SETUP_PROTOTYPE

	instead of simply SETUP_PROTOTYPE.  This will
	relink the ~/bin directory in the prototype
	account.  This directory is NOT used in any way
	by the contestant accounts, so they are not
	affected by relinking ~/bin.


    In the remainder of this document we will describe
    in detail what SETUP_PROTOTYPE does.

    First, SETUP_PROTOTYPE does a \`cd' to the home
    directory of the current (prototype) account.

    Then SETUP_PROTOTYPE takes all ordinary files and
    directories that it finds in etc/skel and moves
    them to the ~/home/ directory.  For every file or
    directory foo moved, SETUP_PROTOTYPE links ~/foo
    to .hpcm_contest/home/foo.  All these links are
    included in the ~/home/setup.tar file that is used
    to initialize contestant account home directories.

    This rule has the following exceptions controlled
    by the following lists:

      List     List File      Default

      include  .hpcm_include  $include

      exclude  .hpcm_exclude  $exclude

      keep     .hpcm_keep     $keep

      move     .hpcm_move     $move

    In each case, if the list file exists it is read
    and the files listed in it become the list.  Other-
    wise the files listed under \`Default' are the list.

    First, instead of just considering the files in
    /etc/skel, these files plus those in the include
    and keep lists minus any files in the exclude list
    are considered.  All these files not in the keep
    list are moved to ~/home, linked in ~, and the links
    are put in setup.tar.

    Second, files in the keep list but not the exclude
    list are not moved to ~/home and the files are left
    unlinked and untouched in ~.  But these files are
    put in setup.tar.

    Third, files in the move list are moved to ~/home
    but no link is made in ~ and these files are NOT
    included in setup.tar.  The exclude list has NO
    affect on the move list.

    After moving files and directories, SETUP_PROTOTYPE
    makes the following files in ~/home/:

    	empty.ls	Ls -a of empty account directory
			after all files are rm -f'ed.
	setup.tar	Tar file used to restore all
			files into a contestant account
			home directory after all files
			are rm -f'ed.
    	setup.ls	Ls -aR of contestant account
			home directory right after
			setup.tar is used to restore
			files to that directory.

    These files are to be used by TRASH_ACCOUNT to
    reinitialize the home directories of contestant
    accounts.

    However, to be more precise, temporary versions
    of these files are made in empty.ls+, setup.tar+,
    and setup.ls+, and then only if these are different
    from any previous versions are they moved into
    position.

    SETUP_PROTOTYPE also manages permissions of ~/home
    and the things it contains.  It sets the permission
    of ~ to a+x and ~/home to a+rx, and sets the permis-
    sion of any file or directory moved to ~/home to
    a+r or a+rx depending upon whether the file or
    directory has u+x permissions.  It sets the per-
    mission of empty.ls, setup.tar, and setup.ls in
    ~/home to a+r.

    Whenever SETUP_PROTOTYPE runs, it links ~/.hpcm_
    contest in the prototype account home directory to
    \`.', so that ~/.bashrc will refer to ~/home/.bashrc
    and so forth and the prototype account will still
    work.  It also links ~/bin to the directory contain-
    ing the SETUP_PROTOTYPE program if this latter
    directory beings with \`/' and ~/bin is not an
    ordinary directory, so after the above changes to
    .cshrc and .bashrc the contents of this bin direc-
    tory will be in the PATH after login when you are in
    the prototype account.  Note that neither .hpcm_
    contest or bin are copied into the setup.tar file
    and therefore they are NOT transferred to contestant
    accounts."

	exit 1
	;;
esac

# Change to this account's home directory.
#
cd

# Check that we are in fact in the home directory of
# our account.
#
if test `pwd` != "/home/`id -un`"
then
	echo Home directory is not "/home/`id -un`"
	exit 1
fi

# Make home.
#
if test -d ~/home
then
	do_nothing=
elif mkdir ~/home
then
	echo "mkdir ~/home"
	if chmod 755 ~/home
	then
		echo "chmod 755 ~/home"
	else
		echo ERROR in "chmod 755 ~/home"
		exit 1
	fi
else
	echo ERROR in "mkdir ~/home"
	exit 1
fi


if chmod a+x .
then
	echo "chmod a+x ."
else
	echo ERROR in "chmod a+x ."
	exit 1
fi


# Read ~/.hpcm_{include,exclude,keep,move} if they
# exist.
#
for list in include exclude keep move
do
    if test -e .hpcm_$list
    then
        eval "$list=\"\`cat .hpcm_$list\`\""
    fi
done

# List of files to be tarred:
#
files=

# List of files to be linked or kept that do not exist
# in ~.
#
non_existent=

# Move or keep files or directories listed in /etc/skel,
# include list, and keep list, unless they are listed in
# exclude list, or are . or ...   Put these files in the
# list of files to be tar'ed or if they do not exist put
# them in the non_existent list.  Do not process any
# file twice (in case it is listed twice in /etc/skel,
# include, and keep lists).
#
for i in `ls -a /etc/skel` $include $keep
do
	found=no
	for j in $exclude $files $non_existent . ..
	do
		if test "$i" = "$j"
		then
			found=yes
			break
		fi
	done

	if test $found = yes
	then
		continue
	fi

	if test ! -L "$i" -a ! -e "$i"
	then
		non_existent="$non_existent $i"
		continue
	fi

	files="$files $i"

	found=no
	for j in $keep
	do
		if test "$i" = "$j"
		then
			found=yes
			break
		fi
	done

	if test $found = yes
	then
		if test -L "$i" -a \
		        "`readlink "$i"`" \
			= ".hpcm_contest/home/$i"
		then
			echo ERROR: "$i" is supposed \
			     to be kept but it is \
			     already
			echo "      " linked to \
		             ".hpcm_contest/home/$i"
			echo "      " perhaps you \
		             should mv it back to "~"
			exit 1
		fi

		continue
	fi

	if test -L "$i" -a \
		  "`readlink "$i"`" \
		= ".hpcm_contest/home/$i"
	then
		continue
	fi

	if test -L "$i"
	then
		echo ERROR: "$i" is a symbolic link \
		            but not to \
			    ".hpcm_contest/home/$i"
		exit 1
	fi

	if test ! -d "$i" -a ! -f "$i"
	then
		echo ERROR: "$i" is NOT a directory or \
		            ordinary file
		exit 1
	fi

	if test -L ~/home/"$i" -o -e ~/home/"$i"
	then
		echo ERROR: "~/home/$i" already exists
		exit 1
	fi

	if mv "$i" ~/home
	then
		echo "moved $i to ~/home"
	else
		echo ERROR in "mv $i ~/home"
		exit 1
	fi

        if test -r ~/home/"$i"
	then
	    if chmod a+r ~/home/"$i"
	    then
		    echo "chmod a+r ~/home/$i"
	    else
		    echo ERROR in "chmod a+r ~/home/$i"
		    exit 1
	    fi
	fi

        if test -x ~/home/"$i"
	then
	    if chmod a+x ~/home/"$i"
	    then
		    echo "chmod a+x ~/home/$i"
	    else
		    echo ERROR in "chmod a+x ~/home/$i"
		    exit 1
	    fi
	fi

	if ln -s ".hpcm_contest/home/$i" "$i"
	then
		echo "linked $i to" \
		     ".hpcm_contest/home/$i"
	else
		echo ERROR in \
		  "ln -s .hpcm_contest/home/$i $i"
		exit 1
	fi
done

# Move the stuff in the move list.
#
for i in $move
do

	if test -L "$i"
	then
		echo ERROR: "$i" is a symbolic link
		exit 1
	fi

	if test ! -e "$i"
	then
		continue
	fi

	if test ! -d "$i" -a ! -f "$i"
	then
		echo ERROR: "$i" is not a directory \
		            or ordinary file
		exit 1
	fi

	if test -L ~/home/"$i" -o -e ~/home/"$i"
	then
		echo ERROR: "~/home/$i" \
			    already exists
		exit 1
	fi

	if mv "$i" ~/home
	then
		echo "moved $i to ~/home"
	else
		echo ERROR in "mv $i ~/home"
		exit 1
	fi

	continue
done

echo "Files to be tar'ed are:"
echo "   $files"
echo ""

# Create empty.ls+.
#
rm -f ~/home/empty.ls+

if (echo >~/home/empty.ls+ "."; \
    echo >>~/home/empty.ls+ ".."; \
    chmod a+r ~/home/empty.ls+)
then
	do_nothing=
else
	echo "ERROR in creating ~/home/empty.ls+"
	exit 1
fi

# Create setup.tar+.
#
rm -f ~/home/setup.tar+
if (tar cf ~/home/setup.tar+ $files; \
    chmod a+r ~/home/setup.tar+)
then
	do_nothing=
else
	echo "ERROR in creating ~/home/setup.tar+"
	exit 1
fi

# Create setup.ls+
#
if ( rm -rf ~/home/setup.ls+ ~/SETUP_PROTOTYPE.tmp; \
     mkdir ~/SETUP_PROTOTYPE.tmp; \
     cd ~/SETUP_PROTOTYPE.tmp; \
     tar xf ../home/setup.tar+; \
     ls -aR >../home/setup.ls+; \
     cd; \
     rm -rf ~/SETUP_PROTOTYPE.tmp; \
     chmod a+r ~/home/setup.ls+ )
then
	do_nothing=
else
	echo "ERROR in creating ~/home/setup.ls+"
	exit 1
fi

for f in empty.ls setup.tar setup.ls
do
	if test -e ~/home/$f
	then
	    if cmp -s ~/home/$f+ ~/home/$f
	    then
		    echo no change in ~/home/$f
		    rm -f ~/home/$f+
		    continue
	    fi
	fi

	if test -e ~/home/$f-
	then
	    rm -f ~/home/$f--
	    if mv ~/home/$f- ~/home/$f--
	    then
		echo "mv ~/home/$f- ~/home/$f--"
	    else
		echo ERROR in \
		  "mv ~/home/$f- ~/home/$f--"
		exit 1
	    fi
	fi

	if test -e ~/home/$f
	then
	    if mv ~/home/$f ~/home/$f-
	    then
		echo mv ~/home/$f ~/home/$f-
	    else
		echo ERROR in \
		  "mv ~/home/$f ~/home/$f-"
		exit 1
	    fi
	fi

	if mv ~/home/$f+ ~/home/$f
	then
		echo "mv ~/home/$f+ ~/home/$f"
	else
		echo ERROR in \
		     "mv ~/home/$f+ ~/home/$f"
		exit 1
	fi
done

# Link ~/.hpcm_contest to `.'.
#
if test -L .hpcm_contest -a \
	   "`readlink .hpcm_contest`" = "."
then
	do_nothing=
else
    rm -f .hpcm_contest

    if ln -s . .hpcm_contest
    then
	    echo "linked .hpcm_contest to \`.'"
    else
	    echo ERROR in "ln -s . .hpcm_contest"
	    exit 1
    fi
fi

# Link ~/bin to `dirname $0` if that begins with /
# but does not begin with `$HOME/'.
#
dir=`dirname $0`

case "$dir" in
    $HOME/*)
	# Do nothing
    	;;
    /*)
	if test -L bin -a "`readlink bin`" = "$dir"
	then
		do_nothing=
	else
		if test -L bin
		then
		    rm -f bin
		fi

		if test -e bin
		then
		    echo "ERROR: bin not a link"
		    exit 1
		fi

		if ln -s "$dir" bin
		then
			echo "linked bin to $dir"
		else
			echo ERROR in "ln -s $dir bin"
			exit 1
		fi
	fi
    	;;
esac

if test "non_existent" != ""
then
	echo WARNING: the following do NOT exist in "~"
	echo "        " and cannot be linked or kept:
	echo "        " $non_existent
fi

exit 0
