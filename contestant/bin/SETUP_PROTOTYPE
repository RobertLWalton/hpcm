#!/bin/sh
#
# Setup prototype account and contest/home directory.
#
# File:		SETUP_PROTOTYPE
# Author:	Bob Walton <walton@deas.harvard.edu>
# Date:		Sun Dec 10 06:26:25 EST 2000
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: hc3 $
#   $Date: 2000/12/10 11:23:59 $
#   $RCSfile: SETUP_PROTOTYPE,v $
#   $Revision: 1.6 $

# Default list of files and directories that are NOT
# to be moved to $contest/home.
#
keep=".ssh .snapshot .Xauthority .history .procmailrc"

# Change to the accounts home directory.
#
cd

# Process first argument.
#
case "$1" in

    "" )
    	if test -x ${HOME}/.hpcm_contest
	then
	    contest=`ls -l ${HOME}/.hpcm_contest`
	    contest=`expr "$contest" : \
	                  '.*-> *\([^ ]*\) *$' `
	else
	    echo ${HOME}/.hpcm_contest does not exist
	    exit 1
	fi
	;;

    -* )
	echo "
contest/bin/SETUP_PROTOTYPE contest
or
SETUP_PROTOTYPE

    Sets up the contest/home directory and the current
    account.  The current account must be a prototype
    contestant account.

    The prototype account should initially be a brand
    new account in which the first form of the call
    to SETUP_PROTOTYPE given above is executed.  After
    being executed once, and after the prototype
    account's .cshrc and .bashrc files are edited as
    indicated below, the second form of the call to
    SETUP_PROTOTYPE can be used in the prototype
    account.

    \`contest' is the absolute pathname of the contest
    directory.  The name ~/.hpcm_contest will be linked
    to this directory after SETUP_PROTOTYPE is run once,
    so the contest directory need not be mentioned when
    SETUP_PROTOTYPE is run a second time in the same
    prototype account.

    The contest/home directory must preexist and be
    owned by the current (prototype) account.

    Since a single contest/home directory can usually
    be used by many different contests, it is usual
    for it to be liked to a directory with a name like

    	~JJJ/prototype_home

    where JJJ is the judge's account.  To make this
    directory, one can set the ~JJJ directory tempor-
    arily to a+wx and use mkdir in the prototype ac-
    count, or one can log in as root and make this
    directory.

    SETUP_PROTOTYPE takes all ordinary files and direc-
    tories that it finds in ~ (the prototype account
    home directory) and moves then to the contest/home
    directory.  For every file or directory foo moved,
    SETUP_PROTOTYPE links ~/foo to .hpcm_contest/home/
    foo.  There are some exceptions that are NOT moved,
    namely:

    	$keep

    It is possible to replace this list of exceptions
    by making a ~/.hpcm_keep file listing the desired
    exceptions before SETUP_PROTOTYPE is run.  The
    ~/.hpcm_keep file may or may not list itself.

    After moving files and directories, SETUP_PROTOTYPE
    makes the following files in contest/home:

    	empty.ls	Ls -a of empty account directory
			after all files are rm -f'ed.
	setup.tar	Tar file used to restore all
			files into a contestant account
			home directory after all files
			are rm -f'ed.
    	setup.ls	Ls -aR of contestant account
			home directory right after
			setup.tar is used to restore
			files to that directory.

    These files are to be used by TRASH_ACCOUNT to
    reinitialize the home directories of contestant
    accounts.

    SETUP_PROTOTYPE also manages permissions of contest/
    home and the things it contains.  It sets the per-
    mission of contest/home itself to a+rx, and sets
    the permission of any file or directory moved there
    to a+r or a+rx (depending upon whether the file or
    directory has u+x permissions).  It sets the per-
    mission of empty.ls, setup.tar, and setup.ls to a+r.

    After running SETUP_PROTYTPE for the first time,
    you should edit .cshrc and/or .bashrc to include
    .hpcm_contest/bin in the program search PATH.

    You may need to make other adjustments to PATH
    and to .cshrc or .bashrc.  Note that the version
    of these files you are editing is actually in
    contest/home, and will be seen by symbolic link
    by all the contestant accounts.  You can even
    edit these files after the contestant accounts
    are all set up.

    After running SETUP_PROTOTYPE you should delete from
    ~ symbolic links that should not be used, such as
    links to xterminal server control files that will
    not be used by contestants.

    If you want to use ssh to log into contest accounts
    using a key known to the judge, you can make ~/.ssh
    and ~/.ssh/authorized_keys.  The directory must have
    chmod 700 and the file 600, else ssh will ignore
    them.  You cannot symbolically link either directory
    or file, or ssh will ignore them.  This means they
    must be setup BEFORE SETUP_PROTOTYPE is run for the
    last time, so they will be in setup.tar.  The
    authorized_keys cannot be changed after SETUP_
    PROTOTYPE is run for the last time before running
    TRASH_ACCOUNT on the contestant accounts, unlike
    .cshrc and .bashrc.

    If the contest argument is not given, it is taken to
    be the target of the symbolic link ~/.hpcm_contest,
    if that exists.  If this program succeeds, it links
    ~/.hpcm_contest to the value of the contest argu-
    ment.

    Although ~/.hpcm_contest in the prototype account
    ends up being symbolically linked to the contest
    directory, and this symbolic link is stored in
    setup.tar, TRASH_ACCOUNT does NOT use this symbolic
    link stored in setup.tar, permitting the same
    setup.tar, and therefore the same ~JJJ/prototype_
    home, to be used for many different contests."

	exit 1
	;;
    * )
    	contest=$1
	;;
esac

# Be sure contest directory has an absolute path name.
#
case "$contest" in
    /* )
    	;;
    *)
    	echo $contest is NOT an absolute pathname
	exit 1
    	;;
esac

# Check that we are in fact in the home directory of
# our account.
#
if test `pwd` != "/home/`id -un`"
then
	echo Home directory is not "/home/`id -un`"
	exit 1
fi

# Check that the contest home directory exists and
# is writable.
#
if test ! -d $contest/home -o ! -w $contest/home
then
	echo "$contest/home is not a writable directory"
	exit 1
fi

# Read ~/.hpcm_keep if that exists.
#
if test -f .hpcm_keep
then
	keep=`cat .hpcm_keep`
fi

# Check that the user really wants to move stuff.
#
echo READY TO MOVE YOUR HOME DIRECTORY FILES AND \
     "SUBDIRECTORIES!"
echo -n Do your really want to do "this (yes or no)? "
read
if test "$REPLY" != yes
then
    echo Guess not: exiting
    exit 0
fi

echo -n "Are your sure (yes or no)? "
read
if test "$REPLY" != yes
then
    echo Guess not: exiting
    exit 0
fi


# Move everything in the home directory that is not
# a symbolic link already, except things listed in
# `keep'.
#
for i in .[a-zA-Z0-9]* *
do
	found=no
	for j in $keep
	do
		if test "$i" = "$j"
		then
			found=yes
			break
		fi
	done

	if test $found = yes
	then
		continue
	fi

	if test -L "$i"
	then
		continue
	fi

	if test ! -d "$i" -a ! -f "$i"
	then
		continue
	fi

        if test -r "$i"
	then
	    if chmod a+r "$i"
	    then
		    echo "chmod a+r $i"
	    else
		    echo ERROR in chmod a+r "$i"
		    exit 1
	    fi
	fi

        if test -x "$i"
	then
	    if chmod a+x "$i"
	    then
		    echo "chmod a+x $i"
	    else
		    echo ERROR in chmod a+x "$i"
		    exit 1
	    fi
	fi

	if mv "$i" $contest/home
	then
		echo "moved $i to $contest/home"
	else
		echo ERROR in mv "$i" $contest/home
		exit 1
	fi

	if ln -s ".hpcm_contest/home/$i" "$i"
	then
		echo "linked $i to" \
		     ".hpcm_contest/home/$i"
	else
		echo ERROR in ln -s \
		     ".hpcm_contest/home/$i" "$i"
		exit 1
	fi
done

# Make $contest/home a+rx.
#
if chmod a+rx $contest/home
then
	echo "chmod a+rx $contest/home"
else
	echo "ERROR in chmod a+rx $contest/home"
	exit 1
fi

# Link ~/.hpcm_contest to contest directory.
#
rm -f .hpcm_contest

if ln -s $contest .hpcm_contest
then
	echo "linked .hpcm_contest to $contest"
else
	echo ERROR in ln -s $contest .hpcm_contest
	exit 1
fi

# Create empty.ls.
#
rm -f $contest/home/empty.ls

if (echo >$contest/home/empty.ls "."; \
    echo >>$contest/home/empty.ls ".."; \
    chmod a+r $contest/home/empty.ls)
then
	echo "created $contest/home/empty.ls"
else
	echo "ERROR in creating $contest/home/empty.ls"
	exit 1
fi

# Create setup.tar.
#
rm -f $contest/home/setup.tar
if (tar cf $contest/home/setup.tar .[a-zA-Z0-9]* *; \
    chmod a+r $contest/home/setup.tar)
then
	echo "created $contest/home/setup.tar"
else
	echo "ERROR in creating $contest/home/setup.tar"
	exit 1
fi

# Create setup.ls
#
rm -f $contest/home/setup.ls
if (ls -aR >$contest/home/setup.ls; \
    chmod a+r $contest/home/setup.ls)
then
	echo "created $contest/home/setup.ls"
else
	echo "ERROR in creating $contest/home/setup.ls"
	exit 1
fi

exit 0
