#!/bin/sh
#
# Check files for differences after filtering out
# some things.
#
# File:		filtered_diff
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Tue Jan 13 23:10:55 EST 2009
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: walton $
#   $Date: 2009/01/14 05:26:19 $
#   $RCSfile: filtered_diff,v $
#   $Revision: 1.15 $
#
# The next lines start tclsh \
trap "echo filtered_diff: Terminated by Signal" \
    HUP INT QUIT; \
tclsh "$0" "$@"; exit $status

# This is a utility program that does NOT have to run
# in a judging directory tree.

set DAY {(mo|tu|we|th|fr|sa|su)[a-z]*}
set MONTH1 {(jan|feb|mar|apr|may|jun|jul|}
set MONTH2 {aug|sep|oct|nov|dec)[a-z]*}
set MONTH  $MONTH1$MONTH2
set N {[0-9]+}
set ZONE {( [a-z]+|)}
set Z {( -[0-9]+| \+[0-9]+|)}
set NW "\[^\ \t\]"
set NWSEMI "\[^\ \t;\]"


# All abbreviation names must consist solely of capital
# letters, digits, -, and _.
#
set DATE1 "$DAY +$MONTH +$N +$N:$N:$N$ZONE +$N"
set DATE2 "$DAY, +$N +$MONTH +$N +$N:$N:$N$Z"
set DATE3 "$N/$N/$N +$N:$N:$N"
set abbreviations(DATE) \
    "{NC}{WB}($DATE1|$DATE2|$DATE3)"
set abbreviations(RECEIVED_BY) \
    "{WB}by +$NW+ +\\($N.$N.$N/$N.$N.$N\\) +id\
     +$NWSEMI+;"
set abbreviations(MESSAGE_ID) \
    "{NC}^Message-Id: +<$N.\[^>@\]+@\[^>\]+>\$"
set TO1 "To: \[^<]*<\[^>@\]+@\[^>\]+>"
set TO2 "To: \[^<>@\]*@\[^<>@\]+"
set abbreviations(TO) \
    "{NC}^($TO1|$TO2)\$"
set CC1 "Cc: \[^<]*<\[^>@\]+@\[^>\]+>"
set CC2 "Cc: \[^<>@\]*@\[^<>@\]+"
set abbreviations(CC) \
    "{NC}^($CC1|$CC2)\$"
set REPLY_TO1 "Reply-To: \[^<]*<\[^>@\]+@\[^>\]+>"
set REPLY_TO2 "Reply-To: \[^<>@\]*@\[^<>@\]+"
set abbreviations(REPLY_TO) \
    "{NC}^($REPLY_TO1|$REPLY_TO2)\$"
set RETURN_PATH1 "Return-Path: \[^<]*<\[^>@\]+@\[^>\]+>"
set RETURN_PATH2 "Return-Path: \[^<>@\]*@\[^<>@\]+"
set abbreviations(RETURN_PATH) \
    "{NC}^($RETURN_PATH1|$RETURN_PATH2)\$"
set abbreviations(RECEIVED) \
    "{NC}^Received: +\\(from +$NW+\\) *\$"
set FROM1 "(|>)From +$NW+ +$DATE1"
set FROM1X "(|>)From +$NW+ +XXX *"
set FROM2 "From: \[^<]*<\[^>@\]+@\[^>\]+>"
set FROM3 "From: \[^<>@\]*@\[^<>@\]+"
set abbreviations(FROM) \
    "{NC}^($FROM1|$FROM1X|$FROM2|$FROM3)\$"
set abbreviations(ERROR) \
   "$N-$N-$N-$N:$N:$N-$N-<<\[^>\]*>>-(un|)checked-error"
set abbreviations(SUBMISSION) \
    "$N-$N-$N-$N:$N:$N-<<\[^>\]*>>-submission"
set abbreviations(STATUS) \
    "{NC}^Status: +\[RO\]+ *\$"

# Make a list of abbreviations for documentation.
# Lines is number of lines already on current page.
#
proc abbreviations_doc { lines } {

    global abbreviations

    set result ""
    foreach abbrev [lsort [array names abbreviations]] {
	set new_result "   $abbrev\n"
	set value $abbreviations($abbrev)
	regsub -all "\t" $value "\\t" value
	regsub -all "\ " $value "\\ " value
	while { [string length $value] > 50 } {
	    set v [string range $value 0 49]
	    set value [string range $value 50 end]
	    set new_result "$new_result      $v\n"
	}
	set new_result "$new_result      $value\n"
	set new_lines [llength [split $new_result "\n"]]
	incr new_lines -1
	incr lines $new_lines
	if { $lines > 39 } {
	    set result "$result\f\n"
	    set lines $new_lines
	}
	set result "$result$new_result"
    }
    return $result
}

set document "
filtered_diff file1 file2 regular-expression ...

    Check whether file1 and file2 differ after all
    text within a line that matches any of the given
    regular expressions is replaced by XXX.  Exits
    with 0 status code if there are no differences;
    otherwise exits with status code 1 and notates the
    first difference in the standard error output,
    giving the lines that are different and the same
    lines after parts are replaced by XXX.
    
    If a regular expression begins with `{NC}' then
    letter case is ignored in matching the regular ex-
    pression.  If a regular expression begins with
    `{WB}' then whitespace must surround what the regu-
    lar expression matches.  If a regular expression
    begins with `{#}' for some natural number #, then
    the regular expression is used only for line number
    # of the files.

    The following abbreviations are recognized for the
    indicated regular expressions.  Here the regular
    expressions have been split across lines, and tab
    and space are represented by `\\t' and `\\ ' in the
    regular expressions.

[abbreviations_doc 30]

    Unlike most HPCM judging programs, this program does
    not read any hpcm_judging.rc file and errors made by
    this program are not written to log files."

# If less than 2 arguments given, print documentation
# and exit.
#
if { $argc < 2 } {
    puts $document
    exit 1
}

set file1 [lindex $argv 0]
set file2 [lindex $argv 1]
set ch1 [open $file1 r]
set ch2 [open $file2 r]

set count 0

while { "yes" } {

    set line1 [gets $ch1]
    set line2 [gets $ch2]
    if { [eof $ch1] } {
         if { [eof $ch2] } break

	 puts stderr "$file1 is shorter than $file2"
	 exit 1
    } elseif { [eof $ch2] } {

	 puts stderr "$file2 is shorter than $file1"
	 exit 1
    }

    incr count

    set line1s $line1
    set line2s $line2
    foreach regexp [lrange $argv 2 end] {

	if { [regexp {^[-_A-Z0-9]+$} $regexp] \
	     && [info exists abbreviations($regexp)] } {
	    set regexp $abbreviations($regexp)
	}
	set NC no
	set WB no
	set count_ok 1
        while { [regexp {^{(NC|WB|[0-9]+)}(.*)$} \
			$regexp forget option regexp] \
			} {
	    switch $option {
	        NC -
		WB {
		    set $option yes
		}
		default {
		    set count_ok \
		        [expr "$count == $option"]
		}
	    }
	}

	if { ! $count_ok } continue

	set replace XXX
	if { $WB } {
	    set replace " XXX "
	    set regexp "(^|\ |\t)${regexp}(\$|\ |\t)"
	}
	if { $NC } {
	    regsub -nocase -all -- $regexp $line1s \
	           $replace line1s
	    regsub -nocase -all -- $regexp $line2s \
	           $replace line2s
	} else {
	    regsub -all -- $regexp $line1s \
	           $replace line1s
	    regsub -all -- $regexp $line2s \
	           $replace line2s
	}
    }

    if { $line1s != $line2s } {
	puts stderr \
	     "$file1 and $file2 differ at line\
	      $count:"
	puts stderr "  $line1"
	puts stderr "* $line1s"
	puts stderr "  $line2"
	puts stderr "* $line2s"
	exit 1
    }
}

exit 0
