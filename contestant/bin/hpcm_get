#!/bin/sh
#
# Get demos, problems, etc for the contestant.
#
# File:		hpcm_get
# Author:	Bob Walton <walton@deas.harvard.edu>
# Date:		Mon Dec  4 07:54:50 EST 2000
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: hc3 $
#   $Date: 2000/12/04 12:52:03 $
#   $RCSfile: hpcm_get
#   $Revision: 1.8 $

cd

# Check for and consume -* options.
#
force=no
case "$1" in

    -force )
	    force=yes
	    shift
	    ;;
    -* )
	    echo "
hpcm_get [-force] [name ...]

    When used without a name, gets everything currently
    allowed.

    When used with a name, gets the named files or
    directories.  Getting a directory recursively gets
    the contents of that directory.

    Everything gotten is installed in the directory
    defined by the HPCM_HOME environment variable, or
    in ~ if HPCM_HOME is not defined.

    So for example,
    			hpcm_get demos

    gets files named \`demos/...' and puts them in the
    directory ~/demos if HPCM_HOME is undefined.

    Without the -force option, hpcm_get refuses to
    get things that seem to be already gotten.  With
    -force, it will get them anyway, which is useful
    if the version gotten is more recent or more
    complete than what was previously gotten.

    If the current account is a contest account, then
    the directory link ~/.hpcm_contest exists, and if
    possible the gotten files are symbolically linked
    to readonly files in a judge's contest directory.
    Otherwise, files are gotten by sending email and
    using the hpcm_extract program to extract the files
    from reply email (a contestant's account can be set
    up to do this automatically for received email).  In
    either case directories are \`gotten' by making new
    directories: directories are never symbolically
    linked.

    One reason for getting problems by email is that
    the autojudge can record the time the problems
    were gotten.  This makes it possible to run
    contests in which the time that a particular team
    competes is not predetermined."

    	    exit 1
	    ;;
esac

# Find directory into which to get stuff.
#
home="${HPCM_HOME:-$HOME}"

if test ! -d "$home"
then
    echo "$home is not a directory"
    exit 1
fi

# Find absolute name to which ~/.hpcm_contest is
# linked, if ~/.hpcm_contest is linked.
#
if test -x ${HOME}/.hpcm_contest
then
    contest=`ls -l ${HOME}/.hpcm_contest`
    contest=`expr "$contest" : '.*-> *\([^ ]*\) *$' `
    if test "$contest" = ""
    then
    	echo "ERROR: \`${HOME}/.hpcm_contest' is not" \
	     "a symbolic link."
	exit 1
    fi
else
    contest=""
fi

case "$contest" in
    "" )
    	
    	;;
    /* )
    	;;
    *)
    	echo "ERROR: \`${HOME}/.hpcm_contest' is" \
	     "linked to \`$contest'"
	echo "    which is NOT an absolute pathname."
	exit 1
    	;;
esac

# Loop through the name arguments, or use `help demos
# problems' as names if there are no name arguments.
#
if test "${*:+yes}" = ""
then
    names="help demos problems"
else
    names="$*"
fi
for name in $names
do

    case "$name" in
        help/* | help )

		# Ignore requests of `help' if the
		# files are available to the
		# contestants `help' command.
		#
		if test "$contest" != "" \
		        -a -d "$contest/help" \
		        -a -r "$contest/help" \
		        -a -x "$contest/help"
		then
		    if test "${*:+yes}" != ""
		    then
		    	echo "IGNORING \`$name';"
			echo "    you can access the" \
                             "help files with the" \
			     "\`help' command."
		    fi
		    continue
		fi

		dir=help ;;

        demos/* | demos )
		dir=demos ;;

        problems/* | problems )
		dir=problems ;;

	*)	echo "IGNORING \`$name';"
		echo "    first component of name is" \
                     "not \`help', \`demos', or" \
		     "\`problems'."
		continue
		;;
    esac

    if test "$contest" != "" \
            -a -d "$contest/$dir"
    then
        # Base directory ($dir) exists in $contest
	# directory.
	#
    	if test -r "$contest/$dir" \
	        -a -x "$contest/$dir"
	then
	    # Base directory ($dir) in contest directory
	    # has a+rx permissions.

	    # Compute list of directories that must
	    # exist in the $home directory tree because
	    # the are initial segments of $name.
	    #
	    ds1=""
	    n=`dirname "$name"`
	    while test "$n" != "."
	    do
		ds1="$n $ds1"
	    	n=`dirname "$n"`
	    done

	    # Compute list of directories and files
	    # that exist within the $contest/$name
	    # directory subtree.  Directory and file
	    # names are relative to $contest.
	    #
	    if test -d "$contest/$name"
	    then
		# $contest may not be readable and
		# therefore cannot be the first
		# argument to find.
		#
	        ds3=`cd "$contest/$name"; \
		    find . -type d -print`
	        fs3=`cd "$contest/$name"; \
		    find . -type f -print`
		ds2=""
		for d in $ds3
		do
		    d=`expr "$d" : '\./\(.*\)$' `
		    ds2="$ds2 $name/$d"
		done
		fs=""
		for f in $fs3
		do
		    f=`expr "$f" : '\./\(.*\)$' `
		    fs="$fs $name/$f"
		done
	    else
	        ds2=""
	        fs=$name
	    fi

	    # Make any of directories that should exist
	    # but do not.
	    #
	    for d in $ds1 $ds2
	    do
	    	if test -d "$home/$d"
		then do_nothing=
		elif mkdir "$home/$d"
		then
		    echo "made directory \`$home/$d'."
		else
		    echo "ERROR: cannot" \
		         "\`mkdir $home/$d'."
		    exit 1
		fi
	    done

	    # Symbolically link files that are not
	    # linked.
	    #
	    for f in $fs
	    do
	        if test -f "$home/$f"
		then do_nothing=
	    	elif ln -s "$contest/$f" "$home/$f"
		then
		    echo "linked file \`$home/$f'"
		else
		    echo "IGNORING \`$f';"
		    echo "    cannot" \
		         "\`ln -s $contest/$f" \
		         "$home/$f'."
		fi
	    done
		
	elif test "$dir" = problems
	then
	    echo "IGNORING \`$name';"
	    echo "    \`$dir' is not available;"
	    echo "    it should become available when" \
		 "the contest starts"
	else
	    echo "IGNORING \`$name'";
	    echo "    \`$dir' is not available;"
	    echo "    for some reason the judge has" \
	         "protected it."
	fi

	# Loop to avoid getting $name by email.
	#
	continue
    fi

    # If no name argument was given, do not get
    # `problems' by email.
    #
    if test "${*:+yes}" = "" \
            -a "$name" = "problems"
    then
    	echo "IGNORING implicit \`$name';"
	echo "    to get all the problems you must" \
	     "use \`hpcm_get problems'."
	echo "    But some contests may disallow" \
	     "getting all problems at once."
    	continue
    fi

    # Get $name by email if it has not already been
    # gotten or if -force option given.
    #
    if test -e "$home/$name" -a "$force" = "no"
    then
    	echo "IGNORING \`$name';"
	echo "    it has been gotten already;"
    	echo "    use -force to get it again."
    else
	echo "Sending email to get \`$name'."
        echo "Subject: get $name" | hpcm_sendmail
	sleep 2
    fi
done

exit 0
