#!/bin/sh
#
# Utility program to help programs like javahelp.
#
# File:		hpcm_helper
# Author:	Bob Walton <walton@deas.harvard.edu>
# Date:		Tue Sep 22 04:34:59 EDT 2009
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: walton $
#   $Date: 2009/09/22 08:35:25 $
#   $RCSfile: hpcm_helper,v $
#   $Revision: 1.3 $

# If this is not bash and bash is available, switch to
# using bash.  Note that `which bash` may output a
# grubby error message and no error code if bash does
# not exist.  Some non-bash sh'es do not have the -r
# option for `read'.
#
bash=`which bash 2>/dev/null`
if test "$BASH" = "" -a "$bash" != "" -a -x "$bash"
then
    exec bash "$0" "$@"
fi

case "$1" in
     -doc* | "" )
     		echo "
hpcm_helper command_file command_type

    Helper program for javahelp and similar programs.

    Invokes an approved \`command_type' program.  The
    list of such is read from the command_file, which
    consists of lines of the format:

    	name \"command ...\"

    Note that the command should be quoted, and will be
    processed as an sh (or bash) shell argument.

    If there is only one line, that is selected.  If
    there are more than one, the user is given the
    option of which one to choose.  If there is no
    readable command_file, the user is notified.

    Lines beginning with \`#' in the command_file are
    ignored, as are blank lines.

    The command_type is used in the messages:

        Select the command_type you want:
        NO command_type is available.

    Contests differ in the command_type commands they
    allow.  E.g., a contest some of whose terminals do
    not have X-windows will usually allow only lynx
    based JAVA documentation display commands."

    		exit 1
		;;
esac

command_file="$1"
command_type="$2"

if test -r "$command_file"
then

    # Open command file.
    #
    exec 3<"$command_file"

    # Read command file lines and accumulate commands.
    # N is command number, name_N is name, command_N is
    # command.
    #
    N=0
    menu=""
    while test x = x
    do
	read <&3 name command
	#
	# Note any quotes in the command file are
	# retained!

	if test $? -ne 0
	then
	    break
	fi

	# Skip comments and blank lines.
	#
	case "$name" in
	    "" | "#" )
	        continue;
		;;
	esac

	# Save results in data base.
	#
	N=`expr $N + 1`
	eval name_$N=$name
	eval command_$N=$command
    done

    # Close command file.
    #
    exec 3<&-

else
    echo >&2 "NO $command_type is available."
    exit 1
fi


case $N in
    0 )
	echo >&2 "NO $command_type is available."
    	;;
    1 )
        exec sh -c "$command_1"
	echo >&2 "Could not execute $command_1"
    	;;
    * )
        echo "Select the $command_type you want:"
	echo ""
	C=0
	while test $C -lt $N
	do
	    C=`expr $C + 1`
	    name=`eval echo \\\$name_$C`
	    echo "$C. $name"
	done
	echo ""
	echo -n "(select from 1 through $N) > "
	read C
	if test $C -lt 1
	then
	    echo >&2 $C is out of range
	    exit 1
	elif test $N -lt $C
	then
	    echo >&2 $C is out of range
	    exit 1
	fi
	command=`eval echo \\\$command_$C`
        exec sh -c "$command"
	echo >&2 "Could not execute $command"
    	;;
esac

exit 1
