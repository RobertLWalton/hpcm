#!/bin/sh
#
# Check email files for differences after filtering out
# header lines.
#
# File:		email_diff
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Tue Jan 13 23:10:31 EST 2009
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: walton $
#   $Date: 2009/01/14 05:26:19 $
#   $RCSfile: email_diff,v $
#   $Revision: 1.3 $
#
# The next lines start tclsh \
trap "echo email_diff: Terminated by Signal" \
    HUP INT QUIT; \
tclsh "$0" "$@"; exit $status

# This is a utility program that does NOT have to run
# in a judging directory tree.

set document "
email_diff file1 file2 header-regexp ... \\
                       \[-body \[*\]body-regexp ...\] \\

    Check whether file1 and file2 differ after all
    header lines beginning with one of the header-
    regexp's have been removed, and all body lines
    beginning with one of the body-regexp's have been
    removed.  Exits with 0 status code if there are no
    differences; otherwise exits with status code 1 and
    notates the first difference in the standard error
    output, giving the lines that are different.

    The regexp's have an implied ^ at their beginning,
    and so match only initial parts of lines.  If a
    header line is matched and removed, any continuation
    lines following it are removed.  This is not done
    for body lines, unless the body-regexp is prefixed
    by a `*'.

    Unlike most HPCM judging programs, this program does
    not read any hpcm_judging.rc file and errors made by
    this program are not written to log files."

# If less than 2 arguments given, print documentation
# and exit.
#
if { $argc < 2 } {
    puts $document
    exit 1
}

set file1 [lindex $argv 0]
set file2 [lindex $argv 1]
set ch1 [open $file1 r]
set ch2 [open $file2 r]

set header_regexps {}
set body_regexps {}
set mode header
foreach arg [lrange $argv 2 end] {
    if { $arg == "-body" } {
        set mode body
    } else {
        lappend ${mode}_regexps $arg
    }
}


# Get next line from channel.  state is the name of
# a variable that is initialized to "header".  count
# is the name of a line count variable initialized
# to 0.
#
# state is "header" if next line is in header.
#          "body"   if next line is in body.
#
proc next_line { ch state count } {
    global header_regexps body_regexps

    upvar $state s
    upvar $count c

    set remove 0

    while { "yes" } {
	set line [gets $ch]
	if { [eof $ch] } { return "" }
	incr c

	# Remove continuation lines.
	#
	if { $remove } {
	    if { [regexp "^\[ \t\]" $line] } {
		continue
	    } else {
	        set remove 0
	    }
	}

	# Return header/body separator.
	#
	if { $line == "" && $s != "body" } {
	    set s body
	    return $line
	}

	set match 0
	foreach r [set ${s}_regexps] {
	    set remove 0
	    if { [regexp {^\*} $r] && $s == "body" } {
	        set r [string range $r 1 end]
		set remove 1
	    } elseif { $s == "header" } {
		set remove 1
	    }
	    if { [regexp -nocase "^$r" $line] } {
		set match 1
		break
	    }
	}
	if { $match } {
	    continue
	} else {
	    return $line
	}
    }
}

set state1 header
set state2 header
set count1 0
set count2 0
while { "yes" } {

    set line1 [next_line $ch1 state1 count1]
    set line2 [next_line $ch2 state2 count2]
    if { [eof $ch1] } {
         if { [eof $ch2] } break

	 puts stderr "$file1 is shorter than $file2"
	 exit 1
    } elseif { [eof $ch2] } {

	 puts stderr "$file2 is shorter than $file1"
	 exit 1
    }

    if { $line1 != $line2 } {
	puts stderr \
	     "$file1 and $file2 differ:"
	puts stderr "$count1: $line1"
	puts stderr "$count2: $line2"
	exit 1
    }
}

exit 0
