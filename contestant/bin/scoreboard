#!/bin/sh
#
# Display scoreboard.
#
# File:		scoreboard
# Author:	Bob Walton <walton@deas.harvard.edu>
# Date:		Wed Jan 16 06:28:34 EST 2002
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: hc3 $
#   $Date: 2002/01/16 12:19:00 $
#   $RCSfile: scoreboard,v $
#   $Revision: 1.4 $

# Time between refreshes.
#
time=30

# Compute pages as list of pages.
#
if test -r "${HOME}/.hpcm_contest/scoreboard_map"
then

    # Compute current account name.
    #
    case "$2" in
	"" )
	    user=`id -un`
	    ;;
	*)
	    user="$2"
	    ;;
    esac

    # Open scoreboard map.
    #
    exec 3<"${HOME}/.hpcm_contest/scoreboard_map"

    # Read scoreboard map lines until match found.
    #
    while test x = x
    do
	read <&3 regexp page1 page2 page3 page4 \
	          page5 page6 page7 page8 page9

	if test $? -ne 0
	then
	    echo >&2 Could not find account \`$user\' \
	             in scoreboard_map.
	    exit 1
	fi

	result=`expr "$user" : "$regexp\$"`
	if test $result -ne 0
	then
	    break
	fi
    done

    # Close scoreboard_map file.
    #
    exec 3<&-

else
    page1=scoreboard.1
    page2=scoreboard.2
    page3=scoreboard.3
    page4=scoreboard.4
    page5=""
    page6=""
    page7=""
    page8=""
    page9=""
fi

# Process agument.
#
case "$1" in
    [1-9] )
    	# Argument is page number.
	#
	eval "page=\"\$page$1\""
	case "$page" in
	    "")
		echo page $1 does not exist
		exit 1
		;;
	    /*)	;;
	    *)	page=~/.hpcm_contest/$page
	esac
	if test ! -r "$page"
	then
	    echo cannot read "$page"
	    exit 1
	fi

	while test x = x
	do
	    clear
	    cat "$page"
	    sleep $time
	done
	;;
    "" )
        # No argument: display all readable pages.
	# Page 1 must be readable.
	#

	while test x = x
	do
	    n=1
	    while test $n -le 9
	    do
		eval "page=\"\$page$n\""
		case "$page" in
		    "")	break ;;
		    /*)	;;
		    *)	page=~/.hpcm_contest/$page
		esac

		if test -r "$page"
		then
		    clear
		    cat "$page"
		    sleep $time
		elif test $n -eq 1
		then
		    echo cannot read "$page"
		    exit 1
		else
		    break
		fi
		n=`expr $n + 1`
	    done
	done
	;;
    * )
        # Other argument.  Display documentation and
	# exit with an error.
	#
    	echo "
scoreboard [page-number [user]]

    Displays each page of the scoreboard for $time sec-
    conds and then repeats, if no page-number is given.
    Otherwise just displays the given page, and refresh-
    es the display every $time seconds.  Pages are num-
    bered 1, 2, 3, ....
    
    Each page is just a file.  If ~/.hpcm_contest/
    scoreboard_map is readable, it consists of lines of
    the form

    	regular-expression filename ...

    where the list of filenames gives the files contain-
    ing page 1, page 2, etc. of the scoreboard.  The
    first line whose regular expression matches the
    entire account name is selected and its list of
    filenames is used.  The account name can optionally
    be specified as the \`user' program argument.  It is
    an error if no line has a regular expression that
    matches.

    The \\ backslash character can be used in the
    scoreboard_map file to continue lines.  If a back-
    slash is to be included in the regular expression,
    it must be doubled.  The regular expression is as
    per the \`expr(1)' UNIX command.

    If ~/.hpcm_contest/scoreboard_map is not readable,
    the filename list defaults to:

        scoreboard.1 scoreboard.2 scoreboard.3 \\
		     scoreboard.4

    File names that do not begin with / are interpreted
    relative to ~/.hpcm_contest.

    The file for page 1 must always be readable, as must
    the file for any page specifically requested.  If
    all pages are to be displayed, any page other than 1
    whose file is unreadable causes the display to re-
    cycle to page 1."

    	exit 1
	;;
esac

exit 0
