#!/bin/sh
#
# Display scoreboard.
#
# File:		scoreboard
# Author:	Bob Walton <walton@deas.harvard.edu>
# Date:		Sun Feb 17 08:44:47 EST 2013
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: walton $
#   $Date: 2013/02/17 13:45:06 $
#   $RCSfile: scoreboard,v $
#   $Revision: 1.14 $

# Time between refreshes.
#
R=30
debug=no
cd=${HOME}/.hpcm_contest

trap "exit 0" HUP INT QUIT

# Handle all arguments up to but not including the page
# number argument.
#
while test x = x
do case "$1" in
    -doc*)
    	less -F -K <<<"
scoreboard [-debug] [-contest contest-directory] \\
           [contest] [user]

    Displays the scoreboard.

    An optional \`contest' can be given for a user that
    is entered in multiple contests.  The \`user' de-
    faults to the current account name, and is normally
    not given as a program argument.
 
    If the contest name is not given, or is given as
    \"\", it defaults to \`NONE'.  If the a user name is
    given and no contest name is to be given, use \"\"
    for the contest name.

    Contest-directory defaults to ~/.hpcm_contest, which
    is correct for contestant accounts.
    
    A scoreboard is just a file.  If contest-directory/
    scoreboard_map is readable, it consists of lines of
    the form

    	user-regular-expression \\
	    contest-regular-expression \\
	        filename

    where the filename is the name of the file contain-
    ing the scoreboard.  The first line whose regular
    expressions match the user and contest names is
    selected and its filename is used.  The user and
    contest names can be given as optional arguments,
    with the user name defaulting to the current account
    name.

    It is an error if contest-directory/scoreboard_map
    is readable and none of its lines match.

    The \\ backslash character can be used in the
    scoreboard_map file to continue lines.  If a back-
    slash is to be included in the regular expression,
    it must be doubled.  The regular expression is as
    per the \`expr(1)' UNIX command.  This means that
    alternatives are represented by \`\\(a\\|b\\)'
    with a backslash before the (, |, and ).  BUT, in
    the scoreboard_map file TWO backslashes must be used
    before the (, |, or ).  Thus one must use
    \`\\\\(a\\\\|b\\\\)'.

    If contest-directory/scoreboard_map is not read-
    able, the filename defaults to \`scoreboard'.

    File names that do not begin with / are interpreted
    relative to the contest-directory.

    Solely for backward compatibility, if a scoreboard
    file named F is not readable, but F.1 is readable,
    then the name F.1 replaces the name F.

    The -debug option prints the expr(1) commands used."

    	exit 1
	;;

    -debug)
	debug=yes
	shift
	;;

    -contest)
        cd="$2"
	shift
	shift
	;;

    "" )
    	contest=NONE
	if test $# -gt 1
	then
		shift
	fi
	break
	;;
    *) 	contest="$1"
    	shift
	break
	;;
esac
done

# Compute user name.
#
case "$1" in
    "" )	user=`id -un` ;;
    *)		user="$1" ;;
esac


# Compute scoreboard file name
#
if test -r "$cd/scoreboard_map"
then

    # Open scoreboard map.
    #
    exec 3<"$cd/scoreboard_map"

    # Read scoreboard map lines until match found.
    #
    while test x = x
    do
	read <&3 uregexp cregexp file

	if test $? -ne 0
	then
	    echo Could not find account \`$user\' \
	         and contest \`$contest\' in \
		 scoreboard_map.
	    exit 1
	fi

	if test $debug = yes
	then
	    echo DEBUG: \
	         expr "$user" : "\\($uregexp\\)\$"
	    echo DEBUG: \
	         expr "$contest" : "\\($cregexp\\)\$"
	fi

	uresult=`expr "$user" : "\\($uregexp\\)\$"`
	cresult=`expr "$contest" : "\\($cregexp\\)\$"`
	if test "$uresult" != "" -a "$cresult" != ""
	then
	    break
	fi
    done

    # Close scoreboard_map file.
    #
    exec 3<&-

else
    file=scoreboard
fi
file="$cd/$file"

# Implement compatibility feature
#
if test ! -r "$file"
then
    if test -r "$file.1"
    then
        file="$file.1"
    else
        echo "ERROR: cannot read $file"
    fi
fi

# Display file.
#
while test x = x
do
    clear
    if hpcm_less "$file" $R -F -K "$file"
    then
	sleep $R
    fi
done

exit 0
