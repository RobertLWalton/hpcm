#!/bin/sh
#
# Display scoreboard.
#
# File:		scoreboard
# Author:	Bob Walton <walton@deas.harvard.edu>
# Date:		Fri Mar  3 07:32:28 EST 2006
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: hc3 $
#   $Date: 2006/03/03 13:15:46 $
#   $RCSfile: scoreboard,v $
#   $Revision: 1.11 $

# Time between refreshes.
#
R=30
debug=no
cd=${HOME}/.hpcm_contest

# Handle all arguments up to but not including the page
# number argument.
#
while test x = x;
do case "$1" in
    -doc*)
    	echo "
scoreboard [-debug] [-contest contest-directory] \\
           [-refresh R] [contest] [page-number] [user]

    Displays each page of the scoreboard for R seconds,
    and then repeats, if no page-number is given.
    Otherwise just displays the given page, and refresh-
    es the display every R seconds.  Pages are numbered
    1, 2, 3, ..., 8, 9.
    
    R defaults to 30 seconds.

    An optional \`contest' can be given for a user that
    is entered in multiple contests.  The \`user' de-
    faults to the current account name, and is normally
    not given as a program argument.
 
    If the contest name is not given, or is given as
    \"\", it defaults to \`NONE'.  A contest name cannot
    be a single digit, and similarly a user name cannot
    be a single digit.  If the a user name is given and
    no contest name is to be given, use \"\" for the
    contest name.

    Contest-directory defaults to ~/.hpcm_contest, which
    is correct for contestant accounts.
    
    Each page is just a file.  If <contest-directory>/
    scoreboard_map is readable, it consists of lines of
    the form

    	user-regular-expression \\
	    contest-regular-expression \\
	        filename ...

    where the list of filenames gives the files contain-
    ing page 1, page 2, etc. of the scoreboard.  The
    first line whose regular expressions match the
    user and contest names is selected and its list of
    filenames is used.  The user and contest names can
    be given as optional arguments, with the user name
    defaulting to the current account name.

    It is an error if <contest-directory>/scoreboard_map
    is readable and none of its lines match.

    The \\ backslash character can be used in the
    scoreboard_map file to continue lines.  If a back-
    slash is to be included in the regular expression,
    it must be doubled.  The regular expression is as
    per the \`expr(1)' UNIX command.  This means that
    alternatives are represented by \`\\(a\\|b\\)'
    with a backslash before the (, |, and ).  BUT, in
    the scoreboard_map file TWO backslashes must be used
    before the (, |, or ).  Thus one must use
    \`\\\\(a\\\\|b\\\\)'.

    If <contest-directory>/scoreboard_map is not read-
    able, the filename list defaults to:

        scoreboard.1 scoreboard.2 scoreboard.3 \\
		     scoreboard.4

    File names that do not begin with / are interpreted
    relative to <contest-directory>.

    The file for page 1 must always be readable, as must
    the file for any page specifically requested.  If
    all pages are to be displayed, any page other than 1
    whose file is unreadable is ignored.
    
    The -debug option prints the expr(1) commands used."

    	exit 1
	;;

    -debug)
	debug=yes
	shift
	;;

    -contest)
        cd="$2"
	shift
	shift
	;;

    -refresh)
        R="$2"
	shift
	shift
	;;

    [1-9] )
    	contest=NONE
	break
    	;;
    "" )
    	contest=NONE
	if test $# -gt 1
	then
		shift
	fi
	break
	;;
    *) 	contest="$1"
    	shift
	break
	;;
esac
done

# Save and shift away any page number argument.
#
case "$1" in
    [1-9])	pn=$1
    		shift ;;
    *)		pn="" ;;
esac

# Compute user name.
#
case "$1" in
    "" )	user=`id -un` ;;
    *)		user="$1" ;;
esac


# Compute pages as list of pages.
#
if test -r "$cd/scoreboard_map"
then

    # Open scoreboard map.
    #
    exec 3<"$cd/scoreboard_map"

    # Read scoreboard map lines until match found.
    #
    while test x = x
    do
	read <&3 uregexp cregexp page1 page2 page3 \
		 page4 page5 page6 page7 page8 page9

	if test $? -ne 0
	then
	    echo Could not find account \`$user\' \
	         and contest \`$contest\' in \
		 scoreboard_map.
	    exit 1
	fi

	if test $debug == yes
	then
	    echo DEBUG: \
	         expr "$user" : "\\($uregexp\\)\$"
	    echo DEBUG: \
	         expr "$contest" : "\\($cregexp\\)\$"
	fi

	uresult=`expr "$user" : "\\($uregexp\\)\$"`
	cresult=`expr "$contest" : "\\($cregexp\\)\$"`
	if test "$uresult" != "" -a "$cresult" != ""
	then
	    break
	fi
    done

    # Close scoreboard_map file.
    #
    exec 3<&-

else
    page1=scoreboard.1
    page2=scoreboard.2
    page3=scoreboard.3
    page4=scoreboard.4
    page5=""
    page6=""
    page7=""
    page8=""
    page9=""
fi

# Display pages.
#
case "$pn" in
    [1-9] )
    	# Argument is page number.
	#
	eval "page=\"\$page$pn\""
	case "$page" in
	    "")
		echo page $pn does not exist
		exit 1
		;;
	    /*)	;;
	    *)	page=$cd/$page
	esac
	if test ! -r "$page"
	then
	    echo cannot read "$page"
	    exit 1
	fi

	while test x = x
	do
	    clear
	    cat "$page"
	    sleep $R
	done
	;;
    "" )
        # No page number argument: display all pages.
	# Page 1 must be readable.  Cycle on first
	# empty page name.  Ignore unreadable pages
	# (except for the first).
	#

	while test x = x
	do
	    n=1
	    while test $n -le 9
	    do
		eval "page=\"\$page$n\""
		case "$page" in
		    "")	break ;;
		    /*)	;;
		    *)	page=$cd/$page
		esac

		if test -r "$page"
		then
		    clear
		    cat "$page"
		    sleep $R
		elif test $n -eq 1
		then
		    echo cannot read "$page"
		    exit 1
		fi
		n=`expr $n + 1`
	    done
	done
	;;
    * )
        # Other argument.
	#
esac

exit 0
