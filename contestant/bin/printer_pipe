#! /bin/sh
#
# Pipe a postscript file to the printer associated with
# an account.
#
# File:		printer_pipe
# Author:	Bob Walton <walton@deas.harvard.edu>
# Date:		Tue Dec 26 02:15:15 EST 2006
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: walton $
#   $Date: 2006/12/26 07:16:38 $
#   $RCSfile: printer_pipe,v $
#   $Revision: 1.20 $

Pswitch=0

case "$1" in
   -P )
       shift
       Pswitch=1
       ;;
   -doc* )
   	echo "
printer_pipe where filename [username]
printer_pipe -P

    First, looks up the printer in the
    
    	~/.hpcm_contest/printer_map

    file if that is readable, or the
    
    	~/.hpcm_contest/printer
    
    file otherwise, or if neither file is readable, use
    the PRINTER environment variable.

    Then sends the standard input to the printer and
    logs a line to the ~/.hpcm_contest/printer_jobs file
    if that is writable.
    
    The \`printer_map' file has lines with the format:

    	regular-expression printer

    For the first line whose regular expression matches
    the entire user name, the printer is used.  If there
    are no matches and the file is readable, it is an
    error (the \`printer' file and PRINTER variable are
    NOT used).

    The \\ backslash character can be used in the
    printer_map file to continue lines.  If a back-
    slash is to be included in the regular expression,
    it must be doubled.  The regular expression is as
    per the \`expr(1)' UNIX command.

    Blank lines and comment lines whose first non-blank
    character is \`#' are ignored.  However, comment
    lines should not end in a single \.

    The \`printer' file contents just name the printer.
    Note that if \`printer_map' is readable, \`printer'
    is NEVER used.

    If the printer name begins with a \`!', the rest of
    the name is taken to be the name of a file that con-
    tains the printer name.  It is an error if this file
    is not readable.  If the file is readable the
    printer name is just the contents of the file (no
    further indirection is allowed).  Tilde and glob
    expansions are performed on the file name.

    If the user name is not given, the current account
    name is used.

    If the -P option is given, the printer name is writ-
    ten to the standard output, and this program exits
    without trying to print anything.  Without the -P
    option, this program continues and prints the stand-
    ard input.  If the printer name can be shortened for
    purpose of putting the name in printer_jobs, then
    \`shortname=longname' is output.

    The standard input to this program should be a
    file to be piped to the printer.  It is usually a
    postscript file, but can be ASCII with form feeds.

    If the printer name contains an \`@' the standard
    input is emailed to the printer name.  If the
    printer name begins with \`|', the standard input
    is piped to the program command that is just the
    printer name with the \`|' removed.  Otherwise the
    standard input is piped to \`lpr -Pprinter'.

    If the printer name begins with an \`@', the email
    has the standard input as an attachment, and the
    initial \`@' is stripped from the name before it is
    used as an email address.  Otherwise the standard
    input becomes the body of the email message.

    If ~/.hpcm_contest/printer_jobs is writable, a line
    is written to that file giving the date, the prin-
    ter, the \`where' argument, and the \`filename'
    argument.

    The \`where' and \`filename' arguments are used
    purely for informative purposes in the email subject
    and in ~/.hpcm_contest/printer_jobs.

    When the standard input is emailed to a printer with
    a name like \`fee<fi@fo>', one typically puts the
    following entry in the \`.procmailrc' file of the
    \`fi@fo' account:

	:0 b
	* ^To:[ 	]+fee<fi
	| lpr -Plp

    This pipes the body of any email received with a
    \`To' address of \`fee<fi...' to \`lpr -Plp'.  Here
    the []'s contain a space followed by a tab.

    One may want to hide the actual printer email
    address from contestants, so that a contestant
    cannot give this email address to an outsider who
    can then send information to the contestant via
    printouts.  Presumably one has arranged things
    so that outsiders cannot send email to contestant
    accounts.  Then one can make the account \`fi@fo'
    so that outsiders cannot send email to it, and one
    can put into the \`.procmailrc' file of that
    account the entry:

	:0
	* ^To:[ 	]+fee<fi
	| formail -i \"To: ppp<b@c>\" \\
	    | \$SENDMAIL \"ppp<b@c>\"

    This forwards the email on to \`ppp<b@c>' where the
    real printer is.  Here \`ppp' is a password to be 
    kept secret from contestants.  If outsiders cannot
    send mail to the judging account, then \`fi@fo'
    may be the judging account."

    	exit 1
	;;
esac

where="$1"
filename="$2"
if test "$filename" = ""
then
    filename="-"
fi

case "$3" in
    "" )
	user=`id -un`
	;;
    *)
        user="$3"
	;;
esac

if test -r "${HOME}/.hpcm_contest/printer_map"
then

    # Open print map.
    #
    exec 3<"${HOME}/.hpcm_contest/printer_map"

    # Read print map lines until match found.
    #
    while test x = x
    do
	read <&3 regexp printer
	if test $? -ne 0
	then
	    echo >&2 Could not find printer in \
	             printer_map.
	    exit 1
	fi
	case "$regexp" in
	"#*") continue ;;
	"#")  continue ;;
	"")   continue ;;
	esac

	result=`expr "$user" : "$regexp\$"`
	if test $result -ne 0
	then
	    break
	fi
    done

    # Close printer_map file.
    #
    exec 3<&-

elif test -r "${HOME}/.hpcm_contest/printer"
then
    printer=`cat "${HOME}/.hpcm_contest/printer"`
elif test "${PRINTER:-}" != ""
then
    printer=$PRINTER
else
    echo >&2 Could not find printer.
    exit 1
fi

# Process printer names that begin with !

case "$printer" in
    !* )
    	file=`expr "$printer" : "\!\\(.*\\)\$"`
	file=`eval echo $file`
	if test "$file" = "" -o ! -r "$file"
	then
	    echo >&2 "\`$printer'" references \
	             unreadable file.
	    exit 1
	fi
	printer=`cat "$file"`
       ;;
esac

# Complain if printer name empty.
#
if test "$printer" = ""
then
    echo >&2 Printer name is empty.
    exit 1
fi

shortname1=`expr "$printer" : "\\([^<]*\\)<"`
if test "$shortname1" = ""
then
    shortname1="$printer"
fi
shortname=`expr "$shortname1" : ".*/\\([^/]*\\)$"`
if test "$shortname" = ""
then
    shortname="$shortname1"
fi

# Process -P switch.
#
if test $Pswitch -ne 0
then
    if test "$shortname" = "$printer"
    then
	echo $printer
    else
	echo "$shortname=$printer"
    fi
    exit 0
fi

# If printer_jobs is writable, announce print job
# therein.
#
if test -w ${HOME}/.hpcm_contest/printer_jobs; then
    line=`date "+%a %r"`
    line="$line $shortname $filename $where"
    echo "$line" >> ${HOME}/.hpcm_contest/printer_jobs
fi

# Send the print job to the printer.

case "$printer" in
    \|*)
	c=` expr "$printer" : '|\(.*\)$' `
	cat | eval "$c"
	exit 0
	;;
    @*)
	t=/tmp/printer_pipe$$
	trap "rm -f $t" 0
	cat > $t
	address=` expr "$printer" : '@\(.*\)$' `
	if ( head -1 $t | \
	     grep '^%!PS' >/dev/null 2>&1 )
	then
	    ct=application/postscript
	else
	    ct=text/plain
	fi
        ( echo "To: $address"; \
	  echo "Subject: $filename $where"; \
	  echo "Content-type: multipart/mixed;" \
	       "boundary=\"=-s81nn0vOWcIHsyzN7sbU\""; \
	  echo ""; \
	  echo "--=-s81nn0vOWcIHsyzN7sbU"; \
	  echo "Content-Disposition: attachment"; \
	  echo "Content-Type: $ct"; \
	  echo "Content-Transfer-Encoding: 7bit"; \
	  echo ""; \
	  cat $t; \
	  echo "--=-s81nn0vOWcIHsyzN7sbU" ) \
	  | /usr/sbin/sendmail -t
	rm -f $t
	exit 0
    	;;
    *@*)
        ( echo "To: $printer"; \
	  echo "Subject: $filename $where"; \
	  echo ""; cat ) | /usr/sbin/sendmail -t
	exit 0
    	;;
    *)
	exec lpr -P$printer
    	;;
esac

echo >&2 WE SHOULD NEVER GET HERE
exit 1
