#! /bin/sh
#
# Email account names and passwords.
#
# File:		hpcm_email_passwords
# Author:	Bob Walton <walton@deas.harvard.edu>
# Date:		Tue Oct  3 07:15:37 EDT 2006
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: walton $
#   $Date: 2006/10/03 11:16:06 $
#   $RCSfile: hpcm_email_passwords,v $
#   $Revision: 1.10 $

case "$1" in
    -doc* )
	    echo "
hpcm_email_passwords [account ...] -[no]send \\
		     [formail-option ...]

    Account names and passwords taken from the file
    \`./passwords' are emailed to the coaches email
    address taken from the same file.  Each name and
    password is emailed in a separate message, and in
    that message is prefixed by the contents of the
    \`./passwords_header' file.  The hostname for the
    account is that returned by the \`hostname -f'
    UNIX command.

    With -nosend the messages are sent to the standard
    output instead of being sent to sendmail.  The mes-
    sages end with \`---------' lines, that serve to
    separate messages in this output.  You should care-
    fully review the messages before changing to the
    -send option.

    If accounts are given as arguments, only these
    accounts will be selected.  Otherwise all accounts
    will be selected.

    If any formail options are present, the output is
    filtered through formail with these options before
    being sent to sendmail.  For example, the options
    \`-a \"From: fee@fie.fo\"' may be useful to route
    reply messages to another email address than the
    judge's account.

    If an account name or password is \`none' in the
    \`./passwords' file, or the coaches email address
    is empty in that file, the account is ignored."

	    exit 1
	    ;;
esac

if test ! -r passwords; then
    echo >&2 ERROR: cannot read ./passwords
    exit 1
elif test ! -r passwords_header; then
    echo >&2 ERROR: cannot read ./passwords_header
    exit 1
fi

if test -x /usr/bin/sendmail
then
    sendmail=/usr/bin/sendmail
elif test -x /bin/sendmail
then
    sendmail=/bin/sendmail
elif test -x /usr/sbin/sendmail
then
    sendmail=/usr/sbin/sendmail
elif test -x /sbin/sendmail
then
    sendmail=/sbin/sendmail
else
    echo >&2 ERROR: cannot find sendmail
    exit 1
fi

accounts=
mailer=
while test $# -ne 0
do
    if test "$1" = "-send"
    then
	mailer="$sendmail -oi -t"
	shift
	break
    elif test "$1" = "-nosend"
    then
	mailer=cat
	shift
	break
    else
        accounts="$accounts $1"
	shift
    fi
done


if test "$mailer" = ""
then
    echo >&2 ERROR: no -send or -nosend argument
    exit 1
fi

hostname=`hostname -f`

exec 3< passwords
while read <&3
do
    if expr "$REPLY" : '[ 	]*#' >/dev/null
    then
	continue
    fi
    if expr "$REPLY" : '[ 	]*$' >/dev/null
    then
	continue
    fi
    if test -z "$REPLY"
    then
	continue
    fi
    user=`echo $REPLY | cut -d: -f1`
    password=`echo $REPLY | cut -d: -f2`
    who=`echo $REPLY | cut -d: -f3`
    email=`echo $REPLY | cut -d: -f4`

    found=yes
    if test "$accounts" != ""
    then
        found=no
	for u in $accounts
	do
	    if test "$u" = "$user"
	    then
	        found=yes
		break
	    fi
	done
    fi

    if test "$who" = ""
    then for_who=""
    else for_who=" for $who"
    fi

    if test "$found" = "no"
    then do_nothing=
    elif test "$user" = "none"
    then do_nothing=
    elif test "$password" = "none"
    then do_nothing=
    elif test "$email" = ""
    then do_nothing=
    elif test ! -d /home/$user
    then
    	echo >&2 ERROR: $user has no home directory
    elif ( echo "To: $email"; \
           echo "Subject:" \
	        "your programming contest account"; \
	   echo ""; \
	   cat passwords_header; \
	   echo ""; \
	   echo "The account name and" \
	        "password$for_who are:"; \
	   echo ""; \
	   echo "$user@$hostname      $password"; \
	   echo ""; \
	   echo "--------------------------"; \
	   ) | formail -f "$@" | $mailer
    then do_nothing=
    else
        echo >&2 "ERROR for $user"
    fi
done
exec 3<&-

exit 0
