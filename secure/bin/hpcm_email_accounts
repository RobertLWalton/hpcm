#! /bin/sh
#
# Email accounts a file and optionally passwords.
#
# File:		hpcm_email_accounts
# Author:	Bob Walton <walton@seas.harvard.edu>
# Date:		Sat Apr  2 13:01:28 EDT 2016
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.

case "$1" in
    -doc* )
	    echo "
hpcm_email_accounts [-password] message-file \\
                    [account ...] \\
                    -[no]send [formail-option ...]

    Account names, team names (who field), passwords,
    and coach's email addresses are taken from the file
    \`./passwords'.  Then the account name, hostname,
    team name, account password (optional), and message_
    file is emailed to the coach's email address, for
    each selected account (see below).  The hostname
    is that returned by the \`hostname -f' UNIX command.

    The email body format is:

	BLANK-LINE
        RE: Account:   ACCOUNT-NAME@HOST-NAME
	    For:       TEAM-NAME
	    Password:  PASSWORD
	BLANK-LINE
	message_file CONTENTS
	    
    where the \`Password: ...' line is omitted if the
    -password option is not given.

    With -nosend the messages are sent to the standard
    output instead of being sent to sendmail.  The mes-
    sages end with \`---------' lines, that serve to
    separate messages in this output.  You should care-
    fully review the messages before changing to the
    -send option.

    If accounts are given as arguments, only these
    accounts will be selected.  Otherwise all accounts
    will be selected.

    If any formail options are present, the output is
    filtered through formail with these options before
    being sent to sendmail.  For example, the options
    \`-a \"From: fee@fie.fo\"' may be useful to route
    reply messages to another email address than the
    judge's account.

    If an account name or password is \`none' in the
    \`./passwords' file, or the coaches email address
    is empty in that file, the account is ignored." \
    | less -F

	    exit 1
	    ;;
esac

if test ! -r passwords; then
    echo >&2 ERROR: cannot read ./passwords
    exit 1
fi

if test -x /usr/bin/sendmail
then
    sendmail=/usr/bin/sendmail
elif test -x /bin/sendmail
then
    sendmail=/bin/sendmail
elif test -x /usr/sbin/sendmail
then
    sendmail=/usr/sbin/sendmail
elif test -x /sbin/sendmail
then
    sendmail=/sbin/sendmail
else
    echo >&2 ERROR: cannot find sendmail
    exit 1
fi

send_password=no
message_file=
accounts=
mailer=

if test "$1" = "-password"
then
    send_password=yes
    shift
fi
if test $# -eq 0
then
    echo >&2 ERROR: too few arguments
    exit 1
fi
message_file="$1"
shift
if test ! -r "$message_file"
then
    echo >&2 ERROR: cannot read "$message_file"
    exit 1
fi

while test $# -ne 0
do
    if test "$1" = "-send"
    then
	mailer="$sendmail -oi -t"
	shift
	break
    elif test "$1" = "-nosend"
    then
	mailer=cat
	shift
	break
    else
        accounts="$accounts $1"
	shift
    fi
done


if test "$mailer" = ""
then
    echo >&2 ERROR: no -send or -nosend argument
    exit 1
fi

hostname=`hostname -f`

exec 3< passwords
while read <&3
do
    if expr "$REPLY" : '[ 	]*#' >/dev/null
    then
	continue
    fi
    if expr "$REPLY" : '[ 	]*$' >/dev/null
    then
	continue
    fi
    if test -z "$REPLY"
    then
	continue
    fi
    user=`echo $REPLY | cut -d: -f1`
    password=`echo $REPLY | cut -d: -f2`
    who=`echo $REPLY | cut -d: -f3`
    email=`echo $REPLY | cut -d: -f4`

    found=yes
    if test "$accounts" != ""
    then
        found=no
	for u in $accounts
	do
	    if test "$u" = "$user"
	    then
	        found=yes
		break
	    fi
	done
    fi

    if test "$who" = ""
    then for_who=""
    else for_who="$who"
    fi

    if test "$found" = "no"
    then do_nothing=
    elif test "$user" = "none"
    then do_nothing=
    elif test "$password" = "none"
    then do_nothing=
    elif test "$email" = ""
    then do_nothing=
    elif test ! -d /home/$user
    then
    	echo >&2 ERROR: $user has no home directory
    elif ( echo "To: $email"; \
           echo "Subject:" \
	        "your programming contest account"; \
	   echo ""; \
	   echo "RE: Account:   $user@$hostname"; \
	   echo "    For:       $for_who"; \
	   if test "$send_password" = "yes"; \
	   then echo "    Password:  $password"; \
	   fi; \
	   echo ""; \
	   cat "$message_file"; \
	   if test "$mailer" = "cat"; \
	   then echo "--------------------------"; \
	   fi; \
	   ) | formail -f "$@" | $mailer
    then do_nothing=
    else
        echo >&2 "ERROR for $user"
    fi
done
exec 3<&-

exit 0
